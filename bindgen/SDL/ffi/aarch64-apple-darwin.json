{
  "fileName": "/Users/lstranks/Programming/SDL-cs/src/c/production/SDL/include/SDL_bindgen.h",
  "platformRequested": "aarch64-apple-darwin",
  "platformActual": "arm64-apple-macosx13.0.0",
  "systemIncludeDirectories": [
    "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/14.0.3/include",
    "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include"
  ],
  "userIncludeDirectories": [
    "/Users/lstranks/Programming/SDL-cs/src/c/production/SDL/include",
    "/Users/lstranks/Programming/SDL-cs/ext/SDL/include"
  ],
  "pointerSize": 8,
  "macroObjects": {
    "SDL_ALPHA_OPAQUE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "255",
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 82,
        "column": 9
      }
    },
    "SDL_ALPHA_TRANSPARENT": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "0",
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 83,
        "column": 9
      }
    },
    "SDL_ASSERT_LEVEL": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "2",
      "location": {
        "fileName": "SDL_assert.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
        "line": 44,
        "column": 9
      }
    },
    "SDL_BIG_ENDIAN": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "4321",
      "location": {
        "fileName": "SDL_endian.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_endian.h",
        "line": 55,
        "column": 9
      }
    },
    "SDL_BUTTON_LEFT": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1",
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 517,
        "column": 9
      }
    },
    "SDL_BUTTON_MIDDLE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "2",
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 518,
        "column": 9
      }
    },
    "SDL_BUTTON_RIGHT": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "3",
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 519,
        "column": 9
      }
    },
    "SDL_BUTTON_X1": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "4",
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 520,
        "column": 9
      }
    },
    "SDL_BUTTON_X2": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "5",
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 521,
        "column": 9
      }
    },
    "SDL_CACHELINE_SIZE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "128",
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 44,
        "column": 9
      }
    },
    "SDL_DONTFREE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "4",
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 56,
        "column": 9
      }
    },
    "SDL_DROPEVENT_DATA_SIZE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "64",
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 617,
        "column": 9
      }
    },
    "SDL_FALSE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "0",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 135,
        "column": 9
      }
    },
    "SDL_FLT_EPSILON": {
      "type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1.1920928955078125E-07",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 209,
        "column": 9
      }
    },
    "SDL_HAPTIC_AUTOCENTER": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "131072",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 308,
        "column": 9
      }
    },
    "SDL_HAPTIC_CARTESIAN": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 347,
        "column": 9
      }
    },
    "SDL_HAPTIC_CONSTANT": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 169,
        "column": 9
      }
    },
    "SDL_HAPTIC_CUSTOM": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "32768",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 286,
        "column": 9
      }
    },
    "SDL_HAPTIC_DAMPER": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "256",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 243,
        "column": 9
      }
    },
    "SDL_HAPTIC_FRICTION": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1024",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 263,
        "column": 9
      }
    },
    "SDL_HAPTIC_GAIN": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "65536",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 299,
        "column": 9
      }
    },
    "SDL_HAPTIC_INERTIA": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "512",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 253,
        "column": 9
      }
    },
    "SDL_HAPTIC_INFINITY": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "4294967295",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 379,
        "column": 9
      }
    },
    "SDL_HAPTIC_LEFTRIGHT": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "2048",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 272,
        "column": 9
      }
    },
    "SDL_HAPTIC_PAUSE": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "524288",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 327,
        "column": 9
      }
    },
    "SDL_HAPTIC_POLAR": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "0",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 340,
        "column": 9
      }
    },
    "SDL_HAPTIC_RAMP": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "64",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 223,
        "column": 9
      }
    },
    "SDL_HAPTIC_RESERVED1": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "4096",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 277,
        "column": 9
      }
    },
    "SDL_HAPTIC_RESERVED2": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "8192",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 278,
        "column": 9
      }
    },
    "SDL_HAPTIC_RESERVED3": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "16384",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 279,
        "column": 9
      }
    },
    "SDL_HAPTIC_SAWTOOTHDOWN": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "32",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 214,
        "column": 9
      }
    },
    "SDL_HAPTIC_SAWTOOTHUP": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "16",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 205,
        "column": 9
      }
    },
    "SDL_HAPTIC_SINE": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "2",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 178,
        "column": 9
      }
    },
    "SDL_HAPTIC_SPHERICAL": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "2",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 354,
        "column": 9
      }
    },
    "SDL_HAPTIC_SPRING": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "128",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 233,
        "column": 9
      }
    },
    "SDL_HAPTIC_SQUARE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "4",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 187,
        "column": 9
      }
    },
    "SDL_HAPTIC_STATUS": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "262144",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 317,
        "column": 9
      }
    },
    "SDL_HAPTIC_STEERING_AXIS": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "3",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 364,
        "column": 9
      }
    },
    "SDL_HAPTIC_TRIANGLE": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "8",
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 196,
        "column": 9
      }
    },
    "SDL_HAT_CENTERED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "0",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 940,
        "column": 9
      }
    },
    "SDL_HAT_DOWN": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "4",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 943,
        "column": 9
      }
    },
    "SDL_HAT_LEFT": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "8",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 944,
        "column": 9
      }
    },
    "SDL_HAT_LEFTDOWN": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "12",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 948,
        "column": 9
      }
    },
    "SDL_HAT_LEFTUP": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "9",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 947,
        "column": 9
      }
    },
    "SDL_HAT_RIGHT": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "2",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 942,
        "column": 9
      }
    },
    "SDL_HAT_RIGHTDOWN": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "6",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 946,
        "column": 9
      }
    },
    "SDL_HAT_RIGHTUP": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "3",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 945,
        "column": 9
      }
    },
    "SDL_HAT_UP": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 941,
        "column": 9
      }
    },
    "SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_ALLOW_ALT_TAB_WHILE_GRABBED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 63,
        "column": 9
      }
    },
    "SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_ANDROID_ALLOW_RECREATE_ACTIVITY\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 76,
        "column": 9
      }
    },
    "SDL_HINT_ANDROID_BLOCK_ON_PAUSE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_ANDROID_BLOCK_ON_PAUSE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 87,
        "column": 9
      }
    },
    "SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 98,
        "column": 9
      }
    },
    "SDL_HINT_ANDROID_TRAP_BACK_BUTTON": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_ANDROID_TRAP_BACK_BUTTON\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 113,
        "column": 9
      }
    },
    "SDL_HINT_APP_ID": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_APP_ID\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 146,
        "column": 9
      }
    },
    "SDL_HINT_APP_NAME": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_APP_NAME\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 165,
        "column": 9
      }
    },
    "SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_APPLE_TV_CONTROLLER_UI_EVENTS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 184,
        "column": 9
      }
    },
    "SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_APPLE_TV_REMOTE_ALLOW_ROTATION\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 195,
        "column": 9
      }
    },
    "SDL_HINT_AUDIO_CATEGORY": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_AUDIO_CATEGORY\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 209,
        "column": 9
      }
    },
    "SDL_HINT_AUDIO_DEVICE_APP_NAME": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_AUDIO_DEVICE_APP_NAME\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 230,
        "column": 9
      }
    },
    "SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_AUDIO_DEVICE_SAMPLE_FRAMES\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 250,
        "column": 9
      }
    },
    "SDL_HINT_AUDIO_DEVICE_STREAM_NAME": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_AUDIO_DEVICE_STREAM_NAME\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 271,
        "column": 9
      }
    },
    "SDL_HINT_AUDIO_DEVICE_STREAM_ROLE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_AUDIO_DEVICE_STREAM_ROLE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 291,
        "column": 9
      }
    },
    "SDL_HINT_AUDIO_DRIVER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_AUDIO_DRIVER\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 300,
        "column": 9
      }
    },
    "SDL_HINT_AUDIO_INCLUDE_MONITORS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_AUDIO_INCLUDE_MONITORS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 315,
        "column": 9
      }
    },
    "SDL_HINT_AUTO_UPDATE_JOYSTICKS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_AUTO_UPDATE_JOYSTICKS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 326,
        "column": 9
      }
    },
    "SDL_HINT_AUTO_UPDATE_SENSORS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_AUTO_UPDATE_SENSORS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 337,
        "column": 9
      }
    },
    "SDL_HINT_BMP_SAVE_LEGACY_FORMAT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_BMP_SAVE_LEGACY_FORMAT\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 356,
        "column": 9
      }
    },
    "SDL_HINT_CAMERA_DRIVER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_CAMERA_DRIVER\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 372,
        "column": 9
      }
    },
    "SDL_HINT_CPU_FEATURE_MASK": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_CPU_FEATURE_MASK\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 403,
        "column": 9
      }
    },
    "SDL_HINT_DISPLAY_USABLE_BOUNDS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_DISPLAY_USABLE_BOUNDS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 425,
        "column": 9
      }
    },
    "SDL_HINT_EMSCRIPTEN_ASYNCIFY": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_EMSCRIPTEN_ASYNCIFY\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 440,
        "column": 9
      }
    },
    "SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_EMSCRIPTEN_CANVAS_SELECTOR\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 451,
        "column": 9
      }
    },
    "SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_EMSCRIPTEN_KEYBOARD_ELEMENT\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 467,
        "column": 9
      }
    },
    "SDL_HINT_ENABLE_SCREEN_KEYBOARD": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_ENABLE_SCREEN_KEYBOARD\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 479,
        "column": 9
      }
    },
    "SDL_HINT_EVENT_LOGGING": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_EVENT_LOGGING\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 493,
        "column": 9
      }
    },
    "SDL_HINT_FORCE_RAISEWINDOW": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_HINT_FORCE_RAISEWINDOW\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 506,
        "column": 9
      }
    },
    "SDL_HINT_FRAMEBUFFER_ACCELERATION": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_FRAMEBUFFER_ACCELERATION\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 520,
        "column": 9
      }
    },
    "SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_GAMECONTROLLER_IGNORE_DEVICES\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 576,
        "column": 9
      }
    },
    "SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 589,
        "column": 9
      }
    },
    "SDL_HINT_GAMECONTROLLER_SENSOR_FUSION": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_GAMECONTROLLER_SENSOR_FUSION\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 606,
        "column": 9
      }
    },
    "SDL_HINT_GAMECONTROLLERCONFIG": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_GAMECONTROLLERCONFIG\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 531,
        "column": 9
      }
    },
    "SDL_HINT_GAMECONTROLLERCONFIG_FILE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_GAMECONTROLLERCONFIG_FILE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 542,
        "column": 9
      }
    },
    "SDL_HINT_GAMECONTROLLERTYPE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_GAMECONTROLLERTYPE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 563,
        "column": 9
      }
    },
    "SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_GDK_TEXTINPUT_DEFAULT_TEXT\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 615,
        "column": 9
      }
    },
    "SDL_HINT_GDK_TEXTINPUT_DESCRIPTION": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_GDK_TEXTINPUT_DESCRIPTION\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 624,
        "column": 9
      }
    },
    "SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_GDK_TEXTINPUT_MAX_LENGTH\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 635,
        "column": 9
      }
    },
    "SDL_HINT_GDK_TEXTINPUT_SCOPE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_GDK_TEXTINPUT_SCOPE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 646,
        "column": 9
      }
    },
    "SDL_HINT_GDK_TEXTINPUT_TITLE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_GDK_TEXTINPUT_TITLE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 655,
        "column": 9
      }
    },
    "SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 668,
        "column": 9
      }
    },
    "SDL_HINT_HIDAPI_IGNORE_DEVICES": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_HIDAPI_IGNORE_DEVICES\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 681,
        "column": 9
      }
    },
    "SDL_HINT_IME_INTERNAL_EDITING": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_IME_INTERNAL_EDITING\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 695,
        "column": 9
      }
    },
    "SDL_HINT_IME_SHOW_UI": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_IME_SHOW_UI\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 706,
        "column": 9
      }
    },
    "SDL_HINT_IOS_HIDE_HOME_INDICATOR": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_IOS_HIDE_HOME_INDICATOR\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 718,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 729,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_ARCADESTICK_DEVICES\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 742,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 755,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_BLACKLIST_DEVICES": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_BLACKLIST_DEVICES\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 768,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 781,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_DEVICE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_DEVICE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 788,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_DIRECTINPUT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_DIRECTINPUT\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 414,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_FLIGHTSTICK_DEVICES\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 801,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 814,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_GAMECUBE_DEVICES": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_GAMECUBE_DEVICES\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 827,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 840,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 853,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 864,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_GAMECUBE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 877,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 893,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_JOY_CONS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 906,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 919,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_LUNA": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_LUNA\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 932,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 945,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_PS3": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_PS3\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 961,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 974,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_PS4": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_PS4\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 987,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_PS4_RUMBLE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1004,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_PS5": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_PS5\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1017,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1026,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_PS5_RUMBLE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1043,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_SHIELD": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_SHIELD\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1056,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_STADIA": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_STADIA\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1067,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_STEAM": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_STEAM\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1078,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_STEAMDECK\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1091,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_SWITCH": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_SWITCH\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1104,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1117,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1128,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1139,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_WII": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_WII\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1152,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1163,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_XBOX": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_XBOX\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1176,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_XBOX_360": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_XBOX_360\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1189,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1200,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1213,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_XBOX_ONE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1226,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1239,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_IOKIT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_IOKIT\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1250,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_LINUX_CLASSIC": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_LINUX_CLASSIC\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1261,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_LINUX_DEADZONES": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_LINUX_DEADZONES\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1272,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_LINUX_DIGITAL_HATS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1283,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_LINUX_HAT_DEADZONES\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1294,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_MFI": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_MFI\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1305,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_RAWINPUT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_RAWINPUT\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1316,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1327,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_ROG_CHAKRAM": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_ROG_CHAKRAM\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1338,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_THREAD": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_THREAD\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1349,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_THROTTLE_DEVICES": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_THROTTLE_DEVICES\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1362,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1375,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_WGI": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_WGI\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1386,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_WHEEL_DEVICES": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_WHEEL_DEVICES\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1399,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1412,
        "column": 9
      }
    },
    "SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_JOYSTICK_ZERO_CENTERED_DEVICES\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1425,
        "column": 9
      }
    },
    "SDL_HINT_KMSDRM_DEVICE_INDEX": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_KMSDRM_DEVICE_INDEX\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1434,
        "column": 9
      }
    },
    "SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_KMSDRM_REQUIRE_DRM_MASTER\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1456,
        "column": 9
      }
    },
    "SDL_HINT_LOGGING": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_LOGGING\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1474,
        "column": 9
      }
    },
    "SDL_HINT_MAC_BACKGROUND_APP": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_MAC_BACKGROUND_APP\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1485,
        "column": 9
      }
    },
    "SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1496,
        "column": 9
      }
    },
    "SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_MAC_OPENGL_ASYNC_DISPATCH\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1509,
        "column": 9
      }
    },
    "SDL_HINT_MAIN_CALLBACK_RATE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_MAIN_CALLBACK_RATE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1525,
        "column": 9
      }
    },
    "SDL_HINT_MOUSE_AUTO_CAPTURE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_MOUSE_AUTO_CAPTURE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1538,
        "column": 9
      }
    },
    "SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_MOUSE_DOUBLE_CLICK_RADIUS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1545,
        "column": 9
      }
    },
    "SDL_HINT_MOUSE_DOUBLE_CLICK_TIME": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_MOUSE_DOUBLE_CLICK_TIME\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1552,
        "column": 9
      }
    },
    "SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_MOUSE_FOCUS_CLICKTHROUGH\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1563,
        "column": 9
      }
    },
    "SDL_HINT_MOUSE_NORMAL_SPEED_SCALE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_MOUSE_NORMAL_SPEED_SCALE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1570,
        "column": 9
      }
    },
    "SDL_HINT_MOUSE_RELATIVE_MODE_CENTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_MOUSE_RELATIVE_MODE_CENTER\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1583,
        "column": 9
      }
    },
    "SDL_HINT_MOUSE_RELATIVE_MODE_WARP": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_MOUSE_RELATIVE_MODE_WARP\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1594,
        "column": 9
      }
    },
    "SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_MOUSE_RELATIVE_SPEED_SCALE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1601,
        "column": 9
      }
    },
    "SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_MOUSE_RELATIVE_SYSTEM_SCALE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1614,
        "column": 9
      }
    },
    "SDL_HINT_MOUSE_RELATIVE_WARP_MOTION": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_MOUSE_RELATIVE_WARP_MOTION\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1627,
        "column": 9
      }
    },
    "SDL_HINT_MOUSE_TOUCH_EVENTS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_MOUSE_TOUCH_EVENTS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1638,
        "column": 9
      }
    },
    "SDL_HINT_NO_SIGNAL_HANDLERS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_NO_SIGNAL_HANDLERS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1649,
        "column": 9
      }
    },
    "SDL_HINT_OPENGL_ES_DRIVER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_OPENGL_ES_DRIVER\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1670,
        "column": 9
      }
    },
    "SDL_HINT_ORIENTATIONS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_IOS_ORIENTATIONS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1682,
        "column": 9
      }
    },
    "SDL_HINT_PEN_DELAY_MOUSE_BUTTON": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_HINT_PEN_DELAY_MOUSE_BUTTON\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1693,
        "column": 9
      }
    },
    "SDL_HINT_PEN_NOT_MOUSE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_HINT_PEN_NOT_MOUSE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1710,
        "column": 9
      }
    },
    "SDL_HINT_POLL_SENTINEL": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_POLL_SENTINEL\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1723,
        "column": 9
      }
    },
    "SDL_HINT_PREFERRED_LOCALES": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_PREFERRED_LOCALES\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1734,
        "column": 9
      }
    },
    "SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_QUIT_ON_LAST_WINDOW_CLOSE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1745,
        "column": 9
      }
    },
    "SDL_HINT_RENDER_DIRECT3D_THREADSAFE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_RENDER_DIRECT3D_THREADSAFE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1756,
        "column": 9
      }
    },
    "SDL_HINT_RENDER_DIRECT3D11_DEBUG": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_RENDER_DIRECT3D11_DEBUG\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1769,
        "column": 9
      }
    },
    "SDL_HINT_RENDER_DRIVER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_RENDER_DRIVER\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1803,
        "column": 9
      }
    },
    "SDL_HINT_RENDER_LINE_METHOD": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_RENDER_LINE_METHOD\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1816,
        "column": 9
      }
    },
    "SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1827,
        "column": 9
      }
    },
    "SDL_HINT_RENDER_PS2_DYNAMIC_VSYNC": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_RENDER_PS2_DYNAMIC_VSYNC\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1838,
        "column": 9
      }
    },
    "SDL_HINT_RENDER_VSYNC": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_RENDER_VSYNC\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1851,
        "column": 9
      }
    },
    "SDL_HINT_RENDER_VULKAN_DEBUG": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_RENDER_VULKAN_DEBUG\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1781,
        "column": 9
      }
    },
    "SDL_HINT_RETURN_KEY_HIDES_IME": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_RETURN_KEY_HIDES_IME\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1862,
        "column": 9
      }
    },
    "SDL_HINT_ROG_GAMEPAD_MICE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_ROG_GAMEPAD_MICE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1875,
        "column": 9
      }
    },
    "SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_ROG_GAMEPAD_MICE_EXCLUDED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1888,
        "column": 9
      }
    },
    "SDL_HINT_RPI_VIDEO_LAYER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_RPI_VIDEO_LAYER\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1898,
        "column": 9
      }
    },
    "SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1911,
        "column": 9
      }
    },
    "SDL_HINT_SHUTDOWN_DBUS_ON_QUIT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_SHUTDOWN_DBUS_ON_QUIT\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1924,
        "column": 9
      }
    },
    "SDL_HINT_STORAGE_TITLE_DRIVER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_STORAGE_TITLE_DRIVER\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1933,
        "column": 9
      }
    },
    "SDL_HINT_STORAGE_USER_DRIVER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_STORAGE_USER_DRIVER\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1942,
        "column": 9
      }
    },
    "SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1960,
        "column": 9
      }
    },
    "SDL_HINT_THREAD_PRIORITY_POLICY": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_THREAD_PRIORITY_POLICY\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1974,
        "column": 9
      }
    },
    "SDL_HINT_TIMER_RESOLUTION": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_TIMER_RESOLUTION\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 1990,
        "column": 9
      }
    },
    "SDL_HINT_TOUCH_MOUSE_EVENTS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_TOUCH_MOUSE_EVENTS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2001,
        "column": 9
      }
    },
    "SDL_HINT_TRACKPAD_IS_TOUCH_ONLY": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_TRACKPAD_IS_TOUCH_ONLY\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2014,
        "column": 9
      }
    },
    "SDL_HINT_TV_REMOTE_AS_JOYSTICK": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_TV_REMOTE_AS_JOYSTICK\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2025,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_ALLOW_SCREENSAVER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_ALLOW_SCREENSAVER\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2036,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_DOUBLE_BUFFER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_DOUBLE_BUFFER\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2050,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_DRIVER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_DRIVER\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2059,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_EGL_GETDISPLAY_FALLBACK\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2070,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_FORCE_EGL": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_FORCE_EGL\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2081,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_MAC_FULLSCREEN_SPACES\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2092,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2103,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_SYNC_WINDOW_OPERATIONS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2118,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2131,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_WAYLAND_EMULATE_MOUSE_WARP": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_WAYLAND_EMULATE_MOUSE_WARP\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2146,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_WAYLAND_MODE_EMULATION\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2159,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_WAYLAND_MODE_SCALING": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_WAYLAND_MODE_SCALING\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2173,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_WAYLAND_PREFER_LIBDECOR\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2186,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2209,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_WIN_D3DCOMPILER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_WIN_D3DCOMPILER\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2223,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2234,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_X11_NET_WM_PING": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_X11_NET_WM_PING\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2247,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_X11_SCALING_FACTOR": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_X11_SCALING_FACTOR\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2256,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_X11_WINDOW_VISUALID": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_X11_WINDOW_VISUALID\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2263,
        "column": 9
      }
    },
    "SDL_HINT_VIDEO_X11_XRANDR": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_VIDEO_X11_XRANDR\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2274,
        "column": 9
      }
    },
    "SDL_HINT_VITA_TOUCH_MOUSE_DEVICE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_HINT_VITA_TOUCH_MOUSE_DEVICE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2286,
        "column": 9
      }
    },
    "SDL_HINT_WAVE_FACT_CHUNK": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WAVE_FACT_CHUNK\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2303,
        "column": 9
      }
    },
    "SDL_HINT_WAVE_RIFF_CHUNK_SIZE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WAVE_RIFF_CHUNK_SIZE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2320,
        "column": 9
      }
    },
    "SDL_HINT_WAVE_TRUNCATION": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WAVE_TRUNCATION\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2335,
        "column": 9
      }
    },
    "SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINDOW_ACTIVATE_WHEN_RAISED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2346,
        "column": 9
      }
    },
    "SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINDOW_ACTIVATE_WHEN_SHOWN\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2357,
        "column": 9
      }
    },
    "SDL_HINT_WINDOW_ALLOW_TOPMOST": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINDOW_ALLOW_TOPMOST\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2370,
        "column": 9
      }
    },
    "SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2381,
        "column": 9
      }
    },
    "SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINDOWS_CLOSE_ON_ALT_F4\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2392,
        "column": 9
      }
    },
    "SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINDOWS_ENABLE_MENU_MNEMONICS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2409,
        "column": 9
      }
    },
    "SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINDOWS_ENABLE_MESSAGELOOP\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2420,
        "column": 9
      }
    },
    "SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2444,
        "column": 9
      }
    },
    "SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2457,
        "column": 9
      }
    },
    "SDL_HINT_WINDOWS_INTRESOURCE_ICON": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINDOWS_INTRESOURCE_ICON\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2464,
        "column": 9
      }
    },
    "SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINDOWS_INTRESOURCE_ICON_SMALL\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2465,
        "column": 9
      }
    },
    "SDL_HINT_WINDOWS_RAW_KEYBOARD": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINDOWS_RAW_KEYBOARD\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2431,
        "column": 9
      }
    },
    "SDL_HINT_WINDOWS_USE_D3D9EX": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINDOWS_USE_D3D9EX\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2482,
        "column": 9
      }
    },
    "SDL_HINT_WINRT_HANDLE_BACK_BUTTON": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINRT_HANDLE_BACK_BUTTON\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2502,
        "column": 9
      }
    },
    "SDL_HINT_WINRT_PRIVACY_POLICY_LABEL": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINRT_PRIVACY_POLICY_LABEL\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2519,
        "column": 9
      }
    },
    "SDL_HINT_WINRT_PRIVACY_POLICY_URL": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_WINRT_PRIVACY_POLICY_URL\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2534,
        "column": 9
      }
    },
    "SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_X11_FORCE_OVERRIDE_REDIRECT\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2549,
        "column": 9
      }
    },
    "SDL_HINT_X11_WINDOW_TYPE": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_X11_WINDOW_TYPE\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2558,
        "column": 9
      }
    },
    "SDL_HINT_XINPUT_ENABLED": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL_XINPUT_ENABLED\u0022",
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2569,
        "column": 9
      }
    },
    "SDL_ICONV_E2BIG": {
      "type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8
      },
      "value": "18446744073709551614",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1202,
        "column": 9
      }
    },
    "SDL_ICONV_EILSEQ": {
      "type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8
      },
      "value": "18446744073709551613",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1203,
        "column": 9
      }
    },
    "SDL_ICONV_EINVAL": {
      "type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8
      },
      "value": "18446744073709551612",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1204,
        "column": 9
      }
    },
    "SDL_ICONV_ERROR": {
      "type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8
      },
      "value": "18446744073709551615",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1201,
        "column": 9
      }
    },
    "SDL_IPHONE_MAX_GFORCE": {
      "type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8
      },
      "value": "5",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 117,
        "column": 9
      }
    },
    "SDL_JOYSTICK_AXIS_MAX": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "32767",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 111,
        "column": 9
      }
    },
    "SDL_JOYSTICK_AXIS_MIN": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "-32768",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 112,
        "column": 9
      }
    },
    "SDL_LIL_ENDIAN": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1234",
      "location": {
        "fileName": "SDL_endian.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_endian.h",
        "line": 54,
        "column": 9
      }
    },
    "SDL_MAJOR_VERSION": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "3",
      "location": {
        "fileName": "SDL_version.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_version.h",
        "line": 60,
        "column": 9
      }
    },
    "SDL_MAX_LOG_MESSAGE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "4096",
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 54,
        "column": 9
      }
    },
    "SDL_MAX_SINT16": {
      "type": {
        "name": "Sint16",
        "kind": "typeAlias",
        "size_of": 2
      },
      "value": "32767",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 154,
        "column": 9
      }
    },
    "SDL_MAX_SINT32": {
      "type": {
        "name": "Sint32",
        "kind": "typeAlias",
        "size_of": 4
      },
      "value": "2147483647",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 166,
        "column": 9
      }
    },
    "SDL_MAX_SINT64": {
      "type": {
        "name": "Sint64",
        "kind": "typeAlias",
        "size_of": 8
      },
      "value": "-1",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 179,
        "column": 9
      }
    },
    "SDL_MAX_SINT8": {
      "type": {
        "name": "Sint8",
        "kind": "typeAlias",
        "size_of": 1
      },
      "value": "127",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 142,
        "column": 9
      }
    },
    "SDL_MAX_UINT16": {
      "type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2
      },
      "value": "65535",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 160,
        "column": 9
      }
    },
    "SDL_MAX_UINT32": {
      "type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4
      },
      "value": "4294967295",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 172,
        "column": 9
      }
    },
    "SDL_MAX_UINT64": {
      "type": {
        "name": "Uint64",
        "kind": "typeAlias",
        "size_of": 8
      },
      "value": "18446744073709551615",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 185,
        "column": 9
      }
    },
    "SDL_MAX_UINT8": {
      "type": {
        "name": "Uint8",
        "kind": "typeAlias",
        "size_of": 1
      },
      "value": "255",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 148,
        "column": 9
      }
    },
    "SDL_MIN_SINT16": {
      "type": {
        "name": "Sint16",
        "kind": "typeAlias",
        "size_of": 2
      },
      "value": "-32768",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 155,
        "column": 9
      }
    },
    "SDL_MIN_SINT32": {
      "type": {
        "name": "Sint32",
        "kind": "typeAlias",
        "size_of": 4
      },
      "value": "-2147483648",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 167,
        "column": 9
      }
    },
    "SDL_MIN_SINT64": {
      "type": {
        "name": "Sint64",
        "kind": "typeAlias",
        "size_of": 8
      },
      "value": "0",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 180,
        "column": 9
      }
    },
    "SDL_MIN_SINT8": {
      "type": {
        "name": "Sint8",
        "kind": "typeAlias",
        "size_of": 1
      },
      "value": "-128",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 143,
        "column": 9
      }
    },
    "SDL_MIN_UINT16": {
      "type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2
      },
      "value": "0",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 161,
        "column": 9
      }
    },
    "SDL_MIN_UINT32": {
      "type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4
      },
      "value": "0",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 173,
        "column": 9
      }
    },
    "SDL_MIN_UINT64": {
      "type": {
        "name": "Uint64",
        "kind": "typeAlias",
        "size_of": 8
      },
      "value": "0",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 186,
        "column": 9
      }
    },
    "SDL_MIN_UINT8": {
      "type": {
        "name": "Uint8",
        "kind": "typeAlias",
        "size_of": 1
      },
      "value": "0",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 149,
        "column": 9
      }
    },
    "SDL_MINOR_VERSION": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1",
      "location": {
        "fileName": "SDL_version.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_version.h",
        "line": 61,
        "column": 9
      }
    },
    "SDL_MOUSE_TOUCHID": {
      "type": {
        "name": "SDL_TouchID",
        "kind": "typeAlias",
        "size_of": 8
      },
      "value": "18446744073709551615",
      "location": {
        "fileName": "SDL_touch.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
        "line": 64,
        "column": 9
      }
    },
    "SDL_MS_PER_SECOND": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1000",
      "location": {
        "fileName": "SDL_timer.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
        "line": 43,
        "column": 9
      }
    },
    "SDL_MUTEX_TIMEDOUT": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1",
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 122,
        "column": 9
      }
    },
    "SDL_NS_PER_MS": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1000000",
      "location": {
        "fileName": "SDL_timer.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
        "line": 46,
        "column": 9
      }
    },
    "SDL_NS_PER_SECOND": {
      "type": {
        "name": "long long",
        "kind": "primitive",
        "size_of": 8
      },
      "value": "1000000000",
      "location": {
        "fileName": "SDL_timer.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
        "line": 45,
        "column": 9
      }
    },
    "SDL_NS_PER_US": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1000",
      "location": {
        "fileName": "SDL_timer.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
        "line": 47,
        "column": 9
      }
    },
    "SDL_NULL_WHILE_LOOP_CONDITION": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "0",
      "location": {
        "fileName": "SDL_assert.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
        "line": 113,
        "column": 9
      }
    },
    "SDL_PATCHLEVEL": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "0",
      "location": {
        "fileName": "SDL_version.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_version.h",
        "line": 62,
        "column": 9
      }
    },
    "SDL_PEN_AXIS_BIDIRECTIONAL_MASKS": {
      "type": {
        "name": "unsigned long",
        "kind": "primitive",
        "size_of": 8
      },
      "value": "393216",
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 124,
        "column": 9
      }
    },
    "SDL_PEN_FLAG_AXIS_BIT_OFFSET": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "16",
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 95,
        "column": 9
      }
    },
    "SDL_PEN_FLAG_DOWN_BIT_INDEX": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "13",
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 92,
        "column": 9
      }
    },
    "SDL_PEN_FLAG_ERASER_BIT_INDEX": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "15",
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 94,
        "column": 9
      }
    },
    "SDL_PEN_FLAG_INK_BIT_INDEX": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "14",
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 93,
        "column": 9
      }
    },
    "SDL_PEN_INFO_UNKNOWN": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "-1",
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 63,
        "column": 9
      }
    },
    "SDL_PEN_INVALID": {
      "type": {
        "name": "SDL_PenID",
        "kind": "typeAlias",
        "size_of": 4
      },
      "value": "0",
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 59,
        "column": 9
      }
    },
    "SDL_PI_D": {
      "type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8
      },
      "value": "3.141592653589793",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1133,
        "column": 9
      }
    },
    "SDL_PI_F": {
      "type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "3.1415927410125732",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1136,
        "column": 9
      }
    },
    "SDL_PLATFORM_APPLE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1",
      "location": {
        "fileName": "SDL_platform_defines.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_platform_defines.h",
        "line": 65,
        "column": 9
      }
    },
    "SDL_PLATFORM_MACOS": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1",
      "location": {
        "fileName": "SDL_platform_defines.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_platform_defines.h",
        "line": 102,
        "column": 9
      }
    },
    "SDL_PREALLOC": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1",
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 54,
        "column": 9
      }
    },
    "SDL_PRESSED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1",
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 52,
        "column": 9
      }
    },
    "SDL_PRIs64": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022lld\u0022",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 225,
        "column": 9
      }
    },
    "SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.display.HDR_enabled\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 355,
        "column": 9
      }
    },
    "SDL_PROP_DISPLAY_HDR_HEADROOM_FLOAT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.display.HDR_headroom\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 357,
        "column": 9
      }
    },
    "SDL_PROP_DISPLAY_SDR_WHITE_POINT_FLOAT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.display.SDR_white_point\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 356,
        "column": 9
      }
    },
    "SDL_PROP_GLOBAL_SYSTEM_DATE_FORMAT_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.time.date_format\u0022",
      "location": {
        "fileName": "SDL_time.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
        "line": 87,
        "column": 9
      }
    },
    "SDL_PROP_GLOBAL_SYSTEM_TIME_FORMAT_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.time.time_format\u0022",
      "location": {
        "fileName": "SDL_time.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
        "line": 88,
        "column": 9
      }
    },
    "SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.video.wayland.wl_display\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 61,
        "column": 9
      }
    },
    "SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.joystick.cap.mono_led\u0022",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 524,
        "column": 9
      }
    },
    "SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.joystick.cap.player_led\u0022",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 526,
        "column": 9
      }
    },
    "SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.joystick.cap.rgb_led\u0022",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 525,
        "column": 9
      }
    },
    "SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.joystick.cap.rumble\u0022",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 527,
        "column": 9
      }
    },
    "SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.joystick.cap.trigger_rumble\u0022",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 528,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_CREATE_NAME_STRING": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022name\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 282,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022output_colorspace\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 285,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022present_vsync\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 286,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_CREATE_SURFACE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022surface\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 284,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022vulkan.device\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 290,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022vulkan.graphics_queue_family_index\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 291,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022vulkan.instance\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 287,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022vulkan.physical_device\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 289,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022vulkan.present_queue_family_index\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 292,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022vulkan.surface\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 288,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_CREATE_WINDOW_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022window\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 283,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_D3D11_DEVICE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.d3d11.device\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 431,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.d3d12.command_queue\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 433,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_D3D12_DEVICE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.d3d12.device\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 432,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_D3D9_DEVICE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.d3d9.device\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 430,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.HDR_enabled\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 427,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.HDR_headroom\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 429,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_NAME_STRING": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.name\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 423,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.output_colorspace\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 426,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.SDR_white_point\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 428,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_SURFACE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.surface\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 425,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.vulkan.device\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 437,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.vulkan.graphics_queue_family_index\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 438,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.vulkan.instance\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 434,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.vulkan.physical_device\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 436,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.vulkan.present_queue_family_index\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 439,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.vulkan.surface\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 435,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.vulkan.swapchain_image_count\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 440,
        "column": 9
      }
    },
    "SDL_PROP_RENDERER_WINDOW_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.renderer.window\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 424,
        "column": 9
      }
    },
    "SDL_PROP_SURFACE_COLORSPACE_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.surface.colorspace\u0022",
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 234,
        "column": 9
      }
    },
    "SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.surface.HDR_headroom\u0022",
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 236,
        "column": 9
      }
    },
    "SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.surface.SDR_white_point\u0022",
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 235,
        "column": 9
      }
    },
    "SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.surface.tonemap\u0022",
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 237,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_COLORSPACE_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.colorspace\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 761,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022access\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 645,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022colorspace\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 643,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022d3d11.texture\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 650,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022d3d11.texture_u\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 651,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022d3d11.texture_v\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 652,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022d3d12.texture\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 653,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022d3d12.texture_u\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 654,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022d3d12.texture_v\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 655,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022format\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 644,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022HDR_headroom\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 649,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022height\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 647,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022metal.pixelbuffer\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 656,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022opengl.texture\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 657,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022opengl.texture_u\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 659,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022opengl.texture_uv\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 658,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022opengl.texture_v\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 660,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022opengles2.texture\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 661,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022opengles2.texture_u\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 663,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022opengles2.texture_uv\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 662,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022opengles2.texture_v\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 664,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDR_white_point\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 648,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022vulkan.texture\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 665,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022width\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 646,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.d3d11.texture\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 764,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.d3d11.texture_u\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 765,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.d3d11.texture_v\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 766,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.d3d12.texture\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 767,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.d3d12.texture_u\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 768,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.d3d12.texture_v\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 769,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.HDR_headroom\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 763,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.opengl.tex_h\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 776,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.opengl.tex_w\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 775,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.opengl.texture\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 770,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.opengl.target\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 774,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.opengl.texture_u\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 772,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.opengl.texture_uv\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 771,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.opengl.texture_v\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 773,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.opengles2.texture\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 777,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.opengles2.target\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 781,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.opengles2.texture_u\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 779,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.opengles2.texture_uv\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 778,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.opengles2.texture_v\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 780,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.SDR_white_point\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 762,
        "column": 9
      }
    },
    "SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.texture.vulkan.texture\u0022",
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 782,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.android.surface\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1115,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.android.window\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1114,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.cocoa.metal_view_tag\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1122,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_COCOA_WINDOW_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.cocoa.window\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1121,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022always_on_top\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 932,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022borderless\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 933,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022cocoa.view\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 957,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022cocoa.window\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 956,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022external_graphics_context\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 935,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022focusable\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 934,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022fullscreen\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 936,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022height\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 937,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022hidden\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 938,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022high_pixel_density\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 939,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022maximized\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 940,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022menu\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 941,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022metal\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 942,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022minimized\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 943,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022mouse_grabbed\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 944,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022opengl\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 945,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_PARENT_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022parent\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 946,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022resizable\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 947,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_TITLE_STRING": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022title\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 948,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022tooltip\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 950,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022transparent\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 949,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022utility\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 951,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022vulkan\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 952,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022wayland.create_egl_window\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 960,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_WAYLAND_SCALE_TO_DISPLAY_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022wayland.scale_to_display\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 958,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022wayland.surface_role_custom\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 959,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022wayland.wl_surface\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 961,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022width\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 953,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022win32.hwnd\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 962,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022win32.pixel_format_hwnd\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 963,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_X_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022x\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 954,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022x11.window\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 964,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_CREATE_Y_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022y\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 955,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.kmsdrm.dev_index\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1118,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.kmsdrm.drm_fd\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1119,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.kmsdrm.gbm_dev\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1120,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_SHAPE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.shape\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1113,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.uikit.metal_view_tag\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1117,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.uikit.window\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1116,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.vivante.display\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1123,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.vivante.surface\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1125,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.vivante.window\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1124,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.wayland.display\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1130,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.wayland.egl_window\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1132,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.wayland.surface\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1131,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.wayland.xdg_popup\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1136,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.wayland.xdg_positioner\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1137,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.wayland.xdg_surface\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1133,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.wayland.xdg_toplevel_export_handle\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1135,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.wayland.xdg_toplevel\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1134,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_WIN32_HDC_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.win32.hdc\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1128,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_WIN32_HWND_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.win32.hwnd\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1127,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.win32.instance\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1129,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_WINRT_WINDOW_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.winrt.window\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1126,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_X11_DISPLAY_POINTER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.x11.display\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1138,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_X11_SCREEN_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.x11.screen\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1139,
        "column": 9
      }
    },
    "SDL_PROP_WINDOW_X11_WINDOW_NUMBER": {
      "type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8
      },
      "value": "\u0022SDL.window.x11.window\u0022",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1140,
        "column": 9
      }
    },
    "SDL_RELEASED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "0",
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 51,
        "column": 9
      }
    },
    "SDL_RLEACCEL": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "2",
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 55,
        "column": 9
      }
    },
    "SDL_SIMD_ALIGNED": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "8",
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 57,
        "column": 9
      }
    },
    "SDL_STANDARD_GRAVITY": {
      "type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "9.806650161743164",
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 102,
        "column": 9
      }
    },
    "SDL_SURFACE_USES_PROPERTIES": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "16",
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 58,
        "column": 9
      }
    },
    "SDL_SWSURFACE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "0",
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 53,
        "column": 9
      }
    },
    "SDL_TEXTEDITINGEVENT_TEXT_SIZE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "64",
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 305,
        "column": 9
      }
    },
    "SDL_TRUE": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1",
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 136,
        "column": 9
      }
    },
    "SDL_US_PER_SECOND": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1000000",
      "location": {
        "fileName": "SDL_timer.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
        "line": 44,
        "column": 9
      }
    },
    "SDL_VIRTUAL_JOYSTICK_DESC_VERSION": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1",
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 395,
        "column": 9
      }
    },
    "SDL_WINDOW_ALWAYS_ON_TOP": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "32768",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 131,
        "column": 9
      }
    },
    "SDL_WINDOW_BORDERLESS": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "16",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 121,
        "column": 9
      }
    },
    "SDL_WINDOW_EXTERNAL": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "2048",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 128,
        "column": 9
      }
    },
    "SDL_WINDOW_FULLSCREEN": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 117,
        "column": 9
      }
    },
    "SDL_WINDOW_HIDDEN": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "8",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 120,
        "column": 9
      }
    },
    "SDL_WINDOW_HIGH_PIXEL_DENSITY": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "8192",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 129,
        "column": 9
      }
    },
    "SDL_WINDOW_INPUT_FOCUS": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "512",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 126,
        "column": 9
      }
    },
    "SDL_WINDOW_KEYBOARD_GRABBED": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1048576",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 135,
        "column": 9
      }
    },
    "SDL_WINDOW_MAXIMIZED": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "128",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 124,
        "column": 9
      }
    },
    "SDL_WINDOW_METAL": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "536870912",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 137,
        "column": 9
      }
    },
    "SDL_WINDOW_MINIMIZED": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "64",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 123,
        "column": 9
      }
    },
    "SDL_WINDOW_MOUSE_CAPTURE": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "16384",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 130,
        "column": 9
      }
    },
    "SDL_WINDOW_MOUSE_FOCUS": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1024",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 127,
        "column": 9
      }
    },
    "SDL_WINDOW_MOUSE_GRABBED": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "256",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 125,
        "column": 9
      }
    },
    "SDL_WINDOW_NOT_FOCUSABLE": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "2147483648",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 139,
        "column": 9
      }
    },
    "SDL_WINDOW_OCCLUDED": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "4",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 119,
        "column": 9
      }
    },
    "SDL_WINDOW_OPENGL": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "2",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 118,
        "column": 9
      }
    },
    "SDL_WINDOW_POPUP_MENU": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "524288",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 134,
        "column": 9
      }
    },
    "SDL_WINDOW_RESIZABLE": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "32",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 122,
        "column": 9
      }
    },
    "SDL_WINDOW_TOOLTIP": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "262144",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 133,
        "column": 9
      }
    },
    "SDL_WINDOW_TRANSPARENT": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1073741824",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 138,
        "column": 9
      }
    },
    "SDL_WINDOW_UTILITY": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "131072",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 132,
        "column": 9
      }
    },
    "SDL_WINDOW_VULKAN": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "268435456",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 136,
        "column": 9
      }
    },
    "SDL_WINDOWPOS_CENTERED_MASK": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "805240832",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 153,
        "column": 9
      }
    },
    "SDL_WINDOWPOS_UNDEFINED_MASK": {
      "type": {
        "name": "unsigned int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "536805376",
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 144,
        "column": 9
      }
    },
    "SDLK_SCANCODE_MASK": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "1073741824",
      "location": {
        "fileName": "SDL_keycode.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keycode.h",
        "line": 47,
        "column": 9
      }
    },
    "TARGET_OS_VISION": {
      "type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4
      },
      "value": "0",
      "location": {
        "fileName": "SDL_platform_defines.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_platform_defines.h",
        "line": 90,
        "column": 9
      }
    }
  },
  "variables": {},
  "functions": {
    "SDL_abs": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 514,
        "column": 29
      }
    },
    "SDL_acos": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1155,
        "column": 32
      },
      "comment": "/**\n * Use this function to compute arc cosine of \u0060x\u0060.\n *\n * The definition of \u0060y = acos(x)\u0060 is \u0060x = cos(y)\u0060.\n *\n * Domain: \u0060-1 \u003C= x \u003C= 1\u0060\n *\n * Range: \u00600 \u003C= y \u003C= Pi\u0060\n *\n * \\param x floating point value, in radians.\n * \\returns arc cosine of \u0060x\u0060.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_acosf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1156,
        "column": 31
      }
    },
    "SDL_AcquireCameraFrame": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Surface *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_Surface",
          "kind": "typeAlias",
          "size_of": 96,
          "align_of": 8,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 131,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_Surface",
            "kind": "struct",
            "size_of": 96,
            "align_of": 8,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 107,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "camera",
          "type": {
            "name": "SDL_Camera *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Camera",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_camera.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
                "line": 54,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "timestampNS",
          "type": {
            "name": "Uint64 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint64",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 187,
                "column": 18
              },
              "inner_type": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_uint64_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                  "line": 31,
                  "column": 28,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 424,
        "column": 39
      },
      "comment": "/**\n * Acquire a frame.\n *\n * The frame is a memory pointer to the image data, whose size and format are\n * given by the spec requested when opening the device.\n *\n * This is a non blocking API. If there is a frame available, a non-NULL\n * surface is returned, and timestampNS will be filled with a non-zero value.\n *\n * Note that an error case can also return NULL, but a NULL by itself is\n * normal and just signifies that a new frame is not yet available. Note that\n * even if a camera device fails outright (a USB camera is unplugged while in\n * use, etc), SDL will send an event separately to notify the app, but\n * continue to provide blank frames at ongoing intervals until\n * SDL_CloseCamera() is called, so real failure here is almost always an out\n * of memory condition.\n *\n * After use, the frame should be released with SDL_ReleaseCameraFrame(). If\n * you don\u0027t do this, the system may stop providing more video!\n *\n * Do not call SDL_FreeSurface() on the returned surface! It must be given\n * back to the camera subsystem with SDL_ReleaseCameraFrame!\n *\n * If the system is waiting for the user to approve access to the camera, as\n * some platforms require, this will return NULL (no frames available); you\n * should either wait for an SDL_EVENT_CAMERA_DEVICE_APPROVED (or\n * SDL_EVENT_CAMERA_DEVICE_DENIED) event, or poll SDL_IsCameraApproved()\n * occasionally until it returns non-zero.\n *\n * \\param camera opened camera device\n * \\param timestampNS a pointer filled in with the frame\u0027s timestamp, or 0 on\n *                    error. Can be NULL.\n * \\returns A new frame of video on success, NULL if none is currently\n *          available.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ReleaseCameraFrame\n */"
    },
    "SDL_AddEventWatch": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "filter",
          "type": {
            "name": "SDL_EventFilter",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 1100,
              "column": 23
            },
            "inner_type": {
              "name": "int (void *, SDL_Event *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 1100,
            "column": 23
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 1191,
        "column": 29
      },
      "comment": "/**\n * Add a callback to be triggered when an event is added to the event queue.\n *\n * \u0060filter\u0060 will be called when an event happens, and its return value is\n * ignored.\n *\n * **WARNING**: Be very careful of what you do in the event filter function,\n * as it may run in a different thread!\n *\n * If the quit event is generated by a signal (e.g. SIGINT), it will bypass\n * the internal queue and be delivered to the watch callback immediately, and\n * arrive at the next event poll.\n *\n * Note: the callback is called for events posted by the user through\n * SDL_PushEvent(), but not for disabled events, nor for events by a filter\n * callback set with SDL_SetEventFilter(), nor for events posted by the user\n * through SDL_PeepEvents().\n *\n * \\param filter an SDL_EventFilter function to call when an event happens.\n * \\param userdata a pointer that is passed to \u0060filter\u0060\n * \\returns 0 on success, or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DelEventWatch\n * \\sa SDL_SetEventFilter\n */"
    },
    "SDL_AddGamepadMapping": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "mapping",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 251,
        "column": 29
      },
      "comment": "/**\n * Add support for gamepads that SDL is unaware of or change the binding of an\n * existing gamepad.\n *\n * The mapping string has the format \u0022GUID,name,mapping\u0022, where GUID is the\n * string value from SDL_GetJoystickGUIDString(), name is the human readable\n * string for the device and mappings are gamepad mappings to joystick ones.\n * Under Windows there is a reserved GUID of \u0022xinput\u0022 that covers all XInput\n * devices. The mapping format for joystick is:\n *\n * - \u0060bX\u0060: a joystick button, index X\n * - \u0060hX.Y\u0060: hat X with value Y\n * - \u0060aX\u0060: axis X of the joystick\n *\n * Buttons can be used as a gamepad axes and vice versa.\n *\n * This string shows an example of a valid mapping for a gamepad:\n *\n * \u0060\u0060\u0060c\n * \u0022341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7\u0022\n * \u0060\u0060\u0060\n *\n * \\param mapping the mapping string\n * \\returns 1 if a new mapping is added, 0 if an existing mapping is updated,\n *          -1 on error; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadMapping\n * \\sa SDL_GetGamepadMappingForGUID\n */"
    },
    "SDL_AddGamepadMappingsFromFile": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "file",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 309,
        "column": 29
      },
      "comment": "/**\n * Load a set of gamepad mappings from a file.\n *\n * You can call this function several times, if needed, to load different\n * database files.\n *\n * If a new mapping is loaded for an already known gamepad GUID, the later\n * version will overwrite the one currently loaded.\n *\n * Mappings not belonging to the current platform or with no platform field\n * specified will be ignored (i.e. mappings for Linux will be ignored in\n * Windows, etc).\n *\n * \\param file the mappings file to load\n * \\returns the number of mappings added or -1 on error; call SDL_GetError()\n *          for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AddGamepadMapping\n * \\sa SDL_AddGamepadMappingsFromIO\n * \\sa SDL_GetGamepadMapping\n * \\sa SDL_GetGamepadMappingForGUID\n */"
    },
    "SDL_AddGamepadMappingsFromIO": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "src",
          "type": {
            "name": "SDL_IOStream *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_IOStream",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_iostream.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_iostream.h",
                "line": 112,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "closeio",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 283,
        "column": 29
      },
      "comment": "/**\n * Load a set of gamepad mappings from an SDL_IOStream.\n *\n * You can call this function several times, if needed, to load different\n * database files.\n *\n * If a new mapping is loaded for an already known gamepad GUID, the later\n * version will overwrite the one currently loaded.\n *\n * Mappings not belonging to the current platform or with no platform field\n * specified will be ignored (i.e. mappings for Linux will be ignored in\n * Windows, etc).\n *\n * This function will load the text database entirely in memory before\n * processing it, so take this into consideration if you are in a memory\n * constrained environment.\n *\n * \\param src the data stream for the mappings to be added\n * \\param closeio if SDL_TRUE, calls SDL_CloseIO() on \u0060src\u0060 before returning,\n *                even in the case of an error\n * \\returns the number of mappings added or -1 on error; call SDL_GetError()\n *          for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AddGamepadMapping\n * \\sa SDL_AddGamepadMappingsFromFile\n * \\sa SDL_GetGamepadMapping\n * \\sa SDL_GetGamepadMappingForGUID\n */"
    },
    "SDL_AddHintCallback": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "callback",
          "type": {
            "name": "SDL_HintCallback",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_hints.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
              "line": 2690,
              "column": 24
            },
            "inner_type": {
              "name": "void (void *, const char *, const char *, const char *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_hints.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
            "line": 2690,
            "column": 24
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2706,
        "column": 29
      },
      "comment": "/**\n * Add a function to watch a particular hint.\n *\n * \\param name the hint to watch\n * \\param callback An SDL_HintCallback function that will be called when the\n *                 hint value changes\n * \\param userdata a pointer to pass to the callback function\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DelHintCallback\n */"
    },
    "SDL_AddTimer": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_TimerID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_timer.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
          "line": 142,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "interval",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        },
        {
          "name": "callback",
          "type": {
            "name": "SDL_TimerCallback",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_timer.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
              "line": 137,
              "column": 26
            },
            "inner_type": {
              "name": "Uint32 (Uint32, void *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_timer.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
            "line": 137,
            "column": 26
          }
        },
        {
          "name": "param",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_timer.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
        "line": 176,
        "column": 37
      },
      "comment": "/**\n * Call a callback function at a future time.\n *\n * If you use this function, you must pass \u0060SDL_INIT_TIMER\u0060 to SDL_Init().\n *\n * The callback function is passed the current timer interval and the user\n * supplied parameter from the SDL_AddTimer() call and should return the next\n * timer interval. If the value returned from the callback is 0, the timer is\n * canceled.\n *\n * The callback is run on a separate thread.\n *\n * Timers take into account the amount of time it took to execute the\n * callback. For example, if the callback took 250 ms to execute and returned\n * 1000 (ms), the timer would only wait another 750 ms before its next\n * iteration.\n *\n * Timing may be inexact due to OS scheduling. Be sure to note the current\n * time with SDL_GetTicksNS() or SDL_GetPerformanceCounter() in case your\n * callback needs to adjust for variances.\n *\n * \\param interval the timer delay, in milliseconds, passed to \u0060callback\u0060\n * \\param callback the SDL_TimerCallback function to call when the specified\n *                 \u0060interval\u0060 elapses\n * \\param param a pointer that is passed to \u0060callback\u0060\n * \\returns a timer ID or 0 if an error occurs; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RemoveTimer\n */"
    },
    "SDL_AddVulkanRenderSemaphores": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "wait_stage_mask",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        },
        {
          "name": "wait_semaphore",
          "type": {
            "name": "Sint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 181,
              "column": 17
            },
            "inner_type": {
              "name": "int64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_int64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 181,
            "column": 17
          }
        },
        {
          "name": "signal_semaphore",
          "type": {
            "name": "Sint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 181,
              "column": 17
            },
            "inner_type": {
              "name": "int64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_int64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 181,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 2129,
        "column": 29
      },
      "comment": "/**\n * Add a set of synchronization semaphores for the current frame.\n *\n * The Vulkan renderer will wait for \u0060wait_semaphore\u0060 before submitting\n * rendering commands and signal \u0060signal_semaphore\u0060 after rendering commands\n * are complete for this frame.\n *\n * This should be called each frame that you want semaphore synchronization.\n * The Vulkan renderer may have multiple frames in flight on the GPU, so you\n * should have multiple semaphores that are used for synchronization. Querying\n * SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER will give you the\n * maximum number of semaphores you\u0027ll need.\n *\n * \\param renderer the rendering context\n * \\param wait_stage_mask the VkPipelineStageFlags for the wait\n * \\param wait_semaphore a VkSempahore to wait on before rendering the current\n *                       frame, or 0 if not needed\n * \\param signal_semaphore a VkSempahore that SDL will signal when rendering\n *                         for the current frame is complete, or 0 if not\n *                         needed\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_aligned_alloc": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "alignment",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 485,
        "column": 42
      },
      "comment": "/**\n * Allocate memory aligned to a specific value\n *\n * If \u0060alignment\u0060 is less than the size of \u0060void *\u0060, then it will be increased\n * to match that.\n *\n * The returned memory address will be a multiple of the alignment value, and\n * the amount of memory allocated will be a multiple of the alignment value.\n *\n * The memory returned by this function must be freed with SDL_aligned_free()\n *\n * \\param alignment the alignment requested\n * \\param size the size to allocate\n * \\returns a pointer to the aligned memory\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_aligned_free\n */"
    },
    "SDL_aligned_free": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "mem",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 494,
        "column": 30
      },
      "comment": "/**\n * Free memory allocated by SDL_aligned_alloc()\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_aligned_alloc\n */"
    },
    "SDL_AllocateEventMemory": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 1276,
        "column": 32
      },
      "comment": "/**\n * Allocate dynamic memory for an SDL event\n *\n * You can use this to allocate memory for user events that will be\n * automatically freed after the event is processed.\n *\n * \\param size the amount of memory to allocate\n * \\returns a pointer to the memory allocated or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_asin": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1157,
        "column": 32
      }
    },
    "SDL_asinf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1158,
        "column": 31
      }
    },
    "SDL_atan": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1159,
        "column": 32
      }
    },
    "SDL_atan2": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "y",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1161,
        "column": 32
      }
    },
    "SDL_atan2f": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1162,
        "column": 31
      }
    },
    "SDL_atanf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1160,
        "column": 31
      }
    },
    "SDL_atof": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 998,
        "column": 32
      }
    },
    "SDL_atoi": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 997,
        "column": 29
      }
    },
    "SDL_AtomicAdd": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "a",
          "type": {
            "name": "SDL_AtomicInt *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_AtomicInt",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_atomic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
                "line": 270,
                "column": 45
              },
              "inner_type": {
                "name": "struct SDL_AtomicInt",
                "kind": "struct",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_atomic.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
                  "line": 270,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "v",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_atomic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
        "line": 339,
        "column": 29
      },
      "comment": "/**\n * Add to an atomic variable.\n *\n * This function also acts as a full memory barrier.\n *\n * ***Note: If you don\u0027t know what this function is for, you shouldn\u0027t use\n * it!***\n *\n * \\param a a pointer to an SDL_AtomicInt variable to be modified\n * \\param v the desired value to add\n * \\returns the previous value of the atomic variable.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AtomicDecRef\n * \\sa SDL_AtomicIncRef\n */"
    },
    "SDL_AtomicCompareAndSwap": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "a",
          "type": {
            "name": "SDL_AtomicInt *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_AtomicInt",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_atomic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
                "line": 270,
                "column": 45
              },
              "inner_type": {
                "name": "struct SDL_AtomicInt",
                "kind": "struct",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_atomic.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
                  "line": 270,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "oldval",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "newval",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_atomic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
        "line": 287,
        "column": 34
      },
      "comment": "/**\n * Set an atomic variable to a new value if it is currently an old value.\n *\n * ***Note: If you don\u0027t know what this function is for, you shouldn\u0027t use\n * it!***\n *\n * \\param a a pointer to an SDL_AtomicInt variable to be modified\n * \\param oldval the old value\n * \\param newval the new value\n * \\returns SDL_TRUE if the atomic variable was set, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AtomicCompareAndSwapPointer\n */"
    },
    "SDL_AtomicCompareAndSwapPointer": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "a",
          "type": {
            "name": "void **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "void",
                "kind": "primitive",
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "oldval",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "newval",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_atomic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
        "line": 375,
        "column": 34
      },
      "comment": "/**\n * Set a pointer to a new value if it is currently an old value.\n *\n * ***Note: If you don\u0027t know what this function is for, you shouldn\u0027t use\n * it!***\n *\n * \\param a a pointer to a pointer\n * \\param oldval the old pointer value\n * \\param newval the new pointer value\n * \\returns SDL_TRUE if the pointer was set, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AtomicCompareAndSwap\n * \\sa SDL_AtomicGetPtr\n * \\sa SDL_AtomicSetPtr\n */"
    },
    "SDL_AtomicGet": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "a",
          "type": {
            "name": "SDL_AtomicInt *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_AtomicInt",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_atomic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
                "line": 270,
                "column": 45
              },
              "inner_type": {
                "name": "struct SDL_AtomicInt",
                "kind": "struct",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_atomic.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
                  "line": 270,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_atomic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
        "line": 320,
        "column": 29
      },
      "comment": "/**\n * Get the value of an atomic variable.\n *\n * ***Note: If you don\u0027t know what this function is for, you shouldn\u0027t use\n * it!***\n *\n * \\param a a pointer to an SDL_AtomicInt variable\n * \\returns the current value of an atomic variable.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AtomicSet\n */"
    },
    "SDL_AtomicGetPtr": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "a",
          "type": {
            "name": "void **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "void",
                "kind": "primitive",
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_atomic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
        "line": 408,
        "column": 31
      },
      "comment": "/**\n * Get the value of a pointer atomically.\n *\n * ***Note: If you don\u0027t know what this function is for, you shouldn\u0027t use\n * it!***\n *\n * \\param a a pointer to a pointer\n * \\returns the current value of a pointer.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AtomicCompareAndSwapPointer\n * \\sa SDL_AtomicSetPtr\n */"
    },
    "SDL_AtomicSet": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "a",
          "type": {
            "name": "SDL_AtomicInt *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_AtomicInt",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_atomic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
                "line": 270,
                "column": 45
              },
              "inner_type": {
                "name": "struct SDL_AtomicInt",
                "kind": "struct",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_atomic.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
                  "line": 270,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "v",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_atomic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
        "line": 305,
        "column": 29
      },
      "comment": "/**\n * Set an atomic variable to a value.\n *\n * This function also acts as a full memory barrier.\n *\n * ***Note: If you don\u0027t know what this function is for, you shouldn\u0027t use\n * it!***\n *\n * \\param a a pointer to an SDL_AtomicInt variable to be modified\n * \\param v the desired value\n * \\returns the previous value of the atomic variable.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AtomicGet\n */"
    },
    "SDL_AtomicSetPtr": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "a",
          "type": {
            "name": "void **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "void",
                "kind": "primitive",
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "v",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_atomic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
        "line": 392,
        "column": 31
      },
      "comment": "/**\n * Set a pointer to a value atomically.\n *\n * ***Note: If you don\u0027t know what this function is for, you shouldn\u0027t use\n * it!***\n *\n * \\param a a pointer to a pointer\n * \\param v the desired pointer value\n * \\returns the previous value of the pointer.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AtomicCompareAndSwapPointer\n * \\sa SDL_AtomicGetPtr\n */"
    },
    "SDL_AttachVirtualJoystick": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_JoystickID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_joystick.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
          "line": 84,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "type",
          "type": {
            "name": "SDL_JoystickType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 98,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_JoystickType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 86,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 98,
            "column": 3
          }
        },
        {
          "name": "naxes",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "nbuttons",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "nhats",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 353,
        "column": 40
      },
      "comment": "/**\n * Attach a new virtual joystick.\n *\n * \\param type type of joystick\n * \\param naxes number of axes\n * \\param nbuttons number of buttons\n * \\param nhats number of hats\n * \\returns the joystick instance ID, or 0 if an error occurred; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AttachVirtualJoystickEx\n * \\sa SDL_DetachVirtualJoystick\n */"
    },
    "SDL_AttachVirtualJoystickEx": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_JoystickID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_joystick.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
          "line": 84,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "desc",
          "type": {
            "name": "const SDL_VirtualJoystickDesc *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_VirtualJoystickDesc",
              "kind": "typeAlias",
              "size_of": 88,
              "align_of": 8,
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 390,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_VirtualJoystickDesc",
                "kind": "struct",
                "size_of": 88,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_joystick.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                  "line": 366,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 409,
        "column": 40
      },
      "comment": "/**\n * Attach a new virtual joystick with extended properties.\n *\n * \\param desc Joystick description\n * \\returns the joystick instance ID, or 0 if an error occurred; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AttachVirtualJoystick\n * \\sa SDL_DetachVirtualJoystick\n */"
    },
    "SDL_BlitSurface": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "src",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "srcrect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dstrect",
          "type": {
            "name": "SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 926,
        "column": 29
      },
      "comment": "/**\n * Performs a fast blit from the source surface to the destination surface.\n *\n * This assumes that the source and destination rectangles are the same size.\n * If either \u0060srcrect\u0060 or \u0060dstrect\u0060 are NULL, the entire surface (\u0060src\u0060 or\n * \u0060dst\u0060) is copied. The final blit rectangles are saved in \u0060srcrect\u0060 and\n * \u0060dstrect\u0060 after all clipping is performed.\n *\n * The blit function should not be called on a locked surface.\n *\n * The blit semantics for surfaces with and without blending and colorkey are\n * defined as follows:\n *\n * \u0060\u0060\u0060c\n *    RGBA-\u003ERGB:\n *      Source surface blend mode set to SDL_BLENDMODE_BLEND:\n *       alpha-blend (using the source alpha-channel and per-surface alpha)\n *       SDL_SRCCOLORKEY ignored.\n *     Source surface blend mode set to SDL_BLENDMODE_NONE:\n *       copy RGB.\n *       if SDL_SRCCOLORKEY set, only copy the pixels matching the\n *       RGB values of the source color key, ignoring alpha in the\n *       comparison.\n *\n *   RGB-\u003ERGBA:\n *     Source surface blend mode set to SDL_BLENDMODE_BLEND:\n *       alpha-blend (using the source per-surface alpha)\n *     Source surface blend mode set to SDL_BLENDMODE_NONE:\n *       copy RGB, set destination alpha to source per-surface alpha value.\n *     both:\n *       if SDL_SRCCOLORKEY set, only copy the pixels matching the\n *       source color key.\n *\n *   RGBA-\u003ERGBA:\n *     Source surface blend mode set to SDL_BLENDMODE_BLEND:\n *       alpha-blend (using the source alpha-channel and per-surface alpha)\n *       SDL_SRCCOLORKEY ignored.\n *     Source surface blend mode set to SDL_BLENDMODE_NONE:\n *       copy all of RGBA to the destination.\n *       if SDL_SRCCOLORKEY set, only copy the pixels matching the\n *       RGB values of the source color key, ignoring alpha in the\n *       comparison.\n *\n *   RGB-\u003ERGB:\n *     Source surface blend mode set to SDL_BLENDMODE_BLEND:\n *       alpha-blend (using the source per-surface alpha)\n *     Source surface blend mode set to SDL_BLENDMODE_NONE:\n *       copy RGB.\n *     both:\n *       if SDL_SRCCOLORKEY set, only copy the pixels matching the\n *       source color key.\n * \u0060\u0060\u0060\n *\n * \\param src the SDL_Surface structure to be copied from\n * \\param srcrect the SDL_Rect structure representing the rectangle to be\n *                copied, or NULL to copy the entire surface\n * \\param dst the SDL_Surface structure that is the blit target\n * \\param dstrect the SDL_Rect structure representing the x and y position in\n *                the destination surface. On input the width and height are\n *                ignored (taken from srcrect), and on output this is filled\n *                in with the actual rectangle used after clipping.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_BlitSurfaceScaled\n */"
    },
    "SDL_BlitSurfaceScaled": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "src",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "srcrect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dstrect",
          "type": {
            "name": "SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "scaleMode",
          "type": {
            "name": "SDL_ScaleMode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 76,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_ScaleMode",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 71,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 76,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 990,
        "column": 29
      },
      "comment": "/**\n * Perform a scaled blit to a destination surface, which may be of a different\n * format.\n *\n * \\param src the SDL_Surface structure to be copied from\n * \\param srcrect the SDL_Rect structure representing the rectangle to be\n *                copied\n * \\param dst the SDL_Surface structure that is the blit target\n * \\param dstrect the SDL_Rect structure representing the target rectangle in\n *                the destination surface, filled with the actual rectangle\n *                used after clipping\n * \\param scaleMode scale algorithm to be used\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_BlitSurface\n */"
    },
    "SDL_BlitSurfaceUnchecked": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "src",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "srcrect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dstrect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 947,
        "column": 29
      },
      "comment": "/**\n * Perform low-level surface blitting only.\n *\n * This is a semi-private blit function and it performs low-level surface\n * blitting, assuming the input rectangles have already been clipped.\n *\n * \\param src the SDL_Surface structure to be copied from\n * \\param srcrect the SDL_Rect structure representing the rectangle to be\n *                copied, or NULL to copy the entire surface\n * \\param dst the SDL_Surface structure that is the blit target\n * \\param dstrect the SDL_Rect structure representing the target rectangle in\n *                the destination surface\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_BlitSurface\n */"
    },
    "SDL_BlitSurfaceUncheckedScaled": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "src",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "srcrect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dstrect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "scaleMode",
          "type": {
            "name": "SDL_ScaleMode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 76,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_ScaleMode",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 71,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 76,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 1012,
        "column": 29
      },
      "comment": "/**\n * Perform low-level surface scaled blitting only.\n *\n * This is a semi-private function and it performs low-level surface blitting,\n * assuming the input rectangles have already been clipped.\n *\n * \\param src the SDL_Surface structure to be copied from\n * \\param srcrect the SDL_Rect structure representing the rectangle to be\n *                copied\n * \\param dst the SDL_Surface structure that is the blit target\n * \\param dstrect the SDL_Rect structure representing the target rectangle in\n *                the destination surface\n * \\param scaleMode scale algorithm to be used\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_BlitSurfaceScaled\n */"
    },
    "SDL_BroadcastCondition": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "cond",
          "type": {
            "name": "SDL_Condition *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Condition",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 622,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 680,
        "column": 29
      },
      "comment": "/**\n * Restart all threads that are waiting on the condition variable.\n *\n * \\param cond the condition variable to signal\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SignalCondition\n * \\sa SDL_WaitCondition\n * \\sa SDL_WaitConditionTimeout\n */"
    },
    "SDL_bsearch": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "key",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "base",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "nmemb",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        },
        {
          "name": "compare",
          "type": {
            "name": "int (const void *, const void *)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 509,
        "column": 32
      }
    },
    "SDL_bsearch_r": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "key",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "base",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "nmemb",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        },
        {
          "name": "compare",
          "type": {
            "name": "int (void *, const void *, const void *)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 512,
        "column": 32
      }
    },
    "SDL_calloc": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "nmemb",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 410,
        "column": 64
      }
    },
    "SDL_CaptureMouse": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "enabled",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 317,
        "column": 29
      },
      "comment": "/**\n * Capture the mouse and to track input outside an SDL window.\n *\n * Capturing enables your app to obtain mouse events globally, instead of just\n * within your window. Not all video targets support this function. When\n * capturing is enabled, the current window will get all mouse events, but\n * unlike relative mode, no change is made to the cursor and it is not\n * restrained to your window.\n *\n * This function may also deny mouse input to other windows--both those in\n * your application and others on the system--so you should use this function\n * sparingly, and in small bursts. For example, you might want to track the\n * mouse while the user is dragging something, until the user releases a mouse\n * button. It is not recommended that you capture the mouse for long periods\n * of time, such as the entire time your app is running. For that, you should\n * probably use SDL_SetRelativeMouseMode() or SDL_SetWindowMouseGrab(),\n * depending on your goals.\n *\n * While captured, mouse events still report coordinates relative to the\n * current (foreground) window, but those coordinates may be outside the\n * bounds of the window (including negative values). Capturing is only allowed\n * for the foreground window. If the window loses focus while capturing, the\n * capture will be disabled automatically.\n *\n * While capturing is enabled, the current window will have the\n * \u0060SDL_WINDOW_MOUSE_CAPTURE\u0060 flag set.\n *\n * Please note that as of SDL 2.0.22, SDL will attempt to \u0022auto capture\u0022 the\n * mouse while the user is pressing a button; this is to try and make mouse\n * behavior more consistent between platforms, and deal with the common case\n * of a user dragging the mouse outside of the window. This means that if you\n * are calling SDL_CaptureMouse() only to deal with this situation, you no\n * longer have to (although it is safe to do so). If this causes problems for\n * your app, you can disable auto capture by setting the\n * \u0060SDL_HINT_MOUSE_AUTO_CAPTURE\u0060 hint to zero.\n *\n * \\param enabled SDL_TRUE to enable capturing, SDL_FALSE to disable.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGlobalMouseState\n */"
    },
    "SDL_ceil": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1163,
        "column": 32
      }
    },
    "SDL_ceilf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1164,
        "column": 31
      }
    },
    "SDL_CleanupTLS": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 431,
        "column": 30
      },
      "comment": "/**\n * Cleanup all TLS data for this thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_ClearClipboardData": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_clipboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
        "line": 206,
        "column": 29
      },
      "comment": "/**\n * Clear the clipboard data\n *\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetClipboardData\n */"
    },
    "SDL_ClearComposition": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 343,
        "column": 30
      },
      "comment": "/**\n * Dismiss the composition window/IME without disabling the subsystem.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_StartTextInput\n * \\sa SDL_StopTextInput\n */"
    },
    "SDL_ClearError": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_error.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_error.h",
        "line": 113,
        "column": 30
      },
      "comment": "/**\n * Clear any previous error message for this thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetError\n * \\sa SDL_SetError\n */"
    },
    "SDL_ClearProperty": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 421,
        "column": 29
      },
      "comment": "/**\n * Clear a property on a set of properties\n *\n * \\param props the properties to modify\n * \\param name the name of the property to clear\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_CloseCamera": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "camera",
          "type": {
            "name": "SDL_Camera *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Camera",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_camera.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
                "line": 54,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 470,
        "column": 30
      },
      "comment": "/**\n * Use this function to shut down camera processing and close the camera\n * device.\n *\n * \\param camera opened camera device\n *\n * \\threadsafety It is safe to call this function from any thread, but no\n *               thread may reference \u0060device\u0060 once this function is called.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_OpenCameraWithSpec\n * \\sa SDL_OpenCamera\n */"
    },
    "SDL_CloseGamepad": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1355,
        "column": 30
      },
      "comment": "/**\n * Close a gamepad previously opened with SDL_OpenGamepad().\n *\n * \\param gamepad a gamepad identifier previously returned by\n *                SDL_OpenGamepad()\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_OpenGamepad\n */"
    },
    "SDL_CloseHaptic": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1010,
        "column": 30
      },
      "comment": "/**\n * Close a haptic device previously opened with SDL_OpenHaptic().\n *\n * \\param haptic the SDL_Haptic device to close\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_OpenHaptic\n */"
    },
    "SDL_CloseJoystick": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 1082,
        "column": 30
      },
      "comment": "/**\n * Close a joystick previously opened with SDL_OpenJoystick().\n *\n * \\param joystick The joystick device to close\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_OpenJoystick\n */"
    },
    "SDL_CloseSensor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "sensor",
          "type": {
            "name": "SDL_Sensor *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Sensor",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_sensor.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
                "line": 51,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 270,
        "column": 30
      },
      "comment": "/**\n * Close a sensor previously opened with SDL_OpenSensor().\n *\n * \\param sensor The SDL_Sensor object to close\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_CloseStorage": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "storage",
          "type": {
            "name": "SDL_Storage *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Storage",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_storage.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
                "line": 78,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 187,
        "column": 29
      },
      "comment": "/**\n * Closes and frees a storage container.\n *\n * \\param storage a storage container to close\n * \\returns 0 if the container was freed with no errors, a negative value\n *          otherwise; call SDL_GetError() for more information. Even if the\n *          function returns an error, the container data will be freed; the\n *          error is only for informational purposes.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_OpenFileStorage\n * \\sa SDL_OpenStorage\n * \\sa SDL_OpenTitleStorage\n * \\sa SDL_OpenUserStorage\n */"
    },
    "SDL_ComposeCustomBlendMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_BlendMode",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_blendmode.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
          "line": 60,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_BlendMode",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_blendmode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
            "line": 40,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "srcColorFactor",
          "type": {
            "name": "SDL_BlendFactor",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_blendmode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
              "line": 89,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_BlendFactor",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_blendmode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
                "line": 77,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_blendmode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
            "line": 89,
            "column": 3
          }
        },
        {
          "name": "dstColorFactor",
          "type": {
            "name": "SDL_BlendFactor",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_blendmode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
              "line": 89,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_BlendFactor",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_blendmode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
                "line": 77,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_blendmode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
            "line": 89,
            "column": 3
          }
        },
        {
          "name": "colorOperation",
          "type": {
            "name": "SDL_BlendOperation",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_blendmode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
              "line": 72,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_BlendOperation",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_blendmode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
                "line": 65,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_blendmode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
            "line": 72,
            "column": 3
          }
        },
        {
          "name": "srcAlphaFactor",
          "type": {
            "name": "SDL_BlendFactor",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_blendmode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
              "line": 89,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_BlendFactor",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_blendmode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
                "line": 77,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_blendmode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
            "line": 89,
            "column": 3
          }
        },
        {
          "name": "dstAlphaFactor",
          "type": {
            "name": "SDL_BlendFactor",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_blendmode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
              "line": 89,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_BlendFactor",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_blendmode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
                "line": 77,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_blendmode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
            "line": 89,
            "column": 3
          }
        },
        {
          "name": "alphaOperation",
          "type": {
            "name": "SDL_BlendOperation",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_blendmode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
              "line": 72,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_BlendOperation",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_blendmode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
                "line": 65,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_blendmode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
            "line": 72,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_blendmode.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
        "line": 183,
        "column": 39
      },
      "comment": "/**\n * Compose a custom blend mode for renderers.\n *\n * The functions SDL_SetRenderDrawBlendMode and SDL_SetTextureBlendMode accept\n * the SDL_BlendMode returned by this function if the renderer supports it.\n *\n * A blend mode controls how the pixels from a drawing operation (source) get\n * combined with the pixels from the render target (destination). First, the\n * components of the source and destination pixels get multiplied with their\n * blend factors. Then, the blend operation takes the two products and\n * calculates the result that will get stored in the render target.\n *\n * Expressed in pseudocode, it would look like this:\n *\n * \u0060\u0060\u0060c\n * dstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);\n * dstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);\n * \u0060\u0060\u0060\n *\n * Where the functions \u0060colorOperation(src, dst)\u0060 and \u0060alphaOperation(src,\n * dst)\u0060 can return one of the following:\n *\n * - \u0060src \u002B dst\u0060\n * - \u0060src - dst\u0060\n * - \u0060dst - src\u0060\n * - \u0060min(src, dst)\u0060\n * - \u0060max(src, dst)\u0060\n *\n * The red, green, and blue components are always multiplied with the first,\n * second, and third components of the SDL_BlendFactor, respectively. The\n * fourth component is not used.\n *\n * The alpha component is always multiplied with the fourth component of the\n * SDL_BlendFactor. The other components are not used in the alpha\n * calculation.\n *\n * Support for these blend modes varies for each renderer. To check if a\n * specific SDL_BlendMode is supported, create a renderer and pass it to\n * either SDL_SetRenderDrawBlendMode or SDL_SetTextureBlendMode. They will\n * return with an error if the blend mode is not supported.\n *\n * This list describes the support of custom blend modes for each renderer in\n * SDL 2.0.6. All renderers support the four blend modes listed in the\n * SDL_BlendMode enumeration.\n *\n * - **direct3d**: Supports all operations with all factors. However, some\n *   factors produce unexpected results with \u0060SDL_BLENDOPERATION_MINIMUM\u0060 and\n *   \u0060SDL_BLENDOPERATION_MAXIMUM\u0060.\n * - **direct3d11**: Same as Direct3D 9.\n * - **opengl**: Supports the \u0060SDL_BLENDOPERATION_ADD\u0060 operation with all\n *   factors. OpenGL versions 1.1, 1.2, and 1.3 do not work correctly with SDL\n *   2.0.6.\n * - **opengles**: Supports the \u0060SDL_BLENDOPERATION_ADD\u0060 operation with all\n *   factors. Color and alpha factors need to be the same. OpenGL ES 1\n *   implementation specific: May also support \u0060SDL_BLENDOPERATION_SUBTRACT\u0060\n *   and \u0060SDL_BLENDOPERATION_REV_SUBTRACT\u0060. May support color and alpha\n *   operations being different from each other. May support color and alpha\n *   factors being different from each other.\n * - **opengles2**: Supports the \u0060SDL_BLENDOPERATION_ADD\u0060,\n *   \u0060SDL_BLENDOPERATION_SUBTRACT\u0060, \u0060SDL_BLENDOPERATION_REV_SUBTRACT\u0060\n *   operations with all factors.\n * - **psp**: No custom blend mode support.\n * - **software**: No custom blend mode support.\n *\n * Some renderers do not provide an alpha component for the default render\n * target. The \u0060SDL_BLENDFACTOR_DST_ALPHA\u0060 and\n * \u0060SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA\u0060 factors do not have an effect in this\n * case.\n *\n * \\param srcColorFactor the SDL_BlendFactor applied to the red, green, and\n *                       blue components of the source pixels\n * \\param dstColorFactor the SDL_BlendFactor applied to the red, green, and\n *                       blue components of the destination pixels\n * \\param colorOperation the SDL_BlendOperation used to combine the red,\n *                       green, and blue components of the source and\n *                       destination pixels\n * \\param srcAlphaFactor the SDL_BlendFactor applied to the alpha component of\n *                       the source pixels\n * \\param dstAlphaFactor the SDL_BlendFactor applied to the alpha component of\n *                       the destination pixels\n * \\param alphaOperation the SDL_BlendOperation used to combine the alpha\n *                       component of the source and destination pixels\n * \\returns an SDL_BlendMode that represents the chosen factors and\n *          operations.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetRenderDrawBlendMode\n * \\sa SDL_GetRenderDrawBlendMode\n * \\sa SDL_SetTextureBlendMode\n * \\sa SDL_GetTextureBlendMode\n */"
    },
    "SDL_ConvertEventToRenderCoordinates": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "event",
          "type": {
            "name": "SDL_Event *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Event",
              "kind": "typeAlias",
              "size_of": 128,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 792,
                "column": 3
              },
              "inner_type": {
                "name": "union SDL_Event",
                "kind": "union",
                "size_of": 128,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_events.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                  "line": 741,
                  "column": 15
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1375,
        "column": 29
      },
      "comment": "/**\n * Convert the coordinates in an event to render coordinates.\n *\n * Touch coordinates are converted from normalized coordinates in the window\n * to non-normalized rendering coordinates.\n *\n * Once converted, the coordinates may be outside the rendering area.\n *\n * \\param renderer the rendering context\n * \\param event the event to modify\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderCoordinatesFromWindowCoordinates\n */"
    },
    "SDL_ConvertPixels": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "src_format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 422,
            "column": 3
          }
        },
        {
          "name": "src",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "src_pitch",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dst_format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 422,
            "column": 3
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dst_pitch",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 755,
        "column": 29
      },
      "comment": "/**\n * Copy a block of pixels of one format to another format.\n *\n * \\param width the width of the block to copy, in pixels\n * \\param height the height of the block to copy, in pixels\n * \\param src_format an SDL_PixelFormatEnum value of the \u0060src\u0060 pixels format\n * \\param src a pointer to the source pixels\n * \\param src_pitch the pitch of the source pixels, in bytes\n * \\param dst_format an SDL_PixelFormatEnum value of the \u0060dst\u0060 pixels format\n * \\param dst a pointer to be filled in with new pixel data\n * \\param dst_pitch the pitch of the destination pixels, in bytes\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ConvertPixelsAndColorspace\n */"
    },
    "SDL_ConvertPixelsAndColorspace": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "src_format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 422,
            "column": 3
          }
        },
        {
          "name": "src_colorspace",
          "type": {
            "name": "SDL_Colorspace",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 660,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_Colorspace",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 567,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 660,
            "column": 3
          }
        },
        {
          "name": "src_properties",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "src",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "src_pitch",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dst_format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 422,
            "column": 3
          }
        },
        {
          "name": "dst_colorspace",
          "type": {
            "name": "SDL_Colorspace",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 660,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_Colorspace",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 567,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 660,
            "column": 3
          }
        },
        {
          "name": "dst_properties",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dst_pitch",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 784,
        "column": 29
      },
      "comment": "/**\n * Copy a block of pixels of one format and colorspace to another format and\n * colorspace.\n *\n * \\param width the width of the block to copy, in pixels\n * \\param height the height of the block to copy, in pixels\n * \\param src_format an SDL_PixelFormatEnum value of the \u0060src\u0060 pixels format\n * \\param src_colorspace an SDL_ColorSpace value describing the colorspace of\n *                       the \u0060src\u0060 pixels\n * \\param src_properties an SDL_PropertiesID with additional source color\n *                       properties, or 0\n * \\param src a pointer to the source pixels\n * \\param src_pitch the pitch of the source pixels, in bytes\n * \\param dst_format an SDL_PixelFormatEnum value of the \u0060dst\u0060 pixels format\n * \\param dst_colorspace an SDL_ColorSpace value describing the colorspace of\n *                       the \u0060dst\u0060 pixels\n * \\param dst_properties an SDL_PropertiesID with additional destination color\n *                       properties, or 0\n * \\param dst a pointer to be filled in with new pixel data\n * \\param dst_pitch the pitch of the destination pixels, in bytes\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ConvertPixels\n */"
    },
    "SDL_ConvertSurface": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Surface *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_Surface",
          "kind": "typeAlias",
          "size_of": 96,
          "align_of": 8,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 131,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_Surface",
            "kind": "struct",
            "size_of": 96,
            "align_of": 8,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 107,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "format",
          "type": {
            "name": "const SDL_PixelFormat *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_PixelFormat",
              "kind": "typeAlias",
              "size_of": 56,
              "align_of": 8,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 721,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_PixelFormat",
                "kind": "struct",
                "size_of": 56,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 700,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 691,
        "column": 38
      },
      "comment": "/**\n * Copy an existing surface to a new surface of the specified format.\n *\n * This function is used to optimize images for faster *repeat* blitting. This\n * is accomplished by converting the original and storing the result as a new\n * surface. The new, optimized surface can then be used as the source for\n * future blits, making them faster.\n *\n * \\param surface the existing SDL_Surface structure to convert\n * \\param format the SDL_PixelFormat structure that the new surface is\n *               optimized for\n * \\returns the new SDL_Surface structure that is created or NULL if it fails;\n *          call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ConvertSurfaceFormat\n * \\sa SDL_ConvertSurfaceFormatAndColorspace\n * \\sa SDL_CreatePixelFormat\n * \\sa SDL_DestroySurface\n */"
    },
    "SDL_ConvertSurfaceFormat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Surface *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_Surface",
          "kind": "typeAlias",
          "size_of": 96,
          "align_of": 8,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 131,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_Surface",
            "kind": "struct",
            "size_of": 96,
            "align_of": 8,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 107,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "pixel_format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 422,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 712,
        "column": 38
      },
      "comment": "/**\n * Copy an existing surface to a new surface of the specified format.\n *\n * This function operates just like SDL_ConvertSurface(), but accepts an\n * SDL_PixelFormatEnum value instead of an SDL_PixelFormat structure. As such,\n * it might be easier to call but it doesn\u0027t have access to palette\n * information for the destination surface, in case that would be important.\n *\n * \\param surface the existing SDL_Surface structure to convert\n * \\param pixel_format the new pixel format\n * \\returns the new SDL_Surface structure that is created or NULL if it fails;\n *          call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ConvertSurface\n * \\sa SDL_ConvertSurfaceFormatAndColorspace\n * \\sa SDL_DestroySurface\n */"
    },
    "SDL_ConvertSurfaceFormatAndColorspace": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Surface *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_Surface",
          "kind": "typeAlias",
          "size_of": 96,
          "align_of": 8,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 131,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_Surface",
            "kind": "struct",
            "size_of": 96,
            "align_of": 8,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 107,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "pixel_format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 422,
            "column": 3
          }
        },
        {
          "name": "colorspace",
          "type": {
            "name": "SDL_Colorspace",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 660,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_Colorspace",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 567,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 660,
            "column": 3
          }
        },
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 735,
        "column": 38
      },
      "comment": "/**\n * Copy an existing surface to a new surface of the specified format and\n * colorspace.\n *\n * This function converts an existing surface to a new format and colorspace\n * and returns the new surface. This will perform any pixel format and\n * colorspace conversion needed.\n *\n * \\param surface the existing SDL_Surface structure to convert\n * \\param pixel_format the new pixel format\n * \\param colorspace the new colorspace\n * \\param props an SDL_PropertiesID with additional color properties, or 0\n * \\returns the new SDL_Surface structure that is created or NULL if it fails;\n *          call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ConvertSurface\n * \\sa SDL_ConvertSurfaceFormat\n * \\sa SDL_DestroySurface\n */"
    },
    "SDL_CopyProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "src",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 103,
        "column": 29
      },
      "comment": "/**\n * Copy a set of properties\n *\n * Copy all the properties from one set of properties to another, with the\n * exception of properties requiring cleanup (set using\n * SDL_SetPropertyWithCleanup()), which will not be copied. Any property that\n * already exists on \u0060dst\u0060 will be overwritten.\n *\n * \\param src the properties to copy\n * \\param dst the destination properties\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_copysign": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1165,
        "column": 32
      }
    },
    "SDL_copysignf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1166,
        "column": 31
      }
    },
    "SDL_cos": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1167,
        "column": 32
      }
    },
    "SDL_cosf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1168,
        "column": 31
      }
    },
    "SDL_crc16": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 162,
          "column": 18
        },
        "inner_type": {
          "name": "uint16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_uint16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
            "line": 31,
            "column": 24,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "crc",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 162,
            "column": 18
          }
        },
        {
          "name": "data",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "len",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 757,
        "column": 32
      }
    },
    "SDL_crc32": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "crc",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        },
        {
          "name": "data",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "len",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 758,
        "column": 32
      }
    },
    "SDL_CreateColorCursor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Cursor *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Cursor",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_mouse.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
            "line": 43,
            "column": 16
          }
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "hot_x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "hot_y",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 393,
        "column": 37
      },
      "comment": "/**\n * Create a color cursor.\n *\n * \\param surface an SDL_Surface structure representing the cursor image\n * \\param hot_x the x position of the cursor hot spot\n * \\param hot_y the y position of the cursor hot spot\n * \\returns the new cursor on success or NULL on failure; call SDL_GetError()\n *          for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateCursor\n * \\sa SDL_CreateSystemCursor\n * \\sa SDL_DestroyCursor\n * \\sa SDL_SetCursor\n */"
    },
    "SDL_CreateCondition": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Condition *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Condition",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_mutex.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
            "line": 622,
            "column": 8
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 639,
        "column": 40
      },
      "comment": "/**\n * Create a condition variable.\n *\n * \\returns a new condition variable or NULL on failure; call SDL_GetError()\n *          for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_BroadcastCondition\n * \\sa SDL_SignalCondition\n * \\sa SDL_WaitCondition\n * \\sa SDL_WaitConditionTimeout\n * \\sa SDL_DestroyCondition\n */"
    },
    "SDL_CreateCursor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Cursor *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Cursor",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_mouse.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
            "line": 43,
            "column": 16
          }
        }
      },
      "parameters": [
        {
          "name": "data",
          "type": {
            "name": "const Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "mask",
          "type": {
            "name": "const Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "hot_x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "hot_y",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 372,
        "column": 37
      },
      "comment": "/**\n * Create a cursor using the specified bitmap data and mask (in MSB format).\n *\n * \u0060mask\u0060 has to be in MSB (Most Significant Bit) format.\n *\n * The cursor width (\u0060w\u0060) must be a multiple of 8 bits.\n *\n * The cursor is created in black and white according to the following:\n *\n * - data=0, mask=1: white\n * - data=1, mask=1: black\n * - data=0, mask=0: transparent\n * - data=1, mask=0: inverted color if possible, black if not.\n *\n * Cursors created with this function must be freed with SDL_DestroyCursor().\n *\n * If you want to have a color cursor, or create your cursor from an\n * SDL_Surface, you should use SDL_CreateColorCursor(). Alternately, you can\n * hide the cursor and draw your own as part of your game\u0027s rendering, but it\n * will be bound to the framerate.\n *\n * Also, since SDL 2.0.0, SDL_CreateSystemCursor() is available, which\n * provides twelve readily available system cursors to pick from.\n *\n * \\param data the color value for each pixel of the cursor\n * \\param mask the mask value for each pixel of the cursor\n * \\param w the width of the cursor\n * \\param h the height of the cursor\n * \\param hot_x the X-axis location of the upper left corner of the cursor\n *              relative to the actual mouse position\n * \\param hot_y the Y-axis location of the upper left corner of the cursor\n *              relative to the actual mouse position\n * \\returns a new cursor with the specified parameters on success or NULL on\n *          failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateColorCursor\n * \\sa SDL_CreateSystemCursor\n * \\sa SDL_DestroyCursor\n * \\sa SDL_SetCursor\n */"
    },
    "SDL_CreateDirectory": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "path",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_filesystem.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
        "line": 266,
        "column": 29
      },
      "comment": "/**\n * Create a directory.\n *\n * \\param path the path of the directory to create\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_CreateHapticEffect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "effect",
          "type": {
            "name": "const SDL_HapticEffect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_HapticEffect",
              "kind": "typeAlias",
              "size_of": 72,
              "align_of": 8,
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 838,
                "column": 3
              },
              "inner_type": {
                "name": "union SDL_HapticEffect",
                "kind": "union",
                "size_of": 72,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_haptic.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                  "line": 828,
                  "column": 15
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1105,
        "column": 29
      },
      "comment": "/**\n * Create a new haptic effect on a specified device.\n *\n * \\param haptic an SDL_Haptic device to create the effect on\n * \\param effect an SDL_HapticEffect structure containing the properties of\n *               the effect to create\n * \\returns the ID of the effect on success or a negative error code on\n *          failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DestroyHapticEffect\n * \\sa SDL_RunHapticEffect\n * \\sa SDL_UpdateHapticEffect\n */"
    },
    "SDL_CreateMutex": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Mutex *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Mutex",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_mutex.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
            "line": 131,
            "column": 8
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 154,
        "column": 36
      },
      "comment": "/**\n * Create a new mutex.\n *\n * All newly-created mutexes begin in the _unlocked_ state.\n *\n * Calls to SDL_LockMutex() will not return while the mutex is locked by\n * another thread. See SDL_TryLockMutex() to attempt to lock without blocking.\n *\n * SDL mutexes are reentrant.\n *\n * \\returns the initialized and unlocked mutex or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DestroyMutex\n * \\sa SDL_LockMutex\n * \\sa SDL_TryLockMutex\n * \\sa SDL_UnlockMutex\n */"
    },
    "SDL_CreatePalette": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Palette *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_Palette",
          "kind": "typeAlias",
          "size_of": 24,
          "align_of": 8,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 695,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_Palette",
            "kind": "struct",
            "size_of": 24,
            "align_of": 8,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 689,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "ncolors",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 826,
        "column": 38
      },
      "comment": "/**\n * Create a palette structure with the specified number of color entries.\n *\n * The palette entries are initialized to white.\n *\n * \\param ncolors represents the number of color entries in the color palette\n * \\returns a new SDL_Palette structure on success or NULL on failure (e.g. if\n *          there wasn\u0027t enough memory); call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DestroyPalette\n * \\sa SDL_SetPaletteColors\n * \\sa SDL_SetPixelFormatPalette\n */"
    },
    "SDL_CreatePixelFormat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PixelFormat *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_PixelFormat",
          "kind": "typeAlias",
          "size_of": 56,
          "align_of": 8,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 721,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_PixelFormat",
            "kind": "struct",
            "size_of": 56,
            "align_of": 8,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 700,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "pixel_format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 422,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 797,
        "column": 43
      },
      "comment": "/**\n * Create an SDL_PixelFormat structure corresponding to a pixel format.\n *\n * Returned structure may come from a shared global cache (i.e. not newly\n * allocated), and hence should not be modified, especially the palette. Weird\n * errors such as \u0060Blit combination not supported\u0060 may occur.\n *\n * \\param pixel_format one of the SDL_PixelFormatEnum values\n * \\returns the new SDL_PixelFormat structure or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DestroyPixelFormat\n * \\sa SDL_SetPixelFormatPalette\n */"
    },
    "SDL_CreatePopupWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Window *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Window",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 108,
            "column": 16
          }
        }
      },
      "parameters": [
        {
          "name": "parent",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "offset_x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "offset_y",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "flags",
          "type": {
            "name": "SDL_WindowFlags",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 115,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 115,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 815,
        "column": 37
      },
      "comment": "/**\n * Create a child popup window of the specified parent window.\n *\n * \u0027flags\u0027 **must** contain exactly one of the following: -\n * \u0027SDL_WINDOW_TOOLTIP\u0027: The popup window is a tooltip and will not pass any\n * input events. - \u0027SDL_WINDOW_POPUP_MENU\u0027: The popup window is a popup menu.\n * The topmost popup menu will implicitly gain the keyboard focus.\n *\n * The following flags are not relevant to popup window creation and will be\n * ignored:\n *\n * - \u0027SDL_WINDOW_MINIMIZED\u0027\n * - \u0027SDL_WINDOW_MAXIMIZED\u0027\n * - \u0027SDL_WINDOW_FULLSCREEN\u0027\n * - \u0027SDL_WINDOW_BORDERLESS\u0027\n *\n * The parent parameter **must** be non-null and a valid window. The parent of\n * a popup window can be either a regular, toplevel window, or another popup\n * window.\n *\n * Popup windows cannot be minimized, maximized, made fullscreen, raised,\n * flash, be made a modal window, be the parent of a modal window, or grab the\n * mouse and/or keyboard. Attempts to do so will fail.\n *\n * Popup windows implicitly do not have a border/decorations and do not appear\n * on the taskbar/dock or in lists of windows such as alt-tab menus.\n *\n * If a parent window is hidden, any child popup windows will be recursively\n * hidden as well. Child popup windows not explicitly hidden will be restored\n * when the parent is shown.\n *\n * If the parent window is destroyed, any child popup windows will be\n * recursively destroyed as well.\n *\n * \\param parent the parent of the window, must not be NULL\n * \\param offset_x the x position of the popup window relative to the origin\n *                 of the parent\n * \\param offset_y the y position of the popup window relative to the origin\n *                 of the parent window\n * \\param w the width of the window\n * \\param h the height of the window\n * \\param flags SDL_WINDOW_TOOLTIP or SDL_WINDOW_POPUP MENU, and zero or more\n *              additional SDL_WindowFlags OR\u0027d together.\n * \\returns the window that was created or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateWindow\n * \\sa SDL_CreateWindowWithProperties\n * \\sa SDL_DestroyWindow\n * \\sa SDL_GetWindowParent\n */"
    },
    "SDL_CreateProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PropertiesID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_properties.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
          "line": 42,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 84,
        "column": 42
      },
      "comment": "/**\n * Create a set of properties\n *\n * All properties are automatically destroyed when SDL_Quit() is called.\n *\n * \\returns an ID for a new set of properties, or 0 on failure; call\n *          SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DestroyProperties\n */"
    },
    "SDL_CreateRenderer": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Renderer *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Renderer",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 123,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "flags",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 230,
        "column": 40
      },
      "comment": "/**\n * Create a 2D rendering context for a window.\n *\n * If you want a specific renderer, you can specify its name here. A list of\n * available renderers can be obtained by calling SDL_GetRenderDriver multiple\n * times, with indices from 0 to SDL_GetNumRenderDrivers()-1. If you don\u0027t\n * need a specific renderer, specify NULL and SDL will attempt to choose the\n * best option for you, based on what is available on the user\u0027s system.\n *\n * If you pass SDL_RENDERER_SOFTWARE in the flags, you will get a software\n * renderer, otherwise you will get a hardware accelerated renderer if\n * available.\n *\n * By default the rendering size matches the window size in pixels, but you\n * can call SDL_SetRenderLogicalPresentation() to change the content size and\n * scaling options.\n *\n * \\param window the window where rendering is displayed\n * \\param name the name of the rendering driver to initialize, or NULL to\n *             initialize the first one supporting the requested flags\n * \\param flags 0, or one or more SDL_RendererFlags OR\u0027d together\n * \\returns a valid rendering context or NULL if there was an error; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateRendererWithProperties\n * \\sa SDL_CreateSoftwareRenderer\n * \\sa SDL_DestroyRenderer\n * \\sa SDL_GetNumRenderDrivers\n * \\sa SDL_GetRenderDriver\n * \\sa SDL_GetRendererInfo\n */"
    },
    "SDL_CreateRendererWithProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Renderer *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Renderer",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 123,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 280,
        "column": 40
      },
      "comment": "/**\n * Create a 2D rendering context for a window, with the specified properties.\n *\n * These are the supported properties:\n *\n * - \u0060SDL_PROP_RENDERER_CREATE_NAME_STRING\u0060: the name of the rendering driver\n *   to use, if a specific one is desired\n * - \u0060SDL_PROP_RENDERER_CREATE_WINDOW_POINTER\u0060: the window where rendering is\n *   displayed, required if this isn\u0027t a software renderer using a surface\n * - \u0060SDL_PROP_RENDERER_CREATE_SURFACE_POINTER\u0060: the surface where rendering\n *   is displayed, if you want a software renderer without a window\n * - \u0060SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER\u0060: an SDL_ColorSpace\n *   value describing the colorspace for output to the display, defaults to\n *   SDL_COLORSPACE_SRGB. The direct3d11, direct3d12, and metal renderers\n *   support SDL_COLORSPACE_SRGB_LINEAR, which is a linear color space and\n *   supports HDR output. If you select SDL_COLORSPACE_SRGB_LINEAR, drawing\n *   still uses the sRGB colorspace, but values can go beyond 1.0 and float\n *   (linear) format textures can be used for HDR content.\n * - \u0060SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_BOOLEAN\u0060: true if you want\n *   present synchronized with the refresh rate\n *\n * With the vulkan renderer:\n *\n * - \u0060SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER\u0060: the VkInstance to use\n *   with the renderer, optional.\n * - \u0060SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER\u0060: the VkSurfaceKHR to use\n *   with the renderer, optional.\n * - \u0060SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER\u0060: the\n *   VkPhysicalDevice to use with the renderer, optional.\n * - \u0060SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER\u0060: the VkDevice to use\n *   with the renderer, optional.\n * - \u0060SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER\u0060: the\n *   queue family index used for rendering.\n * - \u0060SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER\u0060: the\n *   queue family index used for presentation.\n *\n * \\param props the properties to use\n * \\returns a valid rendering context or NULL if there was an error; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateProperties\n * \\sa SDL_CreateRenderer\n * \\sa SDL_CreateSoftwareRenderer\n * \\sa SDL_DestroyRenderer\n * \\sa SDL_GetRendererInfo\n */"
    },
    "SDL_CreateRWLock": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_RWLock *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_RWLock",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_mutex.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
            "line": 249,
            "column": 8
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 299,
        "column": 37
      },
      "comment": "/**\n * Create a new read/write lock.\n *\n * A read/write lock is useful for situations where you have multiple threads\n * trying to access a resource that is rarely updated. All threads requesting\n * a read-only lock will be allowed to run in parallel; if a thread requests a\n * write lock, it will be provided exclusive access. This makes it safe for\n * multiple threads to use a resource at the same time if they promise not to\n * change it, and when it has to be changed, the rwlock will serve as a\n * gateway to make sure those changes can be made safely.\n *\n * In the right situation, a rwlock can be more efficient than a mutex, which\n * only lets a single thread proceed at a time, even if it won\u0027t be modifying\n * the data.\n *\n * All newly-created read/write locks begin in the _unlocked_ state.\n *\n * Calls to SDL_LockRWLockForReading() and SDL_LockRWLockForWriting will not\n * return while the rwlock is locked _for writing_ by another thread. See\n * SDL_TryLockRWLockForReading() and SDL_TryLockRWLockForWriting() to attempt\n * to lock without blocking.\n *\n * SDL read/write locks are only recursive for read-only locks! They are not\n * guaranteed to be fair, or provide access in a FIFO manner! They are not\n * guaranteed to favor writers. You may not lock a rwlock for both read-only\n * and write access at the same time from the same thread (so you can\u0027t\n * promote your read-only lock to a write lock without unlocking first).\n *\n * \\returns the initialized and unlocked read/write lock or NULL on failure;\n *          call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DestroyRWLock\n * \\sa SDL_LockRWLockForReading\n * \\sa SDL_LockRWLockForWriting\n * \\sa SDL_TryLockRWLockForReading\n * \\sa SDL_TryLockRWLockForWriting\n * \\sa SDL_UnlockRWLock\n */"
    },
    "SDL_CreateSemaphore": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Semaphore *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Semaphore",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_mutex.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
            "line": 481,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "initial_value",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 506,
        "column": 40
      },
      "comment": "/**\n * Create a semaphore.\n *\n * This function creates a new semaphore and initializes it with the value\n * \u0060initial_value\u0060. Each wait operation on the semaphore will atomically\n * decrement the semaphore value and potentially block if the semaphore value\n * is 0. Each post operation will atomically increment the semaphore value and\n * wake waiting threads and allow them to retry the wait operation.\n *\n * \\param initial_value the starting value of the semaphore\n * \\returns a new semaphore or NULL on failure; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DestroySemaphore\n * \\sa SDL_PostSemaphore\n * \\sa SDL_TryWaitSemaphore\n * \\sa SDL_GetSemaphoreValue\n * \\sa SDL_WaitSemaphore\n * \\sa SDL_WaitSemaphoreTimeout\n */"
    },
    "SDL_CreateSoftwareRenderer": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Renderer *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Renderer",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 123,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 311,
        "column": 39
      },
      "comment": "/**\n * Create a 2D software rendering context for a surface.\n *\n * Two other API which can be used to create SDL_Renderer:\n * SDL_CreateRenderer() and SDL_CreateWindowAndRenderer(). These can _also_\n * create a software renderer, but they are intended to be used with an\n * SDL_Window as the final destination and not an SDL_Surface.\n *\n * \\param surface the SDL_Surface structure representing the surface where\n *                rendering is done\n * \\returns a valid rendering context or NULL if there was an error; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DestroyRenderer\n */"
    },
    "SDL_CreateStorageDirectory": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "storage",
          "type": {
            "name": "SDL_Storage *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Storage",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_storage.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
                "line": 78,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "path",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 268,
        "column": 29
      },
      "comment": "/**\n * Create a directory in a writable storage container.\n *\n * \\param storage a storage container\n * \\param path the path of the directory to create\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_StorageReady\n */"
    },
    "SDL_CreateSurface": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Surface *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_Surface",
          "kind": "typeAlias",
          "size_of": 96,
          "align_of": 8,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 131,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_Surface",
            "kind": "struct",
            "size_of": 96,
            "align_of": 8,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 107,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 422,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 154,
        "column": 38
      },
      "comment": "/**\n * Allocate a new RGB surface with a specific pixel format.\n *\n * \\param width the width of the surface\n * \\param height the height of the surface\n * \\param format the SDL_PixelFormatEnum for the new surface\u0027s pixel format.\n * \\returns the new SDL_Surface structure that is created or NULL if it fails;\n *          call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateSurfaceFrom\n * \\sa SDL_DestroySurface\n */"
    },
    "SDL_CreateSurfaceFrom": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Surface *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_Surface",
          "kind": "typeAlias",
          "size_of": 96,
          "align_of": 8,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 131,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_Surface",
            "kind": "struct",
            "size_of": 96,
            "align_of": 8,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 107,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "pixels",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "pitch",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 422,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 182,
        "column": 38
      },
      "comment": "/**\n * Allocate a new RGB surface with a specific pixel format and existing pixel\n * data.\n *\n * No copy is made of the pixel data. Pixel data is not managed automatically;\n * you must free the surface before you free the pixel data.\n *\n * Pitch is the offset in bytes from one row of pixels to the next, e.g.\n * \u0060width*4\u0060 for \u0060SDL_PIXELFORMAT_RGBA8888\u0060.\n *\n * You may pass NULL for pixels and 0 for pitch to create a surface that you\n * will fill in with valid values later.\n *\n * \\param pixels a pointer to existing pixel data\n * \\param width the width of the surface\n * \\param height the height of the surface\n * \\param pitch the number of bytes between each row, including padding\n * \\param format the SDL_PixelFormatEnum for the new surface\u0027s pixel format.\n * \\returns the new SDL_Surface structure that is created or NULL if it fails;\n *          call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateSurface\n * \\sa SDL_DestroySurface\n */"
    },
    "SDL_CreateSystemCursor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Cursor *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Cursor",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_mouse.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
            "line": 43,
            "column": 16
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "type": {
            "name": "SDL_SystemCursor",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_mouse.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
              "line": 71,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_SystemCursor",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_mouse.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
                "line": 48,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_mouse.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
            "line": 71,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 408,
        "column": 37
      },
      "comment": "/**\n * Create a system cursor.\n *\n * \\param id an SDL_SystemCursor enum value\n * \\returns a cursor on success or NULL on failure; call SDL_GetError() for\n *          more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DestroyCursor\n */"
    },
    "SDL_CreateTexture": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Texture *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Texture",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 129,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 422,
            "column": 3
          }
        },
        {
          "name": "access",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 503,
        "column": 38
      },
      "comment": "/**\n * Create a texture for a rendering context.\n *\n * You can set the texture scaling method by setting\n * \u0060SDL_HINT_RENDER_SCALE_QUALITY\u0060 before creating the texture.\n *\n * \\param renderer the rendering context\n * \\param format one of the enumerated values in SDL_PixelFormatEnum\n * \\param access one of the enumerated values in SDL_TextureAccess\n * \\param w the width of the texture in pixels\n * \\param h the height of the texture in pixels\n * \\returns a pointer to the created texture or NULL if no rendering context\n *          was active, the format was unsupported, or the width or height\n *          were out of range; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateTextureFromSurface\n * \\sa SDL_CreateTextureWithProperties\n * \\sa SDL_DestroyTexture\n * \\sa SDL_QueryTexture\n * \\sa SDL_UpdateTexture\n */"
    },
    "SDL_CreateTextureFromSurface": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Texture *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Texture",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 129,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 530,
        "column": 38
      },
      "comment": "/**\n * Create a texture from an existing surface.\n *\n * The surface is not modified or freed by this function.\n *\n * The SDL_TextureAccess hint for the created texture is\n * \u0060SDL_TEXTUREACCESS_STATIC\u0060.\n *\n * The pixel format of the created texture may be different from the pixel\n * format of the surface. Use SDL_QueryTexture() to query the pixel format of\n * the texture.\n *\n * \\param renderer the rendering context\n * \\param surface the SDL_Surface structure containing pixel data used to fill\n *                the texture\n * \\returns the created texture or NULL on failure; call SDL_GetError() for\n *          more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateTexture\n * \\sa SDL_CreateTextureWithProperties\n * \\sa SDL_DestroyTexture\n * \\sa SDL_QueryTexture\n */"
    },
    "SDL_CreateTextureWithProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Texture *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Texture",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 129,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 641,
        "column": 38
      },
      "comment": "/**\n * Create a texture for a rendering context with the specified properties.\n *\n * These are the supported properties:\n *\n * - \u0060SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER\u0060: an SDL_ColorSpace value\n *   describing the texture colorspace, defaults to SDL_COLORSPACE_SRGB_LINEAR\n *   for floating point textures, SDL_COLORSPACE_HDR10 for 10-bit textures,\n *   SDL_COLORSPACE_SRGB for other RGB textures and SDL_COLORSPACE_JPEG for\n *   YUV textures.\n * - \u0060SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER\u0060: one of the enumerated values in\n *   SDL_PixelFormatEnum, defaults to the best RGBA format for the renderer\n * - \u0060SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER\u0060: one of the enumerated values in\n *   SDL_TextureAccess, defaults to SDL_TEXTUREACCESS_STATIC\n * - \u0060SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER\u0060: the width of the texture in\n *   pixels, required\n * - \u0060SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER\u0060: the height of the texture in\n *   pixels, required\n * - \u0060SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT\u0060: for HDR10 and floating\n *   point textures, this defines the value of 100% diffuse white, with higher\n *   values being displayed in the High Dynamic Range headroom. This defaults\n *   to 100 for HDR10 textures and 1.0 for floating point textures.\n * - \u0060SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT\u0060: for HDR10 and floating\n *   point textures, this defines the maximum dynamic range used by the\n *   content, in terms of the SDR white point. This would be equivalent to\n *   maxCLL / SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT for HDR10 content.\n *   If this is defined, any values outside the range supported by the display\n *   will be scaled into the available HDR headroom, otherwise they are\n *   clipped.\n *\n * With the direct3d11 renderer:\n *\n * - \u0060SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER\u0060: the ID3D11Texture2D\n *   associated with the texture, if you want to wrap an existing texture.\n * - \u0060SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER\u0060: the ID3D11Texture2D\n *   associated with the U plane of a YUV texture, if you want to wrap an\n *   existing texture.\n * - \u0060SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER\u0060: the ID3D11Texture2D\n *   associated with the V plane of a YUV texture, if you want to wrap an\n *   existing texture.\n *\n * With the direct3d12 renderer:\n *\n * - \u0060SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER\u0060: the ID3D12Resource\n *   associated with the texture, if you want to wrap an existing texture.\n * - \u0060SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER\u0060: the ID3D12Resource\n *   associated with the U plane of a YUV texture, if you want to wrap an\n *   existing texture.\n * - \u0060SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER\u0060: the ID3D12Resource\n *   associated with the V plane of a YUV texture, if you want to wrap an\n *   existing texture.\n *\n * With the metal renderer:\n *\n * - \u0060SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER\u0060: the CVPixelBufferRef\n *   associated with the texture, if you want to create a texture from an\n *   existing pixel buffer.\n *\n * With the opengl renderer:\n *\n * - \u0060SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER\u0060: the GLuint texture\n *   associated with the texture, if you want to wrap an existing texture.\n * - \u0060SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER\u0060: the GLuint texture\n *   associated with the UV plane of an NV12 texture, if you want to wrap an\n *   existing texture.\n * - \u0060SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER\u0060: the GLuint texture\n *   associated with the U plane of a YUV texture, if you want to wrap an\n *   existing texture.\n * - \u0060SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER\u0060: the GLuint texture\n *   associated with the V plane of a YUV texture, if you want to wrap an\n *   existing texture.\n *\n * With the opengles2 renderer:\n *\n * - \u0060SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER\u0060: the GLuint texture\n *   associated with the texture, if you want to wrap an existing texture.\n * - \u0060SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER\u0060: the GLuint texture\n *   associated with the texture, if you want to wrap an existing texture.\n * - \u0060SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER\u0060: the GLuint texture\n *   associated with the UV plane of an NV12 texture, if you want to wrap an\n *   existing texture.\n * - \u0060SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER\u0060: the GLuint texture\n *   associated with the U plane of a YUV texture, if you want to wrap an\n *   existing texture.\n * - \u0060SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER\u0060: the GLuint texture\n *   associated with the V plane of a YUV texture, if you want to wrap an\n *   existing texture.\n *\n * With the vulkan renderer:\n *\n * - \u0060SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER\u0060: the VkImage with layout\n *   VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL associated with the texture, if\n *   you want to wrap an existing texture.\n *\n * \\param renderer the rendering context\n * \\param props the properties to use\n * \\returns a pointer to the created texture or NULL if no rendering context\n *          was active, the format was unsupported, or the width or height\n *          were out of range; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateProperties\n * \\sa SDL_CreateTexture\n * \\sa SDL_CreateTextureFromSurface\n * \\sa SDL_DestroyTexture\n * \\sa SDL_QueryTexture\n * \\sa SDL_UpdateTexture\n */"
    },
    "SDL_CreateThread": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Thread *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Thread",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_thread.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
            "line": 49,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "fn",
          "type": {
            "name": "SDL_ThreadFunction",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_thread.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
              "line": 81,
              "column": 24
            },
            "inner_type": {
              "name": "int (void *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_thread.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
            "line": 81,
            "column": 24
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "data",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 193,
        "column": 38
      },
      "comment": "/**\n * Create a new thread with a default stack size.\n *\n * This is equivalent to calling:\n *\n * \u0060\u0060\u0060c\n * SDL_CreateThreadWithStackSize(fn, name, 0, data);\n * \u0060\u0060\u0060\n *\n * \\param fn the SDL_ThreadFunction function to call in the new thread\n * \\param name the name of the thread\n * \\param data a pointer that is passed to \u0060fn\u0060\n * \\returns an opaque pointer to the new thread object on success, NULL if the\n *          new thread could not be created; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateThreadWithStackSize\n * \\sa SDL_WaitThread\n */"
    },
    "SDL_CreateThreadWithStackSize": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Thread *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Thread",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_thread.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
            "line": 49,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "fn",
          "type": {
            "name": "SDL_ThreadFunction",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_thread.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
              "line": 81,
              "column": 24
            },
            "inner_type": {
              "name": "int (void *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_thread.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
            "line": 81,
            "column": 24
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "stacksize",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        },
        {
          "name": "data",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 235,
        "column": 38
      },
      "comment": "/**\n * Create a new thread with a specific stack size.\n *\n * SDL makes an attempt to report \u0060name\u0060 to the system, so that debuggers can\n * display it. Not all platforms support this.\n *\n * Thread naming is a little complicated: Most systems have very small limits\n * for the string length (Haiku has 32 bytes, Linux currently has 16, Visual\n * C\u002B\u002B 6.0 has _nine_!), and possibly other arbitrary rules. You\u0027ll have to\n * see what happens with your system\u0027s debugger. The name should be UTF-8 (but\n * using the naming limits of C identifiers is a better bet). There are no\n * requirements for thread naming conventions, so long as the string is\n * null-terminated UTF-8, but these guidelines are helpful in choosing a name:\n *\n * https://stackoverflow.com/questions/149932/naming-conventions-for-threads\n *\n * If a system imposes requirements, SDL will try to munge the string for it\n * (truncate, etc), but the original string contents will be available from\n * SDL_GetThreadName().\n *\n * The size (in bytes) of the new stack can be specified. Zero means \u0022use the\n * system default\u0022 which might be wildly different between platforms. x86\n * Linux generally defaults to eight megabytes, an embedded device might be a\n * few kilobytes instead. You generally need to specify a stack that is a\n * multiple of the system\u0027s page size (in many cases, this is 4 kilobytes, but\n * check your system documentation).\n *\n * \\param fn the SDL_ThreadFunction function to call in the new thread\n * \\param name the name of the thread\n * \\param stacksize the size, in bytes, to allocate for the new thread stack.\n * \\param data a pointer that is passed to \u0060fn\u0060\n * \\returns an opaque pointer to the new thread object on success, NULL if the\n *          new thread could not be created; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateThread\n * \\sa SDL_WaitThread\n */"
    },
    "SDL_CreateTLS": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_TLSID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_thread.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
          "line": 56,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 387,
        "column": 35
      },
      "comment": "/**\n * Create a piece of thread-local storage.\n *\n * This creates an identifier that is globally visible to all threads but\n * refers to data that is thread-specific.\n *\n * \\returns the newly created thread local storage identifier or 0 on error.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetTLS\n * \\sa SDL_SetTLS\n */"
    },
    "SDL_CreateWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Window *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Window",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 108,
            "column": 16
          }
        }
      },
      "parameters": [
        {
          "name": "title",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "flags",
          "type": {
            "name": "SDL_WindowFlags",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 115,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 115,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 760,
        "column": 37
      },
      "comment": "/**\n * Create a window with the specified dimensions and flags.\n *\n * \u0060flags\u0060 may be any of the following OR\u0027d together:\n *\n * - \u0060SDL_WINDOW_FULLSCREEN\u0060: fullscreen window at desktop resolution\n * - \u0060SDL_WINDOW_OPENGL\u0060: window usable with an OpenGL context\n * - \u0060SDL_WINDOW_VULKAN\u0060: window usable with a Vulkan instance\n * - \u0060SDL_WINDOW_METAL\u0060: window usable with a Metal instance\n * - \u0060SDL_WINDOW_HIDDEN\u0060: window is not visible\n * - \u0060SDL_WINDOW_BORDERLESS\u0060: no window decoration\n * - \u0060SDL_WINDOW_RESIZABLE\u0060: window can be resized\n * - \u0060SDL_WINDOW_MINIMIZED\u0060: window is minimized\n * - \u0060SDL_WINDOW_MAXIMIZED\u0060: window is maximized\n * - \u0060SDL_WINDOW_MOUSE_GRABBED\u0060: window has grabbed mouse focus\n *\n * The SDL_Window is implicitly shown if SDL_WINDOW_HIDDEN is not set.\n *\n * On Apple\u0027s macOS, you **must** set the NSHighResolutionCapable Info.plist\n * property to YES, otherwise you will not receive a High-DPI OpenGL canvas.\n *\n * The window pixel size may differ from its window coordinate size if the\n * window is on a high pixel density display. Use SDL_GetWindowSize() to query\n * the client area\u0027s size in window coordinates, and\n * SDL_GetWindowSizeInPixels() or SDL_GetRenderOutputSize() to query the\n * drawable size in pixels. Note that the drawable size can vary after the\n * window is created and should be queried again if you get an\n * SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED event.\n *\n * If the window is created with any of the SDL_WINDOW_OPENGL or\n * SDL_WINDOW_VULKAN flags, then the corresponding LoadLibrary function\n * (SDL_GL_LoadLibrary or SDL_Vulkan_LoadLibrary) is called and the\n * corresponding UnloadLibrary function is called by SDL_DestroyWindow().\n *\n * If SDL_WINDOW_VULKAN is specified and there isn\u0027t a working Vulkan driver,\n * SDL_CreateWindow() will fail because SDL_Vulkan_LoadLibrary() will fail.\n *\n * If SDL_WINDOW_METAL is specified on an OS that does not support Metal,\n * SDL_CreateWindow() will fail.\n *\n * On non-Apple devices, SDL requires you to either not link to the Vulkan\n * loader or link to a dynamic library version. This limitation may be removed\n * in a future version of SDL.\n *\n * \\param title the title of the window, in UTF-8 encoding\n * \\param w the width of the window\n * \\param h the height of the window\n * \\param flags 0, or one or more SDL_WindowFlags OR\u0027d together\n * \\returns the window that was created or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreatePopupWindow\n * \\sa SDL_CreateWindowWithProperties\n * \\sa SDL_DestroyWindow\n */"
    },
    "SDL_CreateWindowAndRenderer": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "window_flags",
          "type": {
            "name": "SDL_WindowFlags",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 115,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 115,
            "column": 16
          }
        },
        {
          "name": "window",
          "type": {
            "name": "SDL_Window **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Window *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "struct SDL_Window",
                "kind": "opaqueType",
                "location": {
                  "fileName": "SDL_video.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                  "line": 108,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Renderer *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "struct SDL_Renderer",
                "kind": "opaqueType",
                "location": {
                  "fileName": "SDL_render.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                  "line": 123,
                  "column": 8
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 195,
        "column": 29
      },
      "comment": "/**\n * Create a window and default renderer.\n *\n * \\param width the width of the window\n * \\param height the height of the window\n * \\param window_flags the flags used to create the window (see\n *                     SDL_CreateWindow())\n * \\param window a pointer filled with the window, or NULL on error\n * \\param renderer a pointer filled with the renderer, or NULL on error\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateRenderer\n * \\sa SDL_CreateWindow\n */"
    },
    "SDL_CreateWindowWithProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Window *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Window",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 108,
            "column": 16
          }
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 930,
        "column": 37
      },
      "comment": "/**\n * Create a window with the specified properties.\n *\n * These are the supported properties:\n *\n * - \u0060SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN\u0060: true if the window should\n *   be always on top\n * - \u0060SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN\u0060: true if the window has no\n *   window decoration\n * - \u0060SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN\u0060: true if the\n *   window will be used with an externally managed graphics context.\n * - \u0060SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN\u0060: true if the window should\n *   accept keyboard input (defaults true)\n * - \u0060SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN\u0060: true if the window should\n *   start in fullscreen mode at desktop resolution\n * - \u0060SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER\u0060: the height of the window\n * - \u0060SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN\u0060: true if the window should start\n *   hidden\n * - \u0060SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN\u0060: true if the window\n *   uses a high pixel density buffer if possible\n * - \u0060SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN\u0060: true if the window should\n *   start maximized\n * - \u0060SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN\u0060: true if the window is a popup menu\n * - \u0060SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN\u0060: true if the window will be used\n *   with Metal rendering\n * - \u0060SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN\u0060: true if the window should\n *   start minimized\n * - \u0060SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN\u0060: true if the window starts\n *   with grabbed mouse focus\n * - \u0060SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN\u0060: true if the window will be used\n *   with OpenGL rendering\n * - \u0060SDL_PROP_WINDOW_CREATE_PARENT_POINTER\u0060: an SDL_Window that will be the\n *   parent of this window, required for windows with the \u0022toolip\u0022 and \u0022menu\u0022\n *   properties\n * - \u0060SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN\u0060: true if the window should be\n *   resizable\n * - \u0060SDL_PROP_WINDOW_CREATE_TITLE_STRING\u0060: the title of the window, in UTF-8\n *   encoding\n * - \u0060SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN\u0060: true if the window show\n *   transparent in the areas with alpha of 0\n * - \u0060SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN\u0060: true if the window is a tooltip\n * - \u0060SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN\u0060: true if the window is a utility\n *   window, not showing in the task bar and window list\n * - \u0060SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN\u0060: true if the window will be used\n *   with Vulkan rendering\n * - \u0060SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER\u0060: the width of the window\n * - \u0060SDL_PROP_WINDOW_CREATE_X_NUMBER\u0060: the x position of the window, or\n *   \u0060SDL_WINDOWPOS_CENTERED\u0060, defaults to \u0060SDL_WINDOWPOS_UNDEFINED\u0060. This is\n *   relative to the parent for windows with the \u0022parent\u0022 property set.\n * - \u0060SDL_PROP_WINDOW_CREATE_Y_NUMBER\u0060: the y position of the window, or\n *   \u0060SDL_WINDOWPOS_CENTERED\u0060, defaults to \u0060SDL_WINDOWPOS_UNDEFINED\u0060. This is\n *   relative to the parent for windows with the \u0022parent\u0022 property set.\n *\n * These are additional supported properties on macOS:\n *\n * - \u0060SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER\u0060: the\n *   \u0060(__unsafe_unretained)\u0060 NSWindow associated with the window, if you want\n *   to wrap an existing window.\n * - \u0060SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER\u0060: the \u0060(__unsafe_unretained)\u0060\n *   NSView associated with the window, defaults to \u0060[window contentView]\u0060\n *\n * These are additional supported properties on Wayland:\n *\n * - \u0060SDL_PROP_WINDOW_CREATE_WAYLAND_SCALE_TO_DISPLAY_BOOLEAN\u0060 - true if the\n *   window should use forced scaling designed to produce 1:1 pixel mapping if\n *   not flagged as being DPI-aware. This is intended to allow legacy\n *   applications to be displayed without desktop scaling being applied, and\n *   has issues with certain display configurations, as this forces the window\n *   to behave in a way that Wayland desktops were not designed to\n *   accommodate. Potential issues include, but are not limited to: rounding\n *   errors can result when odd window sizes/scales are used, the window may\n *   be unusably small, the window may jump in visible size at times, the\n *   window may appear to be larger than the desktop space, and possible loss\n *   of cursor precision can occur. New applications should be designed with\n *   proper DPI awareness and handling instead of enabling this.\n * - \u0060SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN\u0060 - true if\n *   the application wants to use the Wayland surface for a custom role and\n *   does not want it attached to an XDG toplevel window. See\n *   docs/README-wayland.md for more information on using custom surfaces.\n * - \u0060SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN - true if the\n *   application wants an associated \u0060wl_egl_window\u0060 object to be created,\n *   even if the window does not have the OpenGL property or flag set.\n * - \u0060SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER\u0060 - the wl_surface\n *   associated with the window, if you want to wrap an existing window. See\n *   docs/README-wayland.md for more information.\n *\n * These are additional supported properties on Windows:\n *\n * - \u0060SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER\u0060: the HWND associated with the\n *   window, if you want to wrap an existing window.\n * - \u0060SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER\u0060: optional,\n *   another window to share pixel format with, useful for OpenGL windows\n *\n * These are additional supported properties with X11:\n *\n * - \u0060SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER\u0060: the X11 Window associated\n *   with the window, if you want to wrap an existing window.\n *\n * The window is implicitly shown if the \u0022hidden\u0022 property is not set.\n *\n * Windows with the \u0022tooltip\u0022 and \u0022menu\u0022 properties are popup windows and have\n * the behaviors and guidelines outlined in \u0060SDL_CreatePopupWindow()\u0060.\n *\n * \\param props the properties to use\n * \\returns the window that was created or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateProperties\n * \\sa SDL_CreateWindow\n * \\sa SDL_DestroyWindow\n */"
    },
    "SDL_CursorVisible": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 507,
        "column": 34
      },
      "comment": "/**\n * Return whether the cursor is currently being shown.\n *\n * \\returns \u0060SDL_TRUE\u0060 if the cursor is being shown, or \u0060SDL_FALSE\u0060 if the\n *          cursor is hidden.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HideCursor\n * \\sa SDL_ShowCursor\n */"
    },
    "SDL_DateTimeToTime": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dt",
          "type": {
            "name": "const SDL_DateTime *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_DateTime",
              "kind": "typeAlias",
              "size_of": 36,
              "align_of": 4,
              "location": {
                "fileName": "SDL_time.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
                "line": 54,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_DateTime",
                "kind": "struct",
                "size_of": 36,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_time.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
                  "line": 43,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "ticks",
          "type": {
            "name": "SDL_Time *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Time",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 197,
                "column": 16
              },
              "inner_type": {
                "name": "Sint64",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_stdinc.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                  "line": 181,
                  "column": 17
                },
                "inner_type": {
                  "name": "int64_t",
                  "kind": "typeAlias",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "_int64_t.h",
                    "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
                    "line": 30,
                    "column": 33,
                    "isSystem": true
                  },
                  "inner_type": {
                    "name": "long long",
                    "kind": "primitive",
                    "size_of": 8,
                    "align_of": 8,
                    "location": {
                      "fileName": "",
                      "filePath": "",
                      "isSystem": true
                    }
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_time.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
        "line": 131,
        "column": 29
      },
      "comment": "/**\n * Converts a calendar time to an SDL_Time in nanoseconds since the epoch.\n *\n * This function ignores the day_of_week member of the SDL_DateTime struct, so\n * it may remain unset.\n *\n * \\param dt the source SDL_DateTime\n * \\param ticks the resulting SDL_Time\n * \\returns 0 on success or -1 on error; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0\n */"
    },
    "SDL_Delay": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "ms",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_timer.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
        "line": 114,
        "column": 30
      },
      "comment": "/**\n * Wait a specified number of milliseconds before returning.\n *\n * This function waits a specified number of milliseconds before returning. It\n * waits at least the specified time, but possibly longer due to OS\n * scheduling.\n *\n * \\param ms the number of milliseconds to delay\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_DelayNS": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "ns",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 187,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_timer.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
        "line": 127,
        "column": 30
      },
      "comment": "/**\n * Wait a specified number of nanoseconds before returning.\n *\n * This function waits a specified number of nanoseconds before returning. It\n * waits at least the specified time, but possibly longer due to OS\n * scheduling.\n *\n * \\param ns the number of nanoseconds to delay\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_DelEventWatch": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "filter",
          "type": {
            "name": "SDL_EventFilter",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 1100,
              "column": 23
            },
            "inner_type": {
              "name": "int (void *, SDL_Event *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 1100,
            "column": 23
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 1206,
        "column": 30
      },
      "comment": "/**\n * Remove an event watch callback added with SDL_AddEventWatch().\n *\n * This function takes the same input as SDL_AddEventWatch() to identify and\n * delete the corresponding callback.\n *\n * \\param filter the function originally passed to SDL_AddEventWatch()\n * \\param userdata the pointer originally passed to SDL_AddEventWatch()\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AddEventWatch\n */"
    },
    "SDL_DelHintCallback": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "callback",
          "type": {
            "name": "SDL_HintCallback",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_hints.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
              "line": 2690,
              "column": 24
            },
            "inner_type": {
              "name": "void (void *, const char *, const char *, const char *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_hints.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
            "line": 2690,
            "column": 24
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2722,
        "column": 30
      },
      "comment": "/**\n * Remove a function watching a particular hint.\n *\n * \\param name the hint being watched\n * \\param callback An SDL_HintCallback function that will be called when the\n *                 hint value changes\n * \\param userdata a pointer being passed to the callback function\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AddHintCallback\n */"
    },
    "SDL_DestroyCondition": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "cond",
          "type": {
            "name": "SDL_Condition *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Condition",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 622,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 650,
        "column": 30
      },
      "comment": "/**\n * Destroy a condition variable.\n *\n * \\param cond the condition variable to destroy\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateCondition\n */"
    },
    "SDL_DestroyCursor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "SDL_Cursor *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Cursor",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mouse.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
                "line": 43,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 468,
        "column": 30
      },
      "comment": "/**\n * Free a previously-created cursor.\n *\n * Use this function to free cursor resources created with SDL_CreateCursor(),\n * SDL_CreateColorCursor() or SDL_CreateSystemCursor().\n *\n * \\param cursor the cursor to free\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateColorCursor\n * \\sa SDL_CreateCursor\n * \\sa SDL_CreateSystemCursor\n */"
    },
    "SDL_DestroyHapticEffect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "effect",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1183,
        "column": 30
      },
      "comment": "/**\n * Destroy a haptic effect on the device.\n *\n * This will stop the effect if it\u0027s running. Effects are automatically\n * destroyed when the device is closed.\n *\n * \\param haptic the SDL_Haptic device to destroy the effect on\n * \\param effect the ID of the haptic effect to destroy\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateHapticEffect\n */"
    },
    "SDL_DestroyMutex": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "mutex",
          "type": {
            "name": "SDL_Mutex *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Mutex",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 131,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 238,
        "column": 30
      },
      "comment": "/**\n * Destroy a mutex created with SDL_CreateMutex().\n *\n * This function must be called on any mutex that is no longer needed. Failure\n * to destroy a mutex will result in a system memory or resource leak. While\n * it is safe to destroy a mutex that is _unlocked_, it is not safe to attempt\n * to destroy a locked mutex, and may result in undefined behavior depending\n * on the platform.\n *\n * \\param mutex the mutex to destroy\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateMutex\n */"
    },
    "SDL_DestroyPalette": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "palette",
          "type": {
            "name": "SDL_Palette *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Palette",
              "kind": "typeAlias",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 695,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Palette",
                "kind": "struct",
                "size_of": 24,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 689,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 866,
        "column": 30
      },
      "comment": "/**\n * Free a palette created with SDL_CreatePalette().\n *\n * \\param palette the SDL_Palette structure to be freed\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreatePalette\n */"
    },
    "SDL_DestroyPixelFormat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "format",
          "type": {
            "name": "SDL_PixelFormat *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_PixelFormat",
              "kind": "typeAlias",
              "size_of": 56,
              "align_of": 8,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 721,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_PixelFormat",
                "kind": "struct",
                "size_of": 56,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 700,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 808,
        "column": 30
      },
      "comment": "/**\n * Free an SDL_PixelFormat structure allocated by SDL_CreatePixelFormat().\n *\n * \\param format the SDL_PixelFormat structure to free\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreatePixelFormat\n */"
    },
    "SDL_DestroyProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 459,
        "column": 30
      },
      "comment": "/**\n * Destroy a set of properties\n *\n * All properties are deleted and their cleanup functions will be called, if\n * any.\n *\n * \\param props the properties to destroy\n *\n * \\threadsafety This function should not be called while these properties are\n *               locked or other threads might be setting or getting values\n *               from these properties.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateProperties\n */"
    },
    "SDL_DestroyRenderer": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 2033,
        "column": 30
      },
      "comment": "/**\n * Destroy the rendering context for a window and free associated textures.\n *\n * If \u0060renderer\u0060 is NULL, this function will return immediately after setting\n * the SDL error message to \u0022Invalid renderer\u0022. See SDL_GetError().\n *\n * Note that destroying a window implicitly destroys the associated renderer,\n * so this should not be called if the window associated with the renderer has\n * already been destroyed.\n *\n * \\param renderer the rendering context\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateRenderer\n */"
    },
    "SDL_DestroyRWLock": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "rwlock",
          "type": {
            "name": "SDL_RWLock *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_RWLock",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 249,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 470,
        "column": 30
      },
      "comment": "/**\n * Destroy a read/write lock created with SDL_CreateRWLock().\n *\n * This function must be called on any read/write lock that is no longer\n * needed. Failure to destroy a rwlock will result in a system memory or\n * resource leak. While it is safe to destroy a rwlock that is _unlocked_, it\n * is not safe to attempt to destroy a locked rwlock, and may result in\n * undefined behavior depending on the platform.\n *\n * \\param rwlock the rwlock to destroy\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateRWLock\n */"
    },
    "SDL_DestroySemaphore": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "sem",
          "type": {
            "name": "SDL_Semaphore *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Semaphore",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 481,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 520,
        "column": 30
      },
      "comment": "/**\n * Destroy a semaphore.\n *\n * It is not safe to destroy a semaphore if there are threads currently\n * waiting on it.\n *\n * \\param sem the semaphore to destroy\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateSemaphore\n */"
    },
    "SDL_DestroySurface": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 196,
        "column": 30
      },
      "comment": "/**\n * Free an RGB surface.\n *\n * It is safe to pass NULL to this function.\n *\n * \\param surface the SDL_Surface to free.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateSurface\n * \\sa SDL_CreateSurfaceFrom\n */"
    },
    "SDL_DestroyTexture": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 2015,
        "column": 30
      },
      "comment": "/**\n * Destroy the specified texture.\n *\n * Passing NULL or an otherwise invalid texture will set the SDL error message\n * to \u0022Invalid texture\u0022.\n *\n * \\param texture the texture to destroy\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateTexture\n * \\sa SDL_CreateTextureFromSurface\n */"
    },
    "SDL_DestroyWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2129,
        "column": 30
      },
      "comment": "/**\n * Destroy a window.\n *\n * If the window has an associated SDL_Renderer, it will be implicitly\n * destroyed as well.\n *\n * If \u0060window\u0060 is NULL, this function will return immediately after setting\n * the SDL error message to \u0022Invalid window\u0022. See SDL_GetError().\n *\n * \\param window the window to destroy\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreatePopupWindow\n * \\sa SDL_CreateWindow\n * \\sa SDL_CreateWindowWithProperties\n */"
    },
    "SDL_DestroyWindowSurface": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1777,
        "column": 29
      },
      "comment": "/**\n * Destroy the surface associated with the window.\n *\n * \\param window the window to update\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowSurface\n * \\sa SDL_WindowHasSurface\n */"
    },
    "SDL_DetachThread": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "thread",
          "type": {
            "name": "SDL_Thread *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Thread",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_thread.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
                "line": 49,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 372,
        "column": 30
      },
      "comment": "/**\n * Let a thread clean up on exit without intervention.\n *\n * A thread may be \u0022detached\u0022 to signify that it should not remain until\n * another thread has called SDL_WaitThread() on it. Detaching a thread is\n * useful for long-running threads that nothing needs to synchronize with or\n * further manage. When a detached thread is done, it simply goes away.\n *\n * There is no way to recover the return code of a detached thread. If you\n * need this, don\u0027t detach the thread and instead use SDL_WaitThread().\n *\n * Once a thread is detached, you should usually assume the SDL_Thread isn\u0027t\n * safe to reference again, as it will become invalid immediately upon the\n * detached thread\u0027s exit, instead of remaining until someone has called\n * SDL_WaitThread() to finally clean it up. As such, don\u0027t detach the same\n * thread more than once.\n *\n * If a thread has already exited when passed to SDL_DetachThread(), it will\n * stop waiting for a call to SDL_WaitThread() and clean up immediately. It is\n * not safe to detach a thread that might be used with SDL_WaitThread().\n *\n * You may not call SDL_WaitThread() on a thread that has been detached. Use\n * either that function or this one, but not both, or behavior is undefined.\n *\n * It is safe to pass NULL to this function; it is a no-op.\n *\n * \\param thread the SDL_Thread pointer that was returned from the\n *               SDL_CreateThread() call that started this thread\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateThread\n * \\sa SDL_WaitThread\n */"
    },
    "SDL_DetachVirtualJoystick": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 424,
        "column": 29
      },
      "comment": "/**\n * Detach a virtual joystick.\n *\n * \\param instance_id the joystick instance ID, previously returned from\n *                    SDL_AttachVirtualJoystick()\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AttachVirtualJoystick\n * \\sa SDL_AttachVirtualJoystickEx\n */"
    },
    "SDL_DisableScreenSaver": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2180,
        "column": 29
      },
      "comment": "/**\n * Prevent the screen from being blanked by a screen saver.\n *\n * If you disable the screensaver, it is automatically re-enabled when SDL\n * quits.\n *\n * The screensaver is disabled by default since SDL 2.0.2. Before SDL 2.0.2\n * the screensaver was enabled by default.\n *\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_EnableScreenSaver\n * \\sa SDL_ScreenSaverEnabled\n */"
    },
    "SDL_DuplicateSurface": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Surface *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_Surface",
          "kind": "typeAlias",
          "size_of": 96,
          "align_of": 8,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 131,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_Surface",
            "kind": "struct",
            "size_of": 96,
            "align_of": 8,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 107,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 668,
        "column": 38
      },
      "comment": "/*\n * Creates a new surface identical to the existing surface.\n *\n * The returned surface should be freed with SDL_DestroySurface().\n *\n * \\param surface the surface to duplicate.\n * \\returns a copy of the surface, or NULL on failure; call SDL_GetError() for\n *          more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DestroySurface\n */"
    },
    "SDL_EGL_GetCurrentEGLConfig": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_EGLConfig",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_video.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
          "line": 178,
          "column": 15
        },
        "inner_type": {
          "name": "void *",
          "kind": "pointer",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          },
          "inner_type": {
            "name": "void",
            "kind": "primitive",
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2433,
        "column": 39
      },
      "comment": "/**\n * Get the currently active EGL config.\n *\n * \\returns the currently active EGL config or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_EGL_GetCurrentEGLDisplay": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_EGLDisplay",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_video.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
          "line": 177,
          "column": 15
        },
        "inner_type": {
          "name": "void *",
          "kind": "pointer",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          },
          "inner_type": {
            "name": "void",
            "kind": "primitive",
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2423,
        "column": 40
      },
      "comment": "/**\n * Get the currently active EGL display.\n *\n * \\returns the currently active EGL display or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_EGL_GetProcAddress": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_FunctionPointer",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 1359,
          "column": 16
        },
        "inner_type": {
          "name": "void (void)",
          "kind": "functionPointer",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "proc",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2278,
        "column": 45
      },
      "comment": "/**\n * Get an EGL library function by name.\n *\n * If an EGL library is loaded, this function allows applications to get entry\n * points for EGL functions. This is useful to provide to an EGL API and\n * extension loader.\n *\n * \\param proc the name of an EGL function\n * \\returns a pointer to the named EGL function. The returned pointer should\n *          be cast to the appropriate function signature.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GL_GetCurrentEGLDisplay\n */"
    },
    "SDL_EGL_GetWindowEGLSurface": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_EGLSurface",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_video.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
          "line": 179,
          "column": 15
        },
        "inner_type": {
          "name": "void *",
          "kind": "pointer",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          },
          "inner_type": {
            "name": "void",
            "kind": "primitive",
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2444,
        "column": 40
      },
      "comment": "/**\n * Get the EGL surface associated with the window.\n *\n * \\param window the window to query\n * \\returns the EGLSurface pointer associated with the window, or NULL on\n *          failure.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_EGL_SetEGLAttributeCallbacks": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "platformAttribCallback",
          "type": {
            "name": "SDL_EGLAttribArrayCallback",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 186,
              "column": 34
            },
            "inner_type": {
              "name": "SDL_EGLAttrib *(void)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 186,
            "column": 34
          }
        },
        {
          "name": "surfaceAttribCallback",
          "type": {
            "name": "SDL_EGLIntArrayCallback",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 187,
              "column": 31
            },
            "inner_type": {
              "name": "SDL_EGLint *(void)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 187,
            "column": 31
          }
        },
        {
          "name": "contextAttribCallback",
          "type": {
            "name": "SDL_EGLIntArrayCallback",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 187,
              "column": 31
            },
            "inner_type": {
              "name": "SDL_EGLint *(void)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 187,
            "column": 31
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2468,
        "column": 30
      },
      "comment": "/**\n * Sets the callbacks for defining custom EGLAttrib arrays for EGL\n * initialization.\n *\n * Each callback should return a pointer to an EGL attribute array terminated\n * with EGL_NONE. Callbacks may return NULL pointers to signal an error, which\n * will cause the SDL_CreateWindow process to fail gracefully.\n *\n * The arrays returned by each callback will be appended to the existing\n * attribute arrays defined by SDL.\n *\n * NOTE: These callback pointers will be reset after SDL_GL_ResetAttributes.\n *\n * \\param platformAttribCallback Callback for attributes to pass to\n *                               eglGetPlatformDisplay.\n * \\param surfaceAttribCallback Callback for attributes to pass to\n *                              eglCreateSurface.\n * \\param contextAttribCallback Callback for attributes to pass to\n *                              eglCreateContext.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_EnableScreenSaver": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2161,
        "column": 29
      },
      "comment": "/**\n * Allow the screen to be blanked by a screen saver.\n *\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DisableScreenSaver\n * \\sa SDL_ScreenSaverEnabled\n */"
    },
    "SDL_EnumerateDirectory": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "path",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "callback",
          "type": {
            "name": "SDL_EnumerateDirectoryCallback",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_filesystem.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
              "line": 269,
              "column": 23
            },
            "inner_type": {
              "name": "int (void *, const char *, const char *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_filesystem.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
            "line": 269,
            "column": 23
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_filesystem.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
        "line": 282,
        "column": 29
      },
      "comment": "/**\n * Enumerate a directory.\n *\n * \\param path the path of the directory to enumerate\n * \\param callback a function that is called for each entry in the directory\n * \\param userdata a pointer that is passed to \u0060callback\u0060\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_EnumerateProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "callback",
          "type": {
            "name": "SDL_EnumeratePropertiesCallback",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 423,
              "column": 24
            },
            "inner_type": {
              "name": "void (void *, SDL_PropertiesID, const char *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 423,
            "column": 24
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 441,
        "column": 29
      },
      "comment": "/**\n * Enumerate the properties on a set of properties\n *\n * The callback function is called for each property on the set of properties.\n * The properties are locked during enumeration.\n *\n * \\param props the properties to query\n * \\param callback the function to call for each property\n * \\param userdata a pointer that is passed to \u0060callback\u0060\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_EnumerateStorageDirectory": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "storage",
          "type": {
            "name": "SDL_Storage *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Storage",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_storage.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
                "line": 78,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "path",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "callback",
          "type": {
            "name": "SDL_EnumerateDirectoryCallback",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_filesystem.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
              "line": 269,
              "column": 23
            },
            "inner_type": {
              "name": "int (void *, const char *, const char *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_filesystem.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
            "line": 269,
            "column": 23
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 284,
        "column": 29
      },
      "comment": "/**\n * Enumerate a directory in a storage container.\n *\n * \\param storage a storage container\n * \\param path the path of the directory to enumerate\n * \\param callback a function that is called for each entry in the directory\n * \\param userdata a pointer that is passed to \u0060callback\u0060\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_StorageReady\n */"
    },
    "SDL_Error": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "code",
          "type": {
            "name": "SDL_errorcode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_error.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_error.h",
              "line": 133,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_errorcode",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_error.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_error.h",
                "line": 125,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_error.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_error.h",
            "line": 133,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_error.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_error.h",
        "line": 143,
        "column": 29
      },
      "comment": "/**\n * SDL_Error()\n *\n * \\param code Error code\n * \\returns unconditionally -1.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_EventEnabled": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "type",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 1248,
        "column": 34
      },
      "comment": "/**\n * Query the state of processing events by type.\n *\n * \\param type the type of event; see SDL_EventType for details\n * \\returns SDL_TRUE if the event is being processed, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetEventEnabled\n */"
    },
    "SDL_exp": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1169,
        "column": 32
      }
    },
    "SDL_expf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1170,
        "column": 31
      }
    },
    "SDL_fabs": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1171,
        "column": 32
      }
    },
    "SDL_fabsf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1172,
        "column": 31
      }
    },
    "SDL_FillSurfaceRect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "color",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 831,
        "column": 29
      },
      "comment": "/**\n * Perform a fast fill of a rectangle with a specific color.\n *\n * \u0060color\u0060 should be a pixel of the format used by the surface, and can be\n * generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an\n * alpha component then the destination is simply filled with that alpha\n * information, no blending takes place.\n *\n * If there is a clip rectangle set on the destination (set via\n * SDL_SetSurfaceClipRect()), then this function will fill based on the\n * intersection of the clip rectangle and \u0060rect\u0060.\n *\n * \\param dst the SDL_Surface structure that is the drawing target\n * \\param rect the SDL_Rect structure representing the rectangle to fill, or\n *             NULL to fill the entire surface\n * \\param color the color to fill with\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_FillSurfaceRects\n */"
    },
    "SDL_FillSurfaceRects": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rects",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "color",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 856,
        "column": 29
      },
      "comment": "/**\n * Perform a fast fill of a set of rectangles with a specific color.\n *\n * \u0060color\u0060 should be a pixel of the format used by the surface, and can be\n * generated by SDL_MapRGB() or SDL_MapRGBA(). If the color value contains an\n * alpha component then the destination is simply filled with that alpha\n * information, no blending takes place.\n *\n * If there is a clip rectangle set on the destination (set via\n * SDL_SetSurfaceClipRect()), then this function will fill based on the\n * intersection of the clip rectangle and \u0060rect\u0060.\n *\n * \\param dst the SDL_Surface structure that is the drawing target\n * \\param rects an array of SDL_Rects representing the rectangles to fill.\n * \\param count the number of rectangles in the array\n * \\param color the color to fill with\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_FillSurfaceRect\n */"
    },
    "SDL_FilterEvents": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "filter",
          "type": {
            "name": "SDL_EventFilter",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 1100,
              "column": 23
            },
            "inner_type": {
              "name": "int (void *, SDL_Event *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 1100,
            "column": 23
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 1224,
        "column": 30
      },
      "comment": "/**\n * Run a specific filter function on the current event queue, removing any\n * events for which the filter returns 0.\n *\n * See SDL_SetEventFilter() for more information. Unlike SDL_SetEventFilter(),\n * this function does not change the filter permanently, it only uses the\n * supplied filter until this function returns.\n *\n * \\param filter the SDL_EventFilter function to call when an event happens\n * \\param userdata a pointer that is passed to \u0060filter\u0060\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetEventFilter\n * \\sa SDL_SetEventFilter\n */"
    },
    "SDL_FlashWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "operation",
          "type": {
            "name": "SDL_FlashOperation",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 167,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_FlashOperation",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 162,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 167,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2110,
        "column": 29
      },
      "comment": "/**\n * Request a window to demand attention from the user.\n *\n * \\param window the window to be flashed\n * \\param operation the flash operation\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_FlipSurface": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "flip",
          "type": {
            "name": "SDL_FlipMode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 86,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_FlipMode",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 81,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 86,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 653,
        "column": 29
      },
      "comment": "/*\n * Flip a surface vertically or horizontally.\n *\n * \\param surface the surface to flip\n * \\param flip the direction to flip\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_floor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1173,
        "column": 32
      }
    },
    "SDL_floorf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1174,
        "column": 31
      }
    },
    "SDL_FlushEvent": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "type",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 932,
        "column": 30
      },
      "comment": "/**\n * Clear events of a specific type from the event queue.\n *\n * This will unconditionally remove any events from the queue that match\n * \u0060type\u0060. If you need to remove a range of event types, use SDL_FlushEvents()\n * instead.\n *\n * It\u0027s also normal to just ignore events you don\u0027t care about in your event\n * loop without calling this function.\n *\n * This function only affects currently queued events. If you want to make\n * sure that all pending OS events are flushed, you can call SDL_PumpEvents()\n * on the main thread immediately before the flush call.\n *\n * If you have user events with custom data that needs to be freed, you should\n * use SDL_PeepEvents() to remove and clean up those events before calling\n * this function.\n *\n * \\param type the type of event to be cleared; see SDL_EventType for details\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_FlushEvents\n */"
    },
    "SDL_FlushEvents": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "minType",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        },
        {
          "name": "maxType",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 957,
        "column": 30
      },
      "comment": "/**\n * Clear events of a range of types from the event queue.\n *\n * This will unconditionally remove any events from the queue that are in the\n * range of \u0060minType\u0060 to \u0060maxType\u0060, inclusive. If you need to remove a single\n * event type, use SDL_FlushEvent() instead.\n *\n * It\u0027s also normal to just ignore events you don\u0027t care about in your event\n * loop without calling this function.\n *\n * This function only affects currently queued events. If you want to make\n * sure that all pending OS events are flushed, you can call SDL_PumpEvents()\n * on the main thread immediately before the flush call.\n *\n * \\param minType the low end of event type to be cleared, inclusive; see\n *                SDL_EventType for details\n * \\param maxType the high end of event type to be cleared, inclusive; see\n *                SDL_EventType for details\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_FlushEvent\n */"
    },
    "SDL_FlushRenderer": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 2064,
        "column": 29
      },
      "comment": "/**\n * Force the rendering context to flush any pending commands and state.\n *\n * You do not need to (and in fact, shouldn\u0027t) call this function unless you\n * are planning to call into OpenGL/Direct3D/Metal/whatever directly, in\n * addition to using an SDL_Renderer.\n *\n * This is for a very-specific case: if you are using SDL\u0027s render API, and\n * you plan to make OpenGL/D3D/whatever calls in addition to SDL render API\n * calls. If this applies, you should call this function between calls to\n * SDL\u0027s render API and the low-level API you\u0027re using in cooperation.\n *\n * In all other cases, you can ignore this function.\n *\n * This call makes SDL flush any pending rendering work it was queueing up to\n * do later in a single batch, and marks any internal cached state as invalid,\n * so it\u0027ll prepare all its state again later, from scratch.\n *\n * This means you do not need to save state in your rendering code to protect\n * the SDL renderer. However, there lots of arbitrary pieces of Direct3D and\n * OpenGL state that can confuse things; you should use your best judgement\n * and be prepared to make changes if specific state needs to be protected.\n *\n * \\param renderer the rendering context\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_fmod": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1177,
        "column": 32
      }
    },
    "SDL_fmodf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1178,
        "column": 31
      }
    },
    "SDL_free": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "mem",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 412,
        "column": 30
      }
    },
    "SDL_GamepadConnected": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 866,
        "column": 34
      },
      "comment": "/**\n * Check if a gamepad has been opened and is currently connected.\n *\n * \\param gamepad a gamepad identifier previously returned by\n *                SDL_OpenGamepad()\n * \\returns SDL_TRUE if the gamepad has been opened and is currently\n *          connected, or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GamepadEventsEnabled": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 915,
        "column": 34
      },
      "comment": "/**\n * Query the state of gamepad event processing.\n *\n * If gamepad events are disabled, you must call SDL_UpdateGamepads() yourself\n * and check the state of the gamepad when you want gamepad information.\n *\n * \\returns SDL_TRUE if gamepad events are being processed, SDL_FALSE\n *          otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetGamepadEventsEnabled\n */"
    },
    "SDL_GamepadHasAxis": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "axis",
          "type": {
            "name": "SDL_GamepadAxis",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 171,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadAxis",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 161,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 171,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1028,
        "column": 34
      },
      "comment": "/**\n * Query whether a gamepad has a given axis.\n *\n * This merely reports whether the gamepad\u0027s mapping defined this axis, as\n * that is all the information SDL has about the physical device.\n *\n * \\param gamepad a gamepad\n * \\param axis an axis enum value (an SDL_GamepadAxis value)\n * \\returns SDL_TRUE if the gamepad has this axis, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GamepadHasButton\n * \\sa SDL_GetGamepadAxis\n */"
    },
    "SDL_GamepadHasButton": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "button",
          "type": {
            "name": "SDL_GamepadButton",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 128,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadButton",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 98,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 128,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1102,
        "column": 34
      },
      "comment": "/**\n * Query whether a gamepad has a given button.\n *\n * This merely reports whether the gamepad\u0027s mapping defined this button, as\n * that is all the information SDL has about the physical device.\n *\n * \\param gamepad a gamepad\n * \\param button a button enum value (an SDL_GamepadButton value)\n * \\returns SDL_TRUE if the gamepad has this button, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GamepadHasAxis\n */"
    },
    "SDL_GamepadHasSensor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "type",
          "type": {
            "name": "SDL_SensorType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_sensor.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
              "line": 79,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_SensorType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_sensor.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
                "line": 69,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_sensor.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
            "line": 79,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1204,
        "column": 34
      },
      "comment": "/**\n * Return whether a gamepad has a particular sensor.\n *\n * \\param gamepad The gamepad to query\n * \\param type The type of sensor to query\n * \\returns SDL_TRUE if the sensor exists, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadSensorData\n * \\sa SDL_GetGamepadSensorDataRate\n * \\sa SDL_SetGamepadSensorEnabled\n */"
    },
    "SDL_GamepadSensorEnabled": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "type",
          "type": {
            "name": "SDL_SensorType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_sensor.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
              "line": 79,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_SensorType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_sensor.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
                "line": 69,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_sensor.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
            "line": 79,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1233,
        "column": 34
      },
      "comment": "/**\n * Query whether sensor data reporting is enabled for a gamepad.\n *\n * \\param gamepad The gamepad to query\n * \\param type The type of sensor to query\n * \\returns SDL_TRUE if the sensor is enabled, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetGamepadSensorEnabled\n */"
    },
    "SDL_GetAssertionHandler": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_AssertionHandler",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_assert.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
          "line": 230,
          "column": 35
        },
        "inner_type": {
          "name": "SDL_AssertState (const SDL_AssertData *, void *)",
          "kind": "functionPointer",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "puserdata",
          "type": {
            "name": "void **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "void",
                "kind": "primitive",
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_assert.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
        "line": 296,
        "column": 46
      },
      "comment": "/**\n * Get the current assertion handler.\n *\n * This returns the function pointer that is called when an assertion is\n * triggered. This is either the value last passed to\n * SDL_SetAssertionHandler(), or if no application-specified function is set,\n * is equivalent to calling SDL_GetDefaultAssertionHandler().\n *\n * The parameter \u0060puserdata\u0060 is a pointer to a void*, which will store the\n * \u0022userdata\u0022 pointer that was passed to SDL_SetAssertionHandler(). This value\n * will always be NULL for the default handler. If you don\u0027t care about this\n * data, it is safe to pass a NULL pointer to this function to ignore it.\n *\n * \\param puserdata pointer which is filled with the \u0022userdata\u0022 pointer that\n *                  was passed to SDL_SetAssertionHandler()\n * \\returns the SDL_AssertionHandler that is called when an assert triggers.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetAssertionHandler\n */"
    },
    "SDL_GetAssertionReport": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const SDL_AssertData *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_AssertData",
          "kind": "typeAlias",
          "size_of": 48,
          "align_of": 8,
          "location": {
            "fileName": "SDL_assert.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
            "line": 137,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_AssertData",
            "kind": "struct",
            "size_of": 48,
            "align_of": 8,
            "location": {
              "fileName": "SDL_assert.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
              "line": 128,
              "column": 16
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_assert.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
        "line": 324,
        "column": 48
      },
      "comment": "/**\n * Get a list of all assertion failures.\n *\n * This function gets all assertions triggered since the last call to\n * SDL_ResetAssertionReport(), or the start of the program.\n *\n * The proper way to examine this data looks something like this:\n *\n * \u0060\u0060\u0060c\n * const SDL_AssertData *item = SDL_GetAssertionReport();\n * while (item) {\n *    printf(\u0022\u0027%s\u0027, %s (%s:%d), triggered %u times, always ignore: %s.\\\\n\u0022,\n *           item-\u003Econdition, item-\u003Efunction, item-\u003Efilename,\n *           item-\u003Elinenum, item-\u003Etrigger_count,\n *           item-\u003Ealways_ignore ? \u0022yes\u0022 : \u0022no\u0022);\n *    item = item-\u003Enext;\n * }\n * \u0060\u0060\u0060\n *\n * \\returns a list of all failed assertions or NULL if the list is empty. This\n *          memory should not be modified or freed by the application.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ResetAssertionReport\n */"
    },
    "SDL_GetBasePath": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_filesystem.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
        "line": 82,
        "column": 31
      },
      "comment": "/**\n * Get the directory where the application was run from.\n *\n * This is not necessarily a fast call, so you should call this once near\n * startup and save the string if you need it.\n *\n * **macOS and iOS Specific Functionality**: If the application is in a \u0022.app\u0022\n * bundle, this function returns the Resource directory (e.g.\n * MyApp.app/Contents/Resources/). This behaviour can be overridden by adding\n * a property to the Info.plist file. Adding a string key with the name\n * SDL_FILESYSTEM_BASE_DIR_TYPE with a supported value will change the\n * behaviour.\n *\n * Supported values for the SDL_FILESYSTEM_BASE_DIR_TYPE property (Given an\n * application in /Applications/SDLApp/MyApp.app):\n *\n * - \u0060resource\u0060: bundle resource directory (the default). For example:\n *   \u0060/Applications/SDLApp/MyApp.app/Contents/Resources\u0060\n * - \u0060bundle\u0060: the Bundle directory. For example:\n *   \u0060/Applications/SDLApp/MyApp.app/\u0060\n * - \u0060parent\u0060: the containing directory of the bundle. For example:\n *   \u0060/Applications/SDLApp/\u0060\n *\n * **Nintendo 3DS Specific Functionality**: This function returns \u0022romfs\u0022\n * directory of the application as it is uncommon to store resources outside\n * the executable. As such it is not a writable directory.\n *\n * The returned path is guaranteed to end with a path separator (\u0027\\\\\u0027 on\n * Windows, \u0027/\u0027 on most other platforms).\n *\n * The pointer returned is owned by the caller. Please call SDL_free() on the\n * pointer when done with it.\n *\n * \\returns an absolute path in UTF-8 encoding to the application data\n *          directory. NULL will be returned on error or when the platform\n *          doesn\u0027t implement this functionality, call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetPrefPath\n */"
    },
    "SDL_GetBooleanProperty": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "default_value",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 407,
        "column": 34
      },
      "comment": "/**\n * Get a boolean property on a set of properties\n *\n * You can use SDL_GetPropertyType() to query whether the property exists and\n * is a boolean property.\n *\n * \\param props the properties to query\n * \\param name the name of the property to query\n * \\param default_value the default value of the property\n * \\returns the value of the property, or \u0060default_value\u0060 if it is not set or\n *          not a float property.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetPropertyType\n * \\sa SDL_HasProperty\n * \\sa SDL_SetBooleanProperty\n */"
    },
    "SDL_GetCameraDeviceName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_CameraDeviceID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_camera.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
              "line": 48,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_camera.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
            "line": 48,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 227,
        "column": 32
      },
      "comment": "/**\n * Get human-readable device name for a camera.\n *\n * The returned string is owned by the caller; please release it with\n * SDL_free() when done with it.\n *\n * \\param instance_id the camera device instance ID\n * \\returns Human-readable device name, or NULL on error; call SDL_GetError()\n *          for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetCameraDevices\n */"
    },
    "SDL_GetCameraDevicePosition": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_CameraPosition",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_camera.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
          "line": 83,
          "column": 3
        },
        "inner_type": {
          "name": "enum SDL_CameraPosition",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_camera.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
            "line": 78,
            "column": 14
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_CameraDeviceID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_camera.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
              "line": 48,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_camera.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
            "line": 48,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 246,
        "column": 44
      },
      "comment": "/**\n * Get the position of the camera in relation to the system.\n *\n * Most platforms will report UNKNOWN, but mobile devices, like phones, can\n * often make a distiction between cameras on the front of the device (that\n * points towards the user, for taking \u0022selfies\u0022) and cameras on the back (for\n * filming in the direction the user is facing).\n *\n * \\param instance_id the camera device instance ID\n * \\returns The position of the camera on the system hardware.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetCameraDevices\n */"
    },
    "SDL_GetCameraDevices": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_CameraDeviceID *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_CameraDeviceID",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_camera.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
            "line": 48,
            "column": 16
          },
          "inner_type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "count",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 166,
        "column": 45
      },
      "comment": "/**\n * Get a list of currently connected camera devices.\n *\n * \\param count a pointer filled in with the number of camera devices. Can be\n *              NULL.\n * \\returns a 0 terminated array of camera instance IDs which should be freed\n *          with SDL_free(), or NULL on error; call SDL_GetError() for more\n *          details.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_OpenCamera\n */"
    },
    "SDL_GetCameraDeviceSupportedFormats": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_CameraSpec *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_CameraSpec",
          "kind": "typeAlias",
          "size_of": 20,
          "align_of": 4,
          "location": {
            "fileName": "SDL_camera.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
            "line": 71,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_CameraSpec",
            "kind": "struct",
            "size_of": 20,
            "align_of": 4,
            "location": {
              "fileName": "SDL_camera.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
              "line": 64,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "devid",
          "type": {
            "name": "SDL_CameraDeviceID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_camera.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
              "line": 48,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_camera.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
            "line": 48,
            "column": 16
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 209,
        "column": 41
      },
      "comment": "/**\n * Get the list of native formats/sizes a camera supports.\n *\n * This returns a list of all formats and frame sizes that a specific camera\n * can offer. This is useful if your app can accept a variety of image formats\n * and sizes and so want to find the optimal spec that doesn\u0027t require\n * conversion.\n *\n * This function isn\u0027t strictly required; if you call SDL_OpenCameraDevice\n * with a NULL spec, SDL will choose a native format for you, and if you\n * instead specify a desired format, it will transparently convert to the\n * requested format on your behalf.\n *\n * If \u0060count\u0060 is not NULL, it will be filled with the number of elements in\n * the returned array. Additionally, the last element of the array has all\n * fields set to zero (this element is not included in \u0060count\u0060).\n *\n * The returned list is owned by the caller, and should be released with\n * SDL_free() when no longer needed.\n *\n * Note that it\u0027s legal for a camera to supply a list with only the zeroed\n * final element and \u0060*count\u0060 set to zero; this is what will happen on\n * Emscripten builds, since that platform won\u0027t tell _anything_ about\n * available cameras until you\u0027ve opened one, and won\u0027t even tell if there\n * _is_ a camera until the user has given you permission to check through a\n * scary warning popup.\n *\n * \\param devid the camera device instance ID to query.\n * \\param count a pointer filled in with the number of elements in the list.\n *              Can be NULL.\n * \\returns a 0 terminated array of SDL_CameraSpecs, which should be freed\n *          with SDL_free(), or NULL on error; call SDL_GetError() for more\n *          details.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetCameraDevices\n * \\sa SDL_OpenCameraDevice\n */"
    },
    "SDL_GetCameraDriver": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 131,
        "column": 37
      },
      "comment": "/**\n * Use this function to get the name of a built in camera driver.\n *\n * The list of camera drivers is given in the order that they are normally\n * initialized by default; the drivers that seem more reasonable to choose\n * first (as far as the SDL developers believe) are earlier in the list.\n *\n * The names of drivers are all simple, low-ASCII identifiers, like \u0022v4l2\u0022,\n * \u0022coremedia\u0022 or \u0022android\u0022. These never have Unicode characters, and are not\n * meant to be proper names.\n *\n * \\param index the index of the camera driver; the value ranges from 0 to\n *              SDL_GetNumCameraDrivers() - 1\n * \\returns the name of the camera driver at the requested index, or NULL if\n *          an invalid index was specified.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetNumCameraDrivers\n */"
    },
    "SDL_GetCameraFormat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "camera",
          "type": {
            "name": "SDL_Camera *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Camera",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_camera.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
                "line": 54,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "spec",
          "type": {
            "name": "SDL_CameraSpec *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_CameraSpec",
              "kind": "typeAlias",
              "size_of": 20,
              "align_of": 4,
              "location": {
                "fileName": "SDL_camera.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
                "line": 71,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_CameraSpec",
                "kind": "struct",
                "size_of": 20,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_camera.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
                  "line": 64,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 381,
        "column": 29
      },
      "comment": "/**\n * Get the spec that a camera is using when generating images.\n *\n * Note that this might not be the native format of the hardware, as SDL might\n * be converting to this format behind the scenes.\n *\n * If the system is waiting for the user to approve access to the camera, as\n * some platforms require, this will return -1, but this isn\u0027t necessarily a\n * fatal error; you should either wait for an SDL_EVENT_CAMERA_DEVICE_APPROVED\n * (or SDL_EVENT_CAMERA_DEVICE_DENIED) event, or poll SDL_IsCameraApproved()\n * occasionally until it returns non-zero.\n *\n * \\param camera opened camera device\n * \\param spec The SDL_CameraSpec to be initialized by this function.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_OpenCameraDevice\n */"
    },
    "SDL_GetCameraInstanceID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_CameraDeviceID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_camera.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
          "line": 48,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "camera",
          "type": {
            "name": "SDL_Camera *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Camera",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_camera.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
                "line": 54,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 340,
        "column": 44
      },
      "comment": "/**\n * Get the instance ID of an opened camera.\n *\n * \\param camera an SDL_Camera to query\n * \\returns the instance ID of the specified camera on success or 0 on\n *          failure; call SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_OpenCameraDevice\n */"
    },
    "SDL_GetCameraPermissionState": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "camera",
          "type": {
            "name": "SDL_Camera *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Camera",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_camera.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
                "line": 54,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 325,
        "column": 29
      },
      "comment": "/**\n * Query if camera access has been approved by the user.\n *\n * Cameras will not function between when the device is opened by the app and\n * when the user permits access to the hardware. On some platforms, this\n * presents as a popup dialog where the user has to explicitly approve access;\n * on others the approval might be implicit and not alert the user at all.\n *\n * This function can be used to check the status of that approval. It will\n * return 0 if still waiting for user response, 1 if the camera is approved\n * for use, and -1 if the user denied access.\n *\n * Instead of polling with this function, you can wait for a\n * SDL_EVENT_CAMERA_DEVICE_APPROVED (or SDL_EVENT_CAMERA_DEVICE_DENIED) event\n * in the standard SDL event loop, which is guaranteed to be sent once when\n * permission to use the camera is decided.\n *\n * If a camera is declined, there\u0027s nothing to be done but call\n * SDL_CloseCamera() to dispose of it.\n *\n * \\param camera the opened camera device to query\n * \\returns -1 if user denied access to the camera, 1 if user approved access,\n *          0 if no decision has been made yet.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_OpenCameraDevice\n * \\sa SDL_CloseCamera\n */"
    },
    "SDL_GetCameraProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PropertiesID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_properties.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
          "line": 42,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "camera",
          "type": {
            "name": "SDL_Camera *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Camera",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_camera.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
                "line": 54,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 356,
        "column": 42
      },
      "comment": "/**\n * Get the properties associated with an opened camera.\n *\n * \\param camera the SDL_Camera obtained from SDL_OpenCameraDevice()\n * \\returns a valid property ID on success or 0 on failure; call\n *          SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetProperty\n * \\sa SDL_SetProperty\n */"
    },
    "SDL_GetClipboardData": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "mime_type",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_size_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
                "line": 31,
                "column": 32,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_size_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 70,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_clipboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
        "line": 224,
        "column": 31
      },
      "comment": "/**\n * Get the data from clipboard for a given mime type\n *\n * The size of text data does not include the terminator, but the text is\n * guaranteed to be null terminated.\n *\n * \\param mime_type The mime type to read from the clipboard\n * \\param size A pointer filled in with the length of the returned data\n * \\returns the retrieved data buffer or NULL on failure; call SDL_GetError()\n *          for more information. Caller must call SDL_free() on the returned\n *          pointer when done with it.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetClipboardData\n */"
    },
    "SDL_GetClipboardText": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_clipboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
        "line": 71,
        "column": 32
      },
      "comment": "/**\n * Get UTF-8 text from the clipboard, which must be freed with SDL_free().\n *\n * This functions returns empty string if there was not enough memory left for\n * a copy of the clipboard\u0027s content.\n *\n * \\returns the clipboard text on success or an empty string on failure; call\n *          SDL_GetError() for more information. Caller must call SDL_free()\n *          on the returned pointer when done with it (even if there was an\n *          error).\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasClipboardText\n * \\sa SDL_SetClipboardText\n */"
    },
    "SDL_GetClosestFullscreenDisplayMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const SDL_DisplayMode *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_DisplayMode",
          "kind": "typeAlias",
          "size_of": 32,
          "align_of": 8,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 91,
            "column": 3
          },
          "inner_type": {
            "name": "SDL_DisplayMode",
            "kind": "struct",
            "size_of": 32,
            "align_of": 8,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 82,
              "column": 9
            }
          }
        }
      },
      "parameters": [
        {
          "name": "displayID",
          "type": {
            "name": "SDL_DisplayID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 44,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 44,
            "column": 16
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "refresh_rate",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "include_high_density_modes",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 507,
        "column": 48
      },
      "comment": "/**\n * Get the closest match to the requested display mode.\n *\n * The available display modes are scanned and \u0060closest\u0060 is filled in with the\n * closest mode matching the requested mode and returned. The mode format and\n * refresh rate default to the desktop mode if they are set to 0. The modes\n * are scanned with size being first priority, format being second priority,\n * and finally checking the refresh rate. If all the available modes are too\n * small, then NULL is returned.\n *\n * \\param displayID the instance ID of the display to query\n * \\param w the width in pixels of the desired display mode\n * \\param h the height in pixels of the desired display mode\n * \\param refresh_rate the refresh rate of the desired display mode, or 0.0f\n *                     for the desktop refresh rate\n * \\param include_high_density_modes Boolean to include high density modes in\n *                                   the search\n * \\returns a pointer to the closest display mode equal to or larger than the\n *          desired mode, or NULL on error; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetDisplays\n * \\sa SDL_GetFullscreenDisplayModes\n */"
    },
    "SDL_GetCPUCacheLineSize": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 67,
        "column": 29
      },
      "comment": "/**\n * Determine the L1 cache line size of the CPU.\n *\n * This is useful for determining multi-threaded structure padding or SIMD\n * prefetch sizes.\n *\n * \\returns the L1 cache line size of the CPU, in bytes.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetCPUCount": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 55,
        "column": 29
      },
      "comment": "/**\n * Get the number of CPU cores available.\n *\n * \\returns the total number of logical CPU cores. On CPUs that include\n *          technologies such as hyperthreading, the number of logical cores\n *          may be more than the number of physical cores.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetCurrentCameraDriver": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 149,
        "column": 37
      },
      "comment": "/**\n * Get the name of the current camera driver.\n *\n * The returned string points to internal static memory and thus never becomes\n * invalid, even if you quit the camera subsystem and initialize a new driver\n * (although such a case would return a different static string from another\n * call to this function, of course). As such, you should not modify or free\n * the returned string.\n *\n * \\returns the name of the current camera driver or NULL if no driver has\n *          been initialized.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetCurrentDisplayMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const SDL_DisplayMode *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_DisplayMode",
          "kind": "typeAlias",
          "size_of": 32,
          "align_of": 8,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 91,
            "column": 3
          },
          "inner_type": {
            "name": "SDL_DisplayMode",
            "kind": "struct",
            "size_of": 32,
            "align_of": 8,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 82,
              "column": 9
            }
          }
        }
      },
      "parameters": [
        {
          "name": "displayID",
          "type": {
            "name": "SDL_DisplayID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 44,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 44,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 545,
        "column": 48
      },
      "comment": "/**\n * Get information about the current display mode.\n *\n * There\u0027s a difference between this function and SDL_GetDesktopDisplayMode()\n * when SDL runs fullscreen and has changed the resolution. In that case this\n * function will return the current display mode, and not the previous native\n * display mode.\n *\n * \\param displayID the instance ID of the display to query\n * \\returns a pointer to the desktop display mode or NULL on error; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetDesktopDisplayMode\n * \\sa SDL_GetDisplays\n */"
    },
    "SDL_GetCurrentDisplayOrientation": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_DisplayOrientation",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_video.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
          "line": 103,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_DisplayOrientation",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 96,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "displayID",
          "type": {
            "name": "SDL_DisplayID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 44,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 44,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 437,
        "column": 48
      },
      "comment": "/**\n * Get the orientation of a display.\n *\n * \\param displayID the instance ID of the display to query\n * \\returns The SDL_DisplayOrientation enum value of the display, or\n *          \u0060SDL_ORIENTATION_UNKNOWN\u0060 if it isn\u0027t available.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetDisplays\n */"
    },
    "SDL_GetCurrentRenderOutputSize": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 478,
        "column": 29
      },
      "comment": "/**\n * Get the current output size in pixels of a rendering context.\n *\n * If a rendering target is active, this will return the size of the rendering\n * target in pixels, otherwise if a logical size is set, it will return the\n * logical size, otherwise it will return the value of\n * SDL_GetRenderOutputSize().\n *\n * \\param renderer the rendering context\n * \\param w a pointer filled in with the current width\n * \\param h a pointer filled in with the current height\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderOutputSize\n */"
    },
    "SDL_GetCurrentThreadID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_ThreadID",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_thread.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
          "line": 53,
          "column": 16
        },
        "inner_type": {
          "name": "Uint64",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 187,
            "column": 18
          },
          "inner_type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_uint64_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
              "line": 31,
              "column": 28,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned long long",
              "kind": "primitive",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 269,
        "column": 38
      },
      "comment": "/**\n * Get the thread identifier for the current thread.\n *\n * This thread identifier is as reported by the underlying operating system.\n * If SDL is running on a platform that does not support threads the return\n * value will always be zero.\n *\n * This function also returns a valid thread ID when called from the main\n * thread.\n *\n * \\returns the ID of the current thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetThreadID\n */"
    },
    "SDL_GetCurrentTime": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "ticks",
          "type": {
            "name": "SDL_Time *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Time",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 197,
                "column": 16
              },
              "inner_type": {
                "name": "Sint64",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_stdinc.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                  "line": 181,
                  "column": 17
                },
                "inner_type": {
                  "name": "int64_t",
                  "kind": "typeAlias",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "_int64_t.h",
                    "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
                    "line": 30,
                    "column": 33,
                    "isSystem": true
                  },
                  "inner_type": {
                    "name": "long long",
                    "kind": "primitive",
                    "size_of": 8,
                    "align_of": 8,
                    "location": {
                      "fileName": "",
                      "filePath": "",
                      "isSystem": true
                    }
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_time.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
        "line": 100,
        "column": 29
      },
      "comment": "/**\n * Gets the current value of the system realtime clock in nanoseconds since\n * Jan 1, 1970 in Universal Coordinated Time (UTC).\n *\n * \\param ticks the SDL_Time to hold the returned tick count\n * \\returns 0 on success or -1 on error; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0\n */"
    },
    "SDL_GetCurrentVideoDriver": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 291,
        "column": 37
      },
      "comment": "/**\n * Get the name of the currently initialized video driver.\n *\n * \\returns the name of the current video driver or NULL if no driver has been\n *          initialized.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetNumVideoDrivers\n * \\sa SDL_GetVideoDriver\n */"
    },
    "SDL_GetCursor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Cursor *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Cursor",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_mouse.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
            "line": 43,
            "column": 16
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 440,
        "column": 37
      },
      "comment": "/**\n * Get the active cursor.\n *\n * This function returns a pointer to the current cursor which is owned by the\n * library. It is not necessary to free the cursor with SDL_DestroyCursor().\n *\n * \\returns the active cursor or NULL if there is no mouse.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetCursor\n */"
    },
    "SDL_GetDayOfWeek": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "year",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "month",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "day",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_time.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
        "line": 200,
        "column": 29
      },
      "comment": "/**\n * Get the day of week for a calendar date.\n *\n * \\param year the year component of the date\n * \\param month the month component of the date\n * \\param day the day component of the date\n * \\returns a value between 0 and 6 (0 being Sunday) if the date is valid,\n *          otherwise -1; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0\n */"
    },
    "SDL_GetDayOfYear": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "year",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "month",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "day",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_time.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
        "line": 187,
        "column": 29
      },
      "comment": "/**\n * Get the day of year for a calendar date.\n *\n * \\param year the year component of the date\n * \\param month the month component of the date\n * \\param day the day component of the date\n * \\returns the day of year [0-365] if the date is valid, otherwise -1; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0\n */"
    },
    "SDL_GetDaysInMonth": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "year",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "month",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_time.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
        "line": 174,
        "column": 29
      },
      "comment": "/**\n * Get the number of days in a month for a given year.\n *\n * \\param year the year\n * \\param month the month [1-12]\n * \\returns the number of days in the requested month, otherwise -1; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0\n */"
    },
    "SDL_GetDefaultAssertionHandler": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_AssertionHandler",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_assert.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
          "line": 230,
          "column": 35
        },
        "inner_type": {
          "name": "SDL_AssertState (const SDL_AssertData *, void *)",
          "kind": "functionPointer",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_assert.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
        "line": 273,
        "column": 46
      },
      "comment": "/**\n * Get the default assertion handler.\n *\n * This returns the function pointer that is called by default when an\n * assertion is triggered. This is an internal function provided by SDL, that\n * is used for assertions when SDL_SetAssertionHandler() hasn\u0027t been used to\n * provide a different function.\n *\n * \\returns the default SDL_AssertionHandler that is called when an assert\n *          triggers.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetAssertionHandler\n */"
    },
    "SDL_GetDefaultCursor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Cursor *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Cursor",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_mouse.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
            "line": 43,
            "column": 16
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 452,
        "column": 37
      },
      "comment": "/**\n * Get the default cursor.\n *\n * You do not have to call SDL_DestroyCursor() on the return value, but it is\n * safe to do so.\n *\n * \\returns the default cursor on success or NULL on failure.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetDesktopDisplayMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const SDL_DisplayMode *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_DisplayMode",
          "kind": "typeAlias",
          "size_of": 32,
          "align_of": 8,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 91,
            "column": 3
          },
          "inner_type": {
            "name": "SDL_DisplayMode",
            "kind": "struct",
            "size_of": 32,
            "align_of": 8,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 82,
              "column": 9
            }
          }
        }
      },
      "parameters": [
        {
          "name": "displayID",
          "type": {
            "name": "SDL_DisplayID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 44,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 44,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 526,
        "column": 48
      },
      "comment": "/**\n * Get information about the desktop\u0027s display mode.\n *\n * There\u0027s a difference between this function and SDL_GetCurrentDisplayMode()\n * when SDL runs fullscreen and has changed the resolution. In that case this\n * function will return the previous native display mode, and not the current\n * display mode.\n *\n * \\param displayID the instance ID of the display to query\n * \\returns a pointer to the desktop display mode or NULL on error; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetCurrentDisplayMode\n * \\sa SDL_GetDisplays\n */"
    },
    "SDL_GetDisplayBounds": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "displayID",
          "type": {
            "name": "SDL_DisplayID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 44,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 44,
            "column": 16
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 387,
        "column": 29
      },
      "comment": "/**\n * Get the desktop area represented by a display.\n *\n * The primary display is always located at (0,0).\n *\n * \\param displayID the instance ID of the display to query\n * \\param rect the SDL_Rect structure filled in with the display bounds\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetDisplayUsableBounds\n * \\sa SDL_GetDisplays\n */"
    },
    "SDL_GetDisplayContentScale": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "displayID",
          "type": {
            "name": "SDL_DisplayID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 44,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 44,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 455,
        "column": 31
      },
      "comment": "/**\n * Get the content scale of a display.\n *\n * The content scale is the expected scale for content based on the DPI\n * settings of the display. For example, a 4K display might have a 2.0 (200%)\n * display scale, which means that the user expects UI elements to be twice as\n * big on this display, to aid in readability.\n *\n * \\param displayID the instance ID of the display to query\n * \\returns The content scale of the display, or 0.0f on error; call\n *          SDL_GetError() for more details.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetDisplays\n */"
    },
    "SDL_GetDisplayForPoint": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_DisplayID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_video.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
          "line": 44,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "point",
          "type": {
            "name": "const SDL_Point *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Point",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 50,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Point",
                "kind": "struct",
                "size_of": 8,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 46,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 559,
        "column": 39
      },
      "comment": "/**\n * Get the display containing a point.\n *\n * \\param point the point to query\n * \\returns the instance ID of the display containing the point or 0 on\n *          failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetDisplayBounds\n * \\sa SDL_GetDisplays\n */"
    },
    "SDL_GetDisplayForRect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_DisplayID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_video.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
          "line": 44,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "rect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 574,
        "column": 39
      },
      "comment": "/**\n * Get the display primarily containing a rect.\n *\n * \\param rect the rect to query\n * \\returns the instance ID of the display entirely containing the rect or\n *          closest to the center of the rect on success or 0 on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetDisplayBounds\n * \\sa SDL_GetDisplays\n */"
    },
    "SDL_GetDisplayForWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_DisplayID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_video.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
          "line": 44,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 589,
        "column": 39
      },
      "comment": "/**\n * Get the display associated with a window.\n *\n * \\param window the window to query\n * \\returns the instance ID of the display containing the center of the window\n *          on success or 0 on failure; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetDisplayBounds\n * \\sa SDL_GetDisplays\n */"
    },
    "SDL_GetDisplayName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "displayID",
          "type": {
            "name": "SDL_DisplayID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 44,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 44,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 370,
        "column": 37
      },
      "comment": "/**\n * Get the name of a display in UTF-8 encoding.\n *\n * \\param displayID the instance ID of the display to query\n * \\returns the name of a display or NULL on failure; call SDL_GetError() for\n *          more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetDisplays\n */"
    },
    "SDL_GetDisplayProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PropertiesID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_properties.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
          "line": 42,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "displayID",
          "type": {
            "name": "SDL_DisplayID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 44,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 44,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 353,
        "column": 42
      },
      "comment": "/**\n * Get the properties associated with a display.\n *\n * The following read-only properties are provided by SDL:\n *\n * - \u0060SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN\u0060: true if the display has HDR\n *   headroom above the SDR white point. This property can change dynamically\n *   when SDL_EVENT_DISPLAY_HDR_STATE_CHANGED is sent.\n * - \u0060SDL_PROP_DISPLAY_SDR_WHITE_POINT_FLOAT\u0060: the value of SDR white in the\n *   SDL_COLORSPACE_SRGB_LINEAR colorspace. On Windows this corresponds to the\n *   SDR white level in scRGB colorspace, and on Apple platforms this is\n *   always 1.0 for EDR content. This property can change dynamically when\n *   SDL_EVENT_DISPLAY_HDR_STATE_CHANGED is sent.\n * - \u0060SDL_PROP_DISPLAY_HDR_HEADROOM_FLOAT\u0060: the additional high dynamic range\n *   that can be displayed, in terms of the SDR white point. When HDR is not\n *   enabled, this will be 1.0. This property can change dynamically when\n *   SDL_EVENT_DISPLAY_HDR_STATE_CHANGED is sent.\n *\n * \\param displayID the instance ID of the display to query\n * \\returns a valid property ID on success or 0 on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetProperty\n * \\sa SDL_SetProperty\n */"
    },
    "SDL_GetDisplays": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_DisplayID *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_DisplayID",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 44,
            "column": 16
          },
          "inner_type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "count",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 312,
        "column": 40
      },
      "comment": "/**\n * Get a list of currently connected displays.\n *\n * \\param count a pointer filled in with the number of displays returned\n * \\returns a 0 terminated array of display instance IDs which should be freed\n *          with SDL_free(), or NULL on error; call SDL_GetError() for more\n *          details.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetDisplayUsableBounds": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "displayID",
          "type": {
            "name": "SDL_DisplayID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 44,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 44,
            "column": 16
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 411,
        "column": 29
      },
      "comment": "/**\n * Get the usable desktop area represented by a display, in screen\n * coordinates.\n *\n * This is the same area as SDL_GetDisplayBounds() reports, but with portions\n * reserved by the system removed. For example, on Apple\u0027s macOS, this\n * subtracts the area occupied by the menu bar and dock.\n *\n * Setting a window to be fullscreen generally bypasses these unusable areas,\n * so these are good guidelines for the maximum space available to a\n * non-fullscreen window.\n *\n * \\param displayID the instance ID of the display to query\n * \\param rect the SDL_Rect structure filled in with the display bounds\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetDisplayBounds\n * \\sa SDL_GetDisplays\n */"
    },
    "SDL_getenv": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 505,
        "column": 31
      }
    },
    "SDL_GetError": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_error.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_error.h",
        "line": 103,
        "column": 37
      },
      "comment": "/**\n * Retrieve a message about the last error that occurred on the current\n * thread.\n *\n * It is possible for multiple errors to occur before calling SDL_GetError().\n * Only the last error is returned.\n *\n * The message is only applicable when an SDL function has signaled an error.\n * You must check the return values of SDL function calls to determine when to\n * appropriately call SDL_GetError(). You should *not* use the results of\n * SDL_GetError() to decide if an error has occurred! Sometimes SDL will set\n * an error string even when reporting success.\n *\n * SDL will *not* clear the error string for successful API calls. You *must*\n * check return values for failure cases before you can assume the error\n * string applies.\n *\n * Error strings are set per-thread, so an error set in a different thread\n * will not interfere with the current thread\u0027s operation.\n *\n * The returned string is internally allocated and must not be freed by the\n * application.\n *\n * \\returns a message with information about the specific error that occurred,\n *          or an empty string if there hasn\u0027t been an error message set since\n *          the last call to SDL_ClearError(). The message is only applicable\n *          when an SDL function has signaled an error. You must check the\n *          return values of SDL function calls to determine when to\n *          appropriately call SDL_GetError().\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ClearError\n * \\sa SDL_SetError\n */"
    },
    "SDL_GetEventFilter": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "filter",
          "type": {
            "name": "SDL_EventFilter *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_EventFilter",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 1100,
                "column": 23
              },
              "inner_type": {
                "name": "int (void *, SDL_Event *)",
                "kind": "functionPointer",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "void",
                "kind": "primitive",
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 1161,
        "column": 34
      },
      "comment": "/**\n * Query the current event filter.\n *\n * This function can be used to \u0022chain\u0022 filters, by saving the existing filter\n * before replacing it with a function that will call that saved filter.\n *\n * \\param filter the current callback function will be stored here\n * \\param userdata the pointer that is passed to the current event filter will\n *                 be stored here\n * \\returns SDL_TRUE on success or SDL_FALSE if there is no event filter set.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetEventFilter\n */"
    },
    "SDL_GetFloatProperty": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "default_value",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 385,
        "column": 31
      },
      "comment": "/**\n * Get a floating point property on a set of properties\n *\n * You can use SDL_GetPropertyType() to query whether the property exists and\n * is a floating point property.\n *\n * \\param props the properties to query\n * \\param name the name of the property to query\n * \\param default_value the default value of the property\n * \\returns the value of the property, or \u0060default_value\u0060 if it is not set or\n *          not a float property.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetPropertyType\n * \\sa SDL_HasProperty\n * \\sa SDL_SetFloatProperty\n */"
    },
    "SDL_GetFullscreenDisplayModes": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const SDL_DisplayMode **",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const SDL_DisplayMode *",
          "kind": "pointer",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          },
          "inner_type": {
            "name": "SDL_DisplayMode",
            "kind": "typeAlias",
            "size_of": 32,
            "align_of": 8,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 91,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_DisplayMode",
              "kind": "struct",
              "size_of": 32,
              "align_of": 8,
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 82,
                "column": 9
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "displayID",
          "type": {
            "name": "SDL_DisplayID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 44,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 44,
            "column": 16
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 479,
        "column": 49
      },
      "comment": "/**\n * Get a list of fullscreen display modes available on a display.\n *\n * The display modes are sorted in this priority:\n *\n * - w -\u003E largest to smallest\n * - h -\u003E largest to smallest\n * - bits per pixel -\u003E more colors to fewer colors\n * - packed pixel layout -\u003E largest to smallest\n * - refresh rate -\u003E highest to lowest\n * - pixel density -\u003E lowest to highest\n *\n * \\param displayID the instance ID of the display to query\n * \\param count a pointer filled in with the number of displays returned\n * \\returns a NULL terminated array of display mode pointers which should be\n *          freed with SDL_free(), or NULL on error; call SDL_GetError() for\n *          more details.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetDisplays\n */"
    },
    "SDL_GetGamepadAppleSFSymbolsNameForAxis": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "axis",
          "type": {
            "name": "SDL_GamepadAxis",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 171,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadAxis",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 161,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 171,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1382,
        "column": 37
      },
      "comment": "/**\n * Return the sfSymbolsName for a given axis on a gamepad on Apple platforms.\n *\n * \\param gamepad the gamepad to query\n * \\param axis an axis on the gamepad\n * \\returns the sfSymbolsName or NULL if the name can\u0027t be found\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadAppleSFSymbolsNameForButton\n */"
    },
    "SDL_GetGamepadAppleSFSymbolsNameForButton": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "button",
          "type": {
            "name": "SDL_GamepadButton",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 128,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadButton",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 98,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 128,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1369,
        "column": 37
      },
      "comment": "/**\n * Return the sfSymbolsName for a given button on a gamepad on Apple\n * platforms.\n *\n * \\param gamepad the gamepad to query\n * \\param button a button on the gamepad\n * \\returns the sfSymbolsName or NULL if the name can\u0027t be found\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadAppleSFSymbolsNameForAxis\n */"
    },
    "SDL_GetGamepadAxis": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Sint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 156,
          "column": 17
        },
        "inner_type": {
          "name": "int16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_int16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
            "line": 30,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "axis",
          "type": {
            "name": "SDL_GamepadAxis",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 171,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadAxis",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 161,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 171,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1052,
        "column": 32
      },
      "comment": "/**\n * Get the current state of an axis control on a gamepad.\n *\n * The axis indices start at index 0.\n *\n * For thumbsticks, the state is a value ranging from -32768 (up/left) to\n * 32767 (down/right).\n *\n * Triggers range from 0 when released to 32767 when fully pressed, and never\n * return a negative value. Note that this differs from the value reported by\n * the lower-level SDL_GetJoystickAxis(), which normally uses the full range.\n *\n * \\param gamepad a gamepad\n * \\param axis an axis index (one of the SDL_GamepadAxis values)\n * \\returns axis state (including 0) on success or 0 (also) on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GamepadHasAxis\n * \\sa SDL_GetGamepadButton\n */"
    },
    "SDL_GetGamepadAxisFromString": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_GamepadAxis",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_gamepad.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
          "line": 171,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_GamepadAxis",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 161,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 995,
        "column": 41
      },
      "comment": "/**\n * Convert a string into SDL_GamepadAxis enum.\n *\n * This function is called internally to translate SDL_Gamepad mapping strings\n * for the underlying joystick device into the consistent SDL_Gamepad mapping.\n * You do not normally need to call this function unless you are parsing\n * SDL_Gamepad mappings in your own code.\n *\n * Note specially that \u0022righttrigger\u0022 and \u0022lefttrigger\u0022 map to\n * \u0060SDL_GAMEPAD_AXIS_RIGHT_TRIGGER\u0060 and \u0060SDL_GAMEPAD_AXIS_LEFT_TRIGGER\u0060,\n * respectively.\n *\n * \\param str string representing a SDL_Gamepad axis\n * \\returns the SDL_GamepadAxis enum corresponding to the input string, or\n *          \u0060SDL_GAMEPAD_AXIS_INVALID\u0060 if no match was found.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadStringForAxis\n */"
    },
    "SDL_GetGamepadBindings": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_GamepadBinding **",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_GamepadBinding *",
          "kind": "pointer",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          },
          "inner_type": {
            "name": "SDL_GamepadBinding",
            "kind": "typeAlias",
            "size_of": 32,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 217,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_GamepadBinding",
              "kind": "struct",
              "size_of": 32,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 181,
                "column": 16
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 928,
        "column": 46
      },
      "comment": "/**\n * Get the SDL joystick layer bindings for a gamepad\n *\n * \\param gamepad a gamepad\n * \\param count a pointer filled in with the number of bindings returned\n * \\returns a NULL terminated array of pointers to bindings which should be\n *          freed with SDL_free(), or NULL on error; call SDL_GetError() for\n *          more details.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetGamepadButton": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint8",
        "kind": "typeAlias",
        "size_of": 1,
        "align_of": 1,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 150,
          "column": 17
        },
        "inner_type": {
          "name": "uint8_t",
          "kind": "typeAlias",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "_uint8_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
            "line": 31,
            "column": 23,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned char",
            "kind": "primitive",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "button",
          "type": {
            "name": "SDL_GamepadButton",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 128,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadButton",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 98,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 128,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1117,
        "column": 31
      },
      "comment": "/**\n * Get the current state of a button on a gamepad.\n *\n * \\param gamepad a gamepad\n * \\param button a button index (one of the SDL_GamepadButton values)\n * \\returns 1 for pressed state or 0 for not pressed state or error; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GamepadHasButton\n * \\sa SDL_GetGamepadAxis\n */"
    },
    "SDL_GetGamepadButtonFromString": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_GamepadButton",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_gamepad.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
          "line": 128,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_GamepadButton",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 98,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1070,
        "column": 43
      },
      "comment": "/**\n * Convert a string into an SDL_GamepadButton enum.\n *\n * This function is called internally to translate SDL_Gamepad mapping strings\n * for the underlying joystick device into the consistent SDL_Gamepad mapping.\n * You do not normally need to call this function unless you are parsing\n * SDL_Gamepad mappings in your own code.\n *\n * \\param str string representing a SDL_Gamepad axis\n * \\returns the SDL_GamepadButton enum corresponding to the input string, or\n *          \u0060SDL_GAMEPAD_BUTTON_INVALID\u0060 if no match was found.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadStringForButton\n */"
    },
    "SDL_GetGamepadButtonLabel": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_GamepadButtonLabel",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_gamepad.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
          "line": 148,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_GamepadButtonLabel",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 137,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "button",
          "type": {
            "name": "SDL_GamepadButton",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 128,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadButton",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 98,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 128,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1143,
        "column": 48
      },
      "comment": "/**\n * Get the label of a button on a gamepad.\n *\n * \\param gamepad a gamepad\n * \\param button a button index (one of the SDL_GamepadButton values)\n * \\returns the SDL_GamepadButtonLabel enum corresponding to the button label\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadButtonLabelForType\n */"
    },
    "SDL_GetGamepadButtonLabelForType": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_GamepadButtonLabel",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_gamepad.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
          "line": 148,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_GamepadButtonLabel",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 137,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "type",
          "type": {
            "name": "SDL_GamepadType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 76,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 62,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 76,
            "column": 3
          }
        },
        {
          "name": "button",
          "type": {
            "name": "SDL_GamepadButton",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 128,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadButton",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 98,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 128,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1130,
        "column": 48
      },
      "comment": "/**\n * Get the label of a button on a gamepad.\n *\n * \\param type the type of gamepad to check\n * \\param button a button index (one of the SDL_GamepadButton values)\n * \\returns the SDL_GamepadButtonLabel enum corresponding to the button label\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadButtonLabel\n */"
    },
    "SDL_GetGamepadFirmwareVersion": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 162,
          "column": 18
        },
        "inner_type": {
          "name": "uint16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_uint16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
            "line": 31,
            "column": 24,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 817,
        "column": 32
      },
      "comment": "/**\n * Get the firmware version of an opened gamepad, if available.\n *\n * If the firmware version isn\u0027t available this function returns 0.\n *\n * \\param gamepad the gamepad object to query.\n * \\returns the gamepad firmware version, or zero if unavailable.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetGamepadFromInstanceID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Gamepad *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Gamepad",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 59,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 619,
        "column": 38
      },
      "comment": "/**\n * Get the SDL_Gamepad associated with a joystick instance ID, if it has been\n * opened.\n *\n * \\param instance_id the joystick instance ID of the gamepad\n * \\returns an SDL_Gamepad on success or NULL on failure or if it hasn\u0027t been\n *          opened yet; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetGamepadFromPlayerIndex": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Gamepad *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Gamepad",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 59,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "player_index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 632,
        "column": 38
      },
      "comment": "/**\n * Get the SDL_Gamepad associated with a player index.\n *\n * \\param player_index the player index, which different from the instance ID\n * \\returns the SDL_Gamepad associated with a player index.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadPlayerIndex\n * \\sa SDL_SetGamepadPlayerIndex\n */"
    },
    "SDL_GetGamepadInstanceGUID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_JoystickGUID",
        "kind": "typeAlias",
        "size_of": 16,
        "align_of": 1,
        "location": {
          "fileName": "SDL_joystick.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
          "line": 75,
          "column": 18
        },
        "inner_type": {
          "name": "SDL_GUID",
          "kind": "typeAlias",
          "size_of": 16,
          "align_of": 1,
          "location": {
            "fileName": "SDL_guid.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
            "line": 57,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_GUID",
            "kind": "struct",
            "size_of": 16,
            "align_of": 1,
            "location": {
              "fileName": "SDL_guid.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
              "line": 55,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 494,
        "column": 42
      },
      "comment": "/**\n * Get the implementation-dependent GUID of a gamepad.\n *\n * This can be called before any gamepads are opened.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the GUID of the selected gamepad. If called on an invalid index,\n *          this function returns a zero GUID\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadGUID\n * \\sa SDL_GetGamepadGUIDString\n * \\sa SDL_GetGamepads\n */"
    },
    "SDL_GetGamepadInstanceID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_JoystickID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_joystick.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
          "line": 84,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 680,
        "column": 40
      },
      "comment": "/**\n * Get the instance ID of an opened gamepad.\n *\n * \\param gamepad a gamepad identifier previously returned by\n *                SDL_OpenGamepad()\n * \\returns the instance ID of the specified gamepad on success or 0 on\n *          failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetGamepadInstanceMapping": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 593,
        "column": 31
      },
      "comment": "/**\n * Get the mapping of a gamepad.\n *\n * This can be called before any gamepads are opened.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the mapping string. Must be freed with SDL_free(). Returns NULL if\n *          no mapping is available.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepads\n * \\sa SDL_GetGamepadMapping\n */"
    },
    "SDL_GetGamepadInstanceName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 446,
        "column": 37
      },
      "comment": "/**\n * Get the implementation dependent name of a gamepad.\n *\n * This can be called before any gamepads are opened.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the name of the selected gamepad. If no name can be found, this\n *          function returns NULL; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadName\n * \\sa SDL_GetGamepads\n */"
    },
    "SDL_GetGamepadInstancePath": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 462,
        "column": 37
      },
      "comment": "/**\n * Get the implementation dependent path of a gamepad.\n *\n * This can be called before any gamepads are opened.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the path of the selected gamepad. If no path can be found, this\n *          function returns NULL; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadPath\n * \\sa SDL_GetGamepads\n */"
    },
    "SDL_GetGamepadInstancePlayerIndex": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 477,
        "column": 29
      },
      "comment": "/**\n * Get the player index of a gamepad.\n *\n * This can be called before any gamepads are opened.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the player index of a gamepad, or -1 if it\u0027s not available\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadPlayerIndex\n * \\sa SDL_GetGamepads\n */"
    },
    "SDL_GetGamepadInstanceProduct": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 162,
          "column": 18
        },
        "inner_type": {
          "name": "uint16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_uint16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
            "line": 31,
            "column": 24,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 528,
        "column": 32
      },
      "comment": "/**\n * Get the USB product ID of a gamepad, if available.\n *\n * This can be called before any gamepads are opened. If the product ID isn\u0027t\n * available this function returns 0.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the USB product ID of the selected gamepad. If called on an\n *          invalid index, this function returns zero\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadProduct\n * \\sa SDL_GetGamepads\n */"
    },
    "SDL_GetGamepadInstanceProductVersion": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 162,
          "column": 18
        },
        "inner_type": {
          "name": "uint16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_uint16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
            "line": 31,
            "column": 24,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 545,
        "column": 32
      },
      "comment": "/**\n * Get the product version of a gamepad, if available.\n *\n * This can be called before any gamepads are opened. If the product version\n * isn\u0027t available this function returns 0.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the product version of the selected gamepad. If called on an\n *          invalid index, this function returns zero\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadProductVersion\n * \\sa SDL_GetGamepads\n */"
    },
    "SDL_GetGamepadInstanceType": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_GamepadType",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_gamepad.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
          "line": 76,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_GamepadType",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 62,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 561,
        "column": 41
      },
      "comment": "/**\n * Get the type of a gamepad.\n *\n * This can be called before any gamepads are opened.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the gamepad type.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadType\n * \\sa SDL_GetGamepads\n * \\sa SDL_GetRealGamepadInstanceType\n */"
    },
    "SDL_GetGamepadInstanceVendor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 162,
          "column": 18
        },
        "inner_type": {
          "name": "uint16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_uint16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
            "line": 31,
            "column": 24,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 511,
        "column": 32
      },
      "comment": "/**\n * Get the USB vendor ID of a gamepad, if available.\n *\n * This can be called before any gamepads are opened. If the vendor ID isn\u0027t\n * available this function returns 0.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the USB vendor ID of the selected gamepad. If called on an invalid\n *          index, this function returns zero\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadVendor\n * \\sa SDL_GetGamepads\n */"
    },
    "SDL_GetGamepadJoystick": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Joystick *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Joystick",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 71,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 885,
        "column": 39
      },
      "comment": "/**\n * Get the underlying joystick from a gamepad\n *\n * This function will give you a SDL_Joystick object, which allows you to use\n * the SDL_Joystick functions with a SDL_Gamepad object. This would be useful\n * for getting a joystick\u0027s position at any given time, even if it hasn\u0027t\n * moved (moving it would produce an event, which would have the axis\u0027 value).\n *\n * The pointer returned is owned by the SDL_Gamepad. You should not call\n * SDL_CloseJoystick() on it, for example, since doing so will likely cause\n * SDL to crash.\n *\n * \\param gamepad the gamepad object that you want to get a joystick from\n * \\returns an SDL_Joystick object; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetGamepadMapping": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 372,
        "column": 32
      },
      "comment": "/**\n * Get the current mapping of a gamepad.\n *\n * The returned string must be freed with SDL_free().\n *\n * Details about mappings are discussed with SDL_AddGamepadMapping().\n *\n * \\param gamepad the gamepad you want to get the current mapping for\n * \\returns a string that has the gamepad\u0027s mapping or NULL if no mapping is\n *          available; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AddGamepadMapping\n * \\sa SDL_GetGamepadInstanceMapping\n * \\sa SDL_GetGamepadMappingForGUID\n * \\sa SDL_SetGamepadMapping\n */"
    },
    "SDL_GetGamepadMappingForGUID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "guid",
          "type": {
            "name": "SDL_JoystickGUID",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 1,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 75,
              "column": 18
            },
            "inner_type": {
              "name": "SDL_GUID",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 1,
              "location": {
                "fileName": "SDL_guid.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
                "line": 57,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_GUID",
                "kind": "struct",
                "size_of": 16,
                "align_of": 1,
                "location": {
                  "fileName": "SDL_guid.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
                  "line": 55,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 75,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 352,
        "column": 32
      },
      "comment": "/**\n * Get the gamepad mapping string for a given GUID.\n *\n * The returned string must be freed with SDL_free().\n *\n * \\param guid a structure containing the GUID for which a mapping is desired\n * \\returns a mapping string or NULL on error; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickInstanceGUID\n * \\sa SDL_GetJoystickGUID\n */"
    },
    "SDL_GetGamepadMappings": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char **",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char *",
          "kind": "pointer",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          },
          "inner_type": {
            "name": "char",
            "kind": "primitive",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "count",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 336,
        "column": 33
      },
      "comment": "/**\n * Get the current gamepad mappings.\n *\n * You must free the returned pointer with SDL_free() when you are done with\n * it, but you do _not_ free each string in the array.\n *\n * \\param count a pointer filled in with the number of mappings returned, can\n *              be NULL.\n * \\returns an array of the mapping strings, NULL-terminated. Must be freed\n *          with SDL_free(). Returns NULL on error.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetGamepadName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 694,
        "column": 37
      },
      "comment": "/**\n * Get the implementation-dependent name for an opened gamepad.\n *\n * \\param gamepad a gamepad identifier previously returned by\n *                SDL_OpenGamepad()\n * \\returns the implementation dependent name for the gamepad, or NULL if\n *          there is no name or the identifier passed is invalid.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadInstanceName\n */"
    },
    "SDL_GetGamepadPath": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 708,
        "column": 37
      },
      "comment": "/**\n * Get the implementation-dependent path for an opened gamepad.\n *\n * \\param gamepad a gamepad identifier previously returned by\n *                SDL_OpenGamepad()\n * \\returns the implementation dependent path for the gamepad, or NULL if\n *          there is no path or the identifier passed is invalid.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadInstancePath\n */"
    },
    "SDL_GetGamepadPlayerIndex": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 748,
        "column": 29
      },
      "comment": "/**\n * Get the player index of an opened gamepad.\n *\n * For XInput gamepads this returns the XInput user index.\n *\n * \\param gamepad the gamepad object to query.\n * \\returns the player index for gamepad, or -1 if it\u0027s not available.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetGamepadPlayerIndex\n */"
    },
    "SDL_GetGamepadPowerLevel": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_JoystickPowerLevel",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_joystick.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
          "line": 109,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_JoystickPowerLevel",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 100,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 854,
        "column": 48
      },
      "comment": "/**\n * Get the battery level of a gamepad, if available.\n *\n * \\param gamepad a gamepad identifier previously returned by\n *                SDL_OpenGamepad()\n * \\returns the current battery level as SDL_JoystickPowerLevel on success or\n *          \u0060SDL_JOYSTICK_POWER_UNKNOWN\u0060 if it is unknown\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetGamepadProduct": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 162,
          "column": 18
        },
        "inner_type": {
          "name": "uint16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_uint16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
            "line": 31,
            "column": 24,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 791,
        "column": 32
      },
      "comment": "/**\n * Get the USB product ID of an opened gamepad, if available.\n *\n * If the product ID isn\u0027t available this function returns 0.\n *\n * \\param gamepad the gamepad object to query.\n * \\returns the USB product ID, or zero if unavailable.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadInstanceProduct\n */"
    },
    "SDL_GetGamepadProductVersion": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 162,
          "column": 18
        },
        "inner_type": {
          "name": "uint16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_uint16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
            "line": 31,
            "column": 24,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 805,
        "column": 32
      },
      "comment": "/**\n * Get the product version of an opened gamepad, if available.\n *\n * If the product version isn\u0027t available this function returns 0.\n *\n * \\param gamepad the gamepad object to query.\n * \\returns the USB product version, or zero if unavailable.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadInstanceProductVersion\n */"
    },
    "SDL_GetGamepadProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PropertiesID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_properties.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
          "line": 42,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 662,
        "column": 42
      },
      "comment": "/**\n * Get the properties associated with an opened gamepad.\n *\n * These properties are shared with the underlying joystick object.\n *\n * The following read-only properties are provided by SDL:\n *\n * - \u0060SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN\u0060: true if this gamepad has an LED\n *   that has adjustable brightness\n * - \u0060SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN\u0060: true if this gamepad has an LED\n *   that has adjustable color\n * - \u0060SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN\u0060: true if this gamepad has a\n *   player LED\n * - \u0060SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN\u0060: true if this gamepad has\n *   left/right rumble\n * - \u0060SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN\u0060: true if this gamepad has\n *   simple trigger rumble\n *\n * \\param gamepad a gamepad identifier previously returned by\n *                SDL_OpenGamepad()\n * \\returns a valid property ID on success or 0 on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetProperty\n * \\sa SDL_SetProperty\n */"
    },
    "SDL_GetGamepads": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_JoystickID *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_JoystickID",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          },
          "inner_type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "count",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 416,
        "column": 41
      },
      "comment": "/**\n * Get a list of currently connected gamepads.\n *\n * \\param count a pointer filled in with the number of gamepads returned\n * \\returns a 0 terminated array of joystick instance IDs which should be\n *          freed with SDL_free(), or NULL on error; call SDL_GetError() for\n *          more details.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasGamepad\n * \\sa SDL_OpenGamepad\n */"
    },
    "SDL_GetGamepadSensorData": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "type",
          "type": {
            "name": "SDL_SensorType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_sensor.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
              "line": 79,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_SensorType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_sensor.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
                "line": 69,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_sensor.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
            "line": 79,
            "column": 3
          }
        },
        {
          "name": "data",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "num_values",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1261,
        "column": 29
      },
      "comment": "/**\n * Get the current state of a gamepad sensor.\n *\n * The number of values and interpretation of the data is sensor dependent.\n * See SDL_sensor.h for the details for each type of sensor.\n *\n * \\param gamepad The gamepad to query\n * \\param type The type of sensor to query\n * \\param data A pointer filled with the current sensor state\n * \\param num_values The number of values to write to data\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetGamepadSensorDataRate": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "type",
          "type": {
            "name": "SDL_SensorType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_sensor.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
              "line": 79,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_SensorType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_sensor.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
                "line": 69,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_sensor.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
            "line": 79,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1244,
        "column": 31
      },
      "comment": "/**\n * Get the data rate (number of events per second) of a gamepad sensor.\n *\n * \\param gamepad The gamepad to query\n * \\param type The type of sensor to query\n * \\returns the data rate, or 0.0f if the data rate is not available.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetGamepadSerial": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 829,
        "column": 38
      },
      "comment": "/**\n * Get the serial number of an opened gamepad, if available.\n *\n * Returns the serial number of the gamepad, or NULL if it is not available.\n *\n * \\param gamepad the gamepad object to query.\n * \\returns the serial number, or NULL if unavailable.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetGamepadSteamHandle": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint64",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 187,
          "column": 18
        },
        "inner_type": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_uint64_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
            "line": 31,
            "column": 28,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 842,
        "column": 32
      },
      "comment": "/**\n * Get the Steam Input handle of an opened gamepad, if available.\n *\n * Returns an InputHandle_t for the gamepad that can be used with Steam Input\n * API: https://partner.steamgames.com/doc/api/ISteamInput\n *\n * \\param gamepad the gamepad object to query.\n * \\returns the gamepad handle, or 0 if unavailable.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetGamepadStringForAxis": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "axis",
          "type": {
            "name": "SDL_GamepadAxis",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 171,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadAxis",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 161,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 171,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1011,
        "column": 38
      },
      "comment": "/**\n * Convert from an SDL_GamepadAxis enum to a string.\n *\n * The caller should not SDL_free() the returned string.\n *\n * \\param axis an enum value for a given SDL_GamepadAxis\n * \\returns a string for the given axis, or NULL if an invalid axis is\n *          specified. The string returned is of the format used by\n *          SDL_Gamepad mapping strings.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadAxisFromString\n */"
    },
    "SDL_GetGamepadStringForButton": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "button",
          "type": {
            "name": "SDL_GamepadButton",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 128,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadButton",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 98,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 128,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1086,
        "column": 37
      },
      "comment": "/**\n * Convert from an SDL_GamepadButton enum to a string.\n *\n * The caller should not SDL_free() the returned string.\n *\n * \\param button an enum value for a given SDL_GamepadButton\n * \\returns a string for the given button, or NULL if an invalid button is\n *          specified. The string returned is of the format used by\n *          SDL_Gamepad mapping strings.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadButtonFromString\n */"
    },
    "SDL_GetGamepadStringForType": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "type",
          "type": {
            "name": "SDL_GamepadType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 76,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 62,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 76,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 973,
        "column": 37
      },
      "comment": "/**\n * Convert from an SDL_GamepadType enum to a string.\n *\n * The caller should not SDL_free() the returned string.\n *\n * \\param type an enum value for a given SDL_GamepadType\n * \\returns a string for the given type, or NULL if an invalid type is\n *          specified. The string returned is of the format used by\n *          SDL_Gamepad mapping strings.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadTypeFromString\n */"
    },
    "SDL_GetGamepadTouchpadFinger": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "touchpad",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "finger",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "state",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "x",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "pressure",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1189,
        "column": 29
      },
      "comment": "/**\n * Get the current state of a finger on a touchpad on a gamepad.\n *\n * \\param gamepad a gamepad\n * \\param touchpad a touchpad\n * \\param finger a finger\n * \\param state filled with state\n * \\param x filled with x position\n * \\param y filled with y position\n * \\param pressure filled with pressure value\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetNumGamepadTouchpadFingers\n */"
    },
    "SDL_GetGamepadType": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_GamepadType",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_gamepad.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
          "line": 76,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_GamepadType",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 62,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 721,
        "column": 41
      },
      "comment": "/**\n * Get the type of an opened gamepad.\n *\n * \\param gamepad the gamepad object to query.\n * \\returns the gamepad type, or SDL_GAMEPAD_TYPE_UNKNOWN if it\u0027s not\n *          available.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadInstanceType\n */"
    },
    "SDL_GetGamepadTypeFromString": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_GamepadType",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_gamepad.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
          "line": 76,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_GamepadType",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 62,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 957,
        "column": 41
      },
      "comment": "/**\n * Convert a string into SDL_GamepadType enum.\n *\n * This function is called internally to translate SDL_Gamepad mapping strings\n * for the underlying joystick device into the consistent SDL_Gamepad mapping.\n * You do not normally need to call this function unless you are parsing\n * SDL_Gamepad mappings in your own code.\n *\n * \\param str string representing a SDL_GamepadType type\n * \\returns the SDL_GamepadType enum corresponding to the input string, or\n *          \u0060SDL_GAMEPAD_TYPE_UNKNOWN\u0060 if no match was found.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadStringForType\n */"
    },
    "SDL_GetGamepadVendor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 162,
          "column": 18
        },
        "inner_type": {
          "name": "uint16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_uint16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
            "line": 31,
            "column": 24,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 777,
        "column": 32
      },
      "comment": "/**\n * Get the USB vendor ID of an opened gamepad, if available.\n *\n * If the vendor ID isn\u0027t available this function returns 0.\n *\n * \\param gamepad the gamepad object to query.\n * \\returns the USB vendor ID, or zero if unavailable.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadInstanceVendor\n */"
    },
    "SDL_GetGlobalMouseState": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 189,
        "column": 32
      },
      "comment": "/**\n * Get the current state of the mouse in relation to the desktop.\n *\n * This works similarly to SDL_GetMouseState(), but the coordinates will be\n * reported relative to the top-left of the desktop. This can be useful if you\n * need to track the mouse outside of a specific window and SDL_CaptureMouse()\n * doesn\u0027t fit your needs. For example, it could be useful if you need to\n * track the mouse while dragging a window, where coordinates relative to a\n * window might not be in sync at all times.\n *\n * Note: SDL_GetMouseState() returns the mouse position as SDL understands it\n * from the last pump of the event queue. This function, however, queries the\n * OS for the current mouse position, and as such, might be a slightly less\n * efficient function. Unless you know what you\u0027re doing and have a good\n * reason to use this function, you probably want SDL_GetMouseState() instead.\n *\n * \\param x filled in with the current X coord relative to the desktop; can be\n *          NULL\n * \\param y filled in with the current Y coord relative to the desktop; can be\n *          NULL\n * \\returns the current button state as a bitmask which can be tested using\n *          the SDL_BUTTON(X) macros.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CaptureMouse\n * \\sa SDL_GetMouseState\n */"
    },
    "SDL_GetGlobalProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PropertiesID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_properties.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
          "line": 42,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 68,
        "column": 42
      },
      "comment": "/**\n * Get the global SDL properties\n *\n * \\returns a valid property ID on success or 0 on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetProperty\n * \\sa SDL_SetProperty\n */"
    },
    "SDL_GetGrabbedWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Window *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Window",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 108,
            "column": 16
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1861,
        "column": 37
      },
      "comment": "/**\n * Get the window that currently has an input grab enabled.\n *\n * \\returns the window if input is grabbed or NULL otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetWindowMouseGrab\n * \\sa SDL_SetWindowKeyboardGrab\n */"
    },
    "SDL_GetHapticEffectStatus": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "effect",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1197,
        "column": 29
      },
      "comment": "/**\n * Get the status of the current effect on the specified haptic device.\n *\n * Device must support the SDL_HAPTIC_STATUS feature.\n *\n * \\param haptic the SDL_Haptic device to query for the effect status on\n * \\param effect the ID of the haptic effect to query its status\n * \\returns 0 if it isn\u0027t playing, 1 if it is playing, or a negative error\n *          code on failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetHapticFeatures": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1059,
        "column": 32
      },
      "comment": "/**\n * Get the haptic device\u0027s supported features in bitwise manner.\n *\n * \\param haptic the SDL_Haptic device to query\n * \\returns a list of supported haptic features in bitwise manner (OR\u0027d), or 0\n *          on failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HapticEffectSupported\n * \\sa SDL_GetMaxHapticEffects\n */"
    },
    "SDL_GetHapticFromInstanceID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Haptic *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Haptic",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 146,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_HapticID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_haptic.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
              "line": 845,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 845,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 916,
        "column": 37
      },
      "comment": "/**\n * Get the SDL_Haptic associated with an instance ID, if it has been opened.\n *\n * \\param instance_id the instance ID to get the SDL_Haptic for\n * \\returns an SDL_Haptic on success or NULL on failure or if it hasn\u0027t been\n *          opened yet; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetHapticInstanceID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_HapticID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_haptic.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
          "line": 845,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 927,
        "column": 38
      },
      "comment": "/**\n * Get the instance ID of an opened haptic device.\n *\n * \\param haptic the SDL_Haptic device to query\n * \\returns the instance ID of the specified haptic device on success or 0 on\n *          failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetHapticInstanceName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_HapticID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_haptic.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
              "line": 845,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 845,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 879,
        "column": 37
      },
      "comment": "/**\n * Get the implementation dependent name of a haptic device.\n *\n * This can be called before any haptic devices are opened.\n *\n * \\param instance_id the haptic device instance ID\n * \\returns the name of the selected haptic device. If no name can be found,\n *          this function returns NULL; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetHapticName\n * \\sa SDL_OpenHaptic\n */"
    },
    "SDL_GetHapticName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 941,
        "column": 37
      },
      "comment": "/**\n * Get the implementation dependent name of a haptic device.\n *\n * \\param haptic the SDL_Haptic obtained from SDL_OpenJoystick()\n * \\returns the name of the selected haptic device. If no name can be found,\n *          this function returns NULL; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetHapticInstanceName\n */"
    },
    "SDL_GetHaptics": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_HapticID *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_HapticID",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 845,
            "column": 16
          },
          "inner_type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "count",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 862,
        "column": 39
      },
      "comment": "/**\n * Get a list of currently connected haptic devices.\n *\n * \\param count a pointer filled in with the number of haptic devices returned\n * \\returns a 0 terminated array of haptic device instance IDs which should be\n *          freed with SDL_free(), or NULL on error; call SDL_GetError() for\n *          more details.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_OpenHaptic\n */"
    },
    "SDL_GetHint": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2665,
        "column": 38
      },
      "comment": "/**\n * Get the value of a hint.\n *\n * \\param name the hint to query\n * \\returns the string value of a hint or NULL if the hint isn\u0027t set.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetHint\n * \\sa SDL_SetHintWithPriority\n */"
    },
    "SDL_GetHintBoolean": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "default_value",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2680,
        "column": 34
      },
      "comment": "/**\n * Get the boolean value of a hint variable.\n *\n * \\param name the name of the hint to get the boolean value from\n * \\param default_value the value to return if the hint does not exist\n * \\returns the boolean value of a hint or the provided default value if the\n *          hint does not exist.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetHint\n * \\sa SDL_SetHint\n */"
    },
    "SDL_GetJoystickAxis": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Sint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 156,
          "column": 17
        },
        "inner_type": {
          "name": "int16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_int16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
            "line": 30,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "axis",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 897,
        "column": 32
      },
      "comment": "/**\n * Get the current state of an axis control on a joystick.\n *\n * SDL makes no promises about what part of the joystick any given axis refers\n * to. Your game should have some sort of configuration UI to let users\n * specify what each axis should be bound to. Alternately, SDL\u0027s higher-level\n * Game Controller API makes a great effort to apply order to this lower-level\n * interface, so you know that a specific axis is the \u0022left thumb stick,\u0022 etc.\n *\n * The value returned by SDL_GetJoystickAxis() is a signed integer (-32768 to\n * 32767) representing the current position of the axis. It may be necessary\n * to impose certain tolerances on these values to account for jitter.\n *\n * \\param joystick an SDL_Joystick structure containing joystick information\n * \\param axis the axis to query; the axis indices start at index 0\n * \\returns a 16-bit signed integer representing the current position of the\n *          axis or 0 on failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetNumJoystickAxes\n */"
    },
    "SDL_GetJoystickAxisInitialState": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "axis",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "state",
          "type": {
            "name": "Sint16 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Sint16",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 156,
                "column": 17
              },
              "inner_type": {
                "name": "int16_t",
                "kind": "typeAlias",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "_int16_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
                  "line": 30,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "short",
                  "kind": "primitive",
                  "size_of": 2,
                  "align_of": 2,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 913,
        "column": 34
      },
      "comment": "/**\n * Get the initial state of an axis control on a joystick.\n *\n * The state is a value ranging from -32768 to 32767.\n *\n * The axis indices start at index 0.\n *\n * \\param joystick an SDL_Joystick structure containing joystick information\n * \\param axis the axis to query; the axis indices start at index 0\n * \\param state Upon return, the initial value is supplied here.\n * \\returns SDL_TRUE if this axis has any initial value, or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetJoystickBall": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "ball",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dx",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dy",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 934,
        "column": 29
      },
      "comment": "/**\n * Get the ball axis change since the last poll.\n *\n * Trackballs can only return relative motion since the last call to\n * SDL_GetJoystickBall(), these motion deltas are placed into \u0060dx\u0060 and \u0060dy\u0060.\n *\n * Most joysticks do not have trackballs.\n *\n * \\param joystick the SDL_Joystick to query\n * \\param ball the ball index to query; ball indices start at index 0\n * \\param dx stores the difference in the x axis position since the last poll\n * \\param dy stores the difference in the y axis position since the last poll\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetNumJoystickBalls\n */"
    },
    "SDL_GetJoystickButton": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint8",
        "kind": "typeAlias",
        "size_of": 1,
        "align_of": 1,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 150,
          "column": 17
        },
        "inner_type": {
          "name": "uint8_t",
          "kind": "typeAlias",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "_uint8_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
            "line": 31,
            "column": 23,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned char",
            "kind": "primitive",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "button",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 988,
        "column": 31
      },
      "comment": "/**\n * Get the current state of a button on a joystick.\n *\n * \\param joystick an SDL_Joystick structure containing joystick information\n * \\param button the button index to get the state from; indices start at\n *               index 0\n * \\returns 1 if the specified button is pressed, 0 otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetNumJoystickButtons\n */"
    },
    "SDL_GetJoystickFirmwareVersion": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 162,
          "column": 18
        },
        "inner_type": {
          "name": "uint16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_uint16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
            "line": 31,
            "column": 24,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 656,
        "column": 32
      },
      "comment": "/**\n * Get the firmware version of an opened joystick, if available.\n *\n * If the firmware version isn\u0027t available this function returns 0.\n *\n * \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n * \\returns the firmware version of the selected joystick, or 0 if\n *          unavailable.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetJoystickFromInstanceID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Joystick *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Joystick",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 71,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 322,
        "column": 39
      },
      "comment": "/**\n * Get the SDL_Joystick associated with an instance ID, if it has been opened.\n *\n * \\param instance_id the instance ID to get the SDL_Joystick for\n * \\returns an SDL_Joystick on success or NULL on failure or if it hasn\u0027t been\n *          opened yet; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetJoystickFromPlayerIndex": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Joystick *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Joystick",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 71,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "player_index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 336,
        "column": 39
      },
      "comment": "/**\n * Get the SDL_Joystick associated with a player index.\n *\n * \\param player_index the player index to get the SDL_Joystick for\n * \\returns an SDL_Joystick on success or NULL on failure; call SDL_GetError()\n *          for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickPlayerIndex\n * \\sa SDL_SetJoystickPlayerIndex\n */"
    },
    "SDL_GetJoystickGUID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_JoystickGUID",
        "kind": "typeAlias",
        "size_of": 16,
        "align_of": 1,
        "location": {
          "fileName": "SDL_joystick.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
          "line": 75,
          "column": 18
        },
        "inner_type": {
          "name": "SDL_GUID",
          "kind": "typeAlias",
          "size_of": 16,
          "align_of": 1,
          "location": {
            "fileName": "SDL_guid.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
            "line": 57,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_GUID",
            "kind": "struct",
            "size_of": 16,
            "align_of": 1,
            "location": {
              "fileName": "SDL_guid.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
              "line": 55,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 601,
        "column": 42
      },
      "comment": "/**\n * Get the implementation-dependent GUID for the joystick.\n *\n * This function requires an open joystick.\n *\n * \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n * \\returns the GUID of the given joystick. If called on an invalid index,\n *          this function returns a zero GUID; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickInstanceGUID\n * \\sa SDL_GetJoystickGUIDString\n */"
    },
    "SDL_GetJoystickGUIDFromString": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_JoystickGUID",
        "kind": "typeAlias",
        "size_of": 16,
        "align_of": 1,
        "location": {
          "fileName": "SDL_joystick.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
          "line": 75,
          "column": 18
        },
        "inner_type": {
          "name": "SDL_GUID",
          "kind": "typeAlias",
          "size_of": 16,
          "align_of": 1,
          "location": {
            "fileName": "SDL_guid.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
            "line": 57,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_GUID",
            "kind": "struct",
            "size_of": 16,
            "align_of": 1,
            "location": {
              "fileName": "SDL_guid.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
              "line": 55,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "pchGUID",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 716,
        "column": 42
      },
      "comment": "/**\n * Convert a GUID string into a SDL_JoystickGUID structure.\n *\n * Performs no error checking. If this function is given a string containing\n * an invalid GUID, the function will silently succeed, but the GUID generated\n * will not be useful.\n *\n * \\param pchGUID string containing an ASCII representation of a GUID\n * \\returns a SDL_JoystickGUID structure.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickGUIDString\n */"
    },
    "SDL_GetJoystickGUIDInfo": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "guid",
          "type": {
            "name": "SDL_JoystickGUID",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 1,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 75,
              "column": 18
            },
            "inner_type": {
              "name": "SDL_GUID",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 1,
              "location": {
                "fileName": "SDL_guid.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
                "line": 57,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_GUID",
                "kind": "struct",
                "size_of": 16,
                "align_of": 1,
                "location": {
                  "fileName": "SDL_guid.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
                  "line": 55,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 75,
            "column": 18
          }
        },
        {
          "name": "vendor",
          "type": {
            "name": "Uint16 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint16",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 162,
                "column": 18
              },
              "inner_type": {
                "name": "uint16_t",
                "kind": "typeAlias",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "_uint16_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                  "line": 31,
                  "column": 24,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned short",
                  "kind": "primitive",
                  "size_of": 2,
                  "align_of": 2,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "product",
          "type": {
            "name": "Uint16 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint16",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 162,
                "column": 18
              },
              "inner_type": {
                "name": "uint16_t",
                "kind": "typeAlias",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "_uint16_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                  "line": 31,
                  "column": 24,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned short",
                  "kind": "primitive",
                  "size_of": 2,
                  "align_of": 2,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "version",
          "type": {
            "name": "Uint16 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint16",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 162,
                "column": 18
              },
              "inner_type": {
                "name": "uint16_t",
                "kind": "typeAlias",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "_uint16_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                  "line": 31,
                  "column": 24,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned short",
                  "kind": "primitive",
                  "size_of": 2,
                  "align_of": 2,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "crc16",
          "type": {
            "name": "Uint16 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint16",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 162,
                "column": 18
              },
              "inner_type": {
                "name": "uint16_t",
                "kind": "typeAlias",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "_uint16_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                  "line": 31,
                  "column": 24,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned short",
                  "kind": "primitive",
                  "size_of": 2,
                  "align_of": 2,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 735,
        "column": 30
      },
      "comment": "/**\n * Get the device information encoded in a SDL_JoystickGUID structure\n *\n * \\param guid the SDL_JoystickGUID you wish to get info about\n * \\param vendor A pointer filled in with the device VID, or 0 if not\n *               available\n * \\param product A pointer filled in with the device PID, or 0 if not\n *                available\n * \\param version A pointer filled in with the device version, or 0 if not\n *                available\n * \\param crc16 A pointer filled in with a CRC used to distinguish different\n *              products with the same VID/PID, or 0 if not available\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickInstanceGUID\n */"
    },
    "SDL_GetJoystickGUIDString": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "guid",
          "type": {
            "name": "SDL_JoystickGUID",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 1,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 75,
              "column": 18
            },
            "inner_type": {
              "name": "SDL_GUID",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 1,
              "location": {
                "fileName": "SDL_guid.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
                "line": 57,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_GUID",
                "kind": "struct",
                "size_of": 16,
                "align_of": 1,
                "location": {
                  "fileName": "SDL_guid.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
                  "line": 55,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 75,
            "column": 18
          }
        },
        {
          "name": "pszGUID",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "cbGUID",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 700,
        "column": 29
      },
      "comment": "/**\n * Get an ASCII string representation for a given SDL_JoystickGUID.\n *\n * You should supply at least 33 bytes for pszGUID.\n *\n * \\param guid the SDL_JoystickGUID you wish to convert to string\n * \\param pszGUID buffer in which to write the ASCII string\n * \\param cbGUID the size of pszGUID\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickInstanceGUID\n * \\sa SDL_GetJoystickGUID\n * \\sa SDL_GetJoystickGUIDFromString\n */"
    },
    "SDL_GetJoystickHat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint8",
        "kind": "typeAlias",
        "size_of": 1,
        "align_of": 1,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 150,
          "column": 17
        },
        "inner_type": {
          "name": "uint8_t",
          "kind": "typeAlias",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "_uint8_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
            "line": 31,
            "column": 23,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned char",
            "kind": "primitive",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "hat",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 974,
        "column": 31
      },
      "comment": "/**\n * Get the current state of a POV hat on a joystick.\n *\n * The returned value will be one of the following positions:\n *\n * - \u0060SDL_HAT_CENTERED\u0060\n * - \u0060SDL_HAT_UP\u0060\n * - \u0060SDL_HAT_RIGHT\u0060\n * - \u0060SDL_HAT_DOWN\u0060\n * - \u0060SDL_HAT_LEFT\u0060\n * - \u0060SDL_HAT_RIGHTUP\u0060\n * - \u0060SDL_HAT_RIGHTDOWN\u0060\n * - \u0060SDL_HAT_LEFTUP\u0060\n * - \u0060SDL_HAT_LEFTDOWN\u0060\n *\n * \\param joystick an SDL_Joystick structure containing joystick information\n * \\param hat the hat index to get the state from; indices start at index 0\n * \\returns the current hat position.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetNumJoystickHats\n */"
    },
    "SDL_GetJoystickInstanceGUID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_JoystickGUID",
        "kind": "typeAlias",
        "size_of": 16,
        "align_of": 1,
        "location": {
          "fileName": "SDL_joystick.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
          "line": 75,
          "column": 18
        },
        "inner_type": {
          "name": "SDL_GUID",
          "kind": "typeAlias",
          "size_of": 16,
          "align_of": 1,
          "location": {
            "fileName": "SDL_guid.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
            "line": 57,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_GUID",
            "kind": "struct",
            "size_of": 16,
            "align_of": 1,
            "location": {
              "fileName": "SDL_guid.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
              "line": 55,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 227,
        "column": 42
      },
      "comment": "/**\n * Get the implementation-dependent GUID of a joystick.\n *\n * This can be called before any joysticks are opened.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the GUID of the selected joystick. If called with an invalid\n *          instance_id, this function returns a zero GUID.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickGUID\n * \\sa SDL_GetJoystickGUIDString\n */"
    },
    "SDL_GetJoystickInstanceID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_JoystickID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_joystick.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
          "line": 84,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 757,
        "column": 40
      },
      "comment": "/**\n * Get the instance ID of an opened joystick.\n *\n * \\param joystick an SDL_Joystick structure containing joystick information\n * \\returns the instance ID of the specified joystick on success or 0 on\n *          failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetJoystickInstanceName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 180,
        "column": 37
      },
      "comment": "/**\n * Get the implementation dependent name of a joystick.\n *\n * This can be called before any joysticks are opened.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the name of the selected joystick. If no name can be found, this\n *          function returns NULL; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickName\n * \\sa SDL_GetJoysticks\n */"
    },
    "SDL_GetJoystickInstancePath": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 196,
        "column": 37
      },
      "comment": "/**\n * Get the implementation dependent path of a joystick.\n *\n * This can be called before any joysticks are opened.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the path of the selected joystick. If no path can be found, this\n *          function returns NULL; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickPath\n * \\sa SDL_GetJoysticks\n */"
    },
    "SDL_GetJoystickInstancePlayerIndex": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 211,
        "column": 29
      },
      "comment": "/**\n * Get the player index of a joystick.\n *\n * This can be called before any joysticks are opened.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the player index of a joystick, or -1 if it\u0027s not available\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickPlayerIndex\n * \\sa SDL_GetJoysticks\n */"
    },
    "SDL_GetJoystickInstanceProduct": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 162,
          "column": 18
        },
        "inner_type": {
          "name": "uint16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_uint16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
            "line": 31,
            "column": 24,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 261,
        "column": 32
      },
      "comment": "/**\n * Get the USB product ID of a joystick, if available.\n *\n * This can be called before any joysticks are opened. If the product ID isn\u0027t\n * available this function returns 0.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the USB product ID of the selected joystick. If called with an\n *          invalid instance_id, this function returns 0.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickProduct\n * \\sa SDL_GetJoysticks\n */"
    },
    "SDL_GetJoystickInstanceProductVersion": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 162,
          "column": 18
        },
        "inner_type": {
          "name": "uint16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_uint16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
            "line": 31,
            "column": 24,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 278,
        "column": 32
      },
      "comment": "/**\n * Get the product version of a joystick, if available.\n *\n * This can be called before any joysticks are opened. If the product version\n * isn\u0027t available this function returns 0.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the product version of the selected joystick. If called with an\n *          invalid instance_id, this function returns 0.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickProductVersion\n * \\sa SDL_GetJoysticks\n */"
    },
    "SDL_GetJoystickInstanceType": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_JoystickType",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_joystick.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
          "line": 98,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_JoystickType",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 86,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 295,
        "column": 42
      },
      "comment": "/**\n * Get the type of a joystick, if available.\n *\n * This can be called before any joysticks are opened.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the SDL_JoystickType of the selected joystick. If called with an\n *          invalid instance_id, this function returns\n *          \u0060SDL_JOYSTICK_TYPE_UNKNOWN\u0060.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickType\n * \\sa SDL_GetJoysticks\n */"
    },
    "SDL_GetJoystickInstanceVendor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 162,
          "column": 18
        },
        "inner_type": {
          "name": "uint16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_uint16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
            "line": 31,
            "column": 24,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 244,
        "column": 32
      },
      "comment": "/**\n * Get the USB vendor ID of a joystick, if available.\n *\n * This can be called before any joysticks are opened. If the vendor ID isn\u0027t\n * available this function returns 0.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the USB vendor ID of the selected joystick. If called with an\n *          invalid instance_id, this function returns 0.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickVendor\n * \\sa SDL_GetJoysticks\n */"
    },
    "SDL_GetJoystickName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 541,
        "column": 37
      },
      "comment": "/**\n * Get the implementation dependent name of a joystick.\n *\n * \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n * \\returns the name of the selected joystick. If no name can be found, this\n *          function returns NULL; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickInstanceName\n */"
    },
    "SDL_GetJoystickPath": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 554,
        "column": 37
      },
      "comment": "/**\n * Get the implementation dependent path of a joystick.\n *\n * \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n * \\returns the path of the selected joystick. If no path can be found, this\n *          function returns NULL; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickInstancePath\n */"
    },
    "SDL_GetJoystickPlayerIndex": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 569,
        "column": 29
      },
      "comment": "/**\n * Get the player index of an opened joystick.\n *\n * For XInput controllers this returns the XInput user index. Many joysticks\n * will not be able to supply this information.\n *\n * \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n * \\returns the player index, or -1 if it\u0027s not available.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetJoystickPlayerIndex\n */"
    },
    "SDL_GetJoystickPowerLevel": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_JoystickPowerLevel",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_joystick.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
          "line": 109,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_JoystickPowerLevel",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 100,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 1093,
        "column": 48
      },
      "comment": "/**\n * Get the battery level of a joystick as SDL_JoystickPowerLevel.\n *\n * \\param joystick the SDL_Joystick to query\n * \\returns the current battery level as SDL_JoystickPowerLevel on success or\n *          \u0060SDL_JOYSTICK_POWER_UNKNOWN\u0060 if it is unknown\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetJoystickProduct": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 162,
          "column": 18
        },
        "inner_type": {
          "name": "uint16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_uint16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
            "line": 31,
            "column": 24,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 629,
        "column": 32
      },
      "comment": "/**\n * Get the USB product ID of an opened joystick, if available.\n *\n * If the product ID isn\u0027t available this function returns 0.\n *\n * \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n * \\returns the USB product ID of the selected joystick, or 0 if unavailable.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickInstanceProduct\n */"
    },
    "SDL_GetJoystickProductVersion": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 162,
          "column": 18
        },
        "inner_type": {
          "name": "uint16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_uint16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
            "line": 31,
            "column": 24,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 643,
        "column": 32
      },
      "comment": "/**\n * Get the product version of an opened joystick, if available.\n *\n * If the product version isn\u0027t available this function returns 0.\n *\n * \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n * \\returns the product version of the selected joystick, or 0 if unavailable.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickInstanceProductVersion\n */"
    },
    "SDL_GetJoystickProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PropertiesID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_properties.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
          "line": 42,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 522,
        "column": 42
      },
      "comment": "/**\n * Get the properties associated with a joystick.\n *\n * The following read-only properties are provided by SDL:\n *\n * - \u0060SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN\u0060: true if this joystick has an\n *   LED that has adjustable brightness\n * - \u0060SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN\u0060: true if this joystick has an LED\n *   that has adjustable color\n * - \u0060SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN\u0060: true if this joystick has a\n *   player LED\n * - \u0060SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN\u0060: true if this joystick has\n *   left/right rumble\n * - \u0060SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN\u0060: true if this joystick has\n *   simple trigger rumble\n *\n * \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n * \\returns a valid property ID on success or 0 on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetProperty\n * \\sa SDL_SetProperty\n */"
    },
    "SDL_GetJoysticks": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_JoystickID *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_JoystickID",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          },
          "inner_type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "count",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 164,
        "column": 41
      },
      "comment": "/**\n * Get a list of currently connected joysticks.\n *\n * \\param count a pointer filled in with the number of joysticks returned\n * \\returns a 0 terminated array of joystick instance IDs which should be\n *          freed with SDL_free(), or NULL on error; call SDL_GetError() for\n *          more details.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasJoystick\n * \\sa SDL_OpenJoystick\n */"
    },
    "SDL_GetJoystickSerial": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 669,
        "column": 38
      },
      "comment": "/**\n * Get the serial number of an opened joystick, if available.\n *\n * Returns the serial number of the joystick, or NULL if it is not available.\n *\n * \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n * \\returns the serial number of the selected joystick, or NULL if\n *          unavailable.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetJoystickType": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_JoystickType",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_joystick.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
          "line": 98,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_JoystickType",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 86,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 681,
        "column": 42
      },
      "comment": "/**\n * Get the type of an opened joystick.\n *\n * \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n * \\returns the SDL_JoystickType of the selected joystick.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickInstanceType\n */"
    },
    "SDL_GetJoystickVendor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint16",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 162,
          "column": 18
        },
        "inner_type": {
          "name": "uint16_t",
          "kind": "typeAlias",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "_uint16_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
            "line": 31,
            "column": 24,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 615,
        "column": 32
      },
      "comment": "/**\n * Get the USB vendor ID of an opened joystick, if available.\n *\n * If the vendor ID isn\u0027t available this function returns 0.\n *\n * \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n * \\returns the USB vendor ID of the selected joystick, or 0 if unavailable.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickInstanceVendor\n */"
    },
    "SDL_GetKeyboardFocus": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Window *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Window",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 108,
            "column": 16
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 112,
        "column": 38
      },
      "comment": "/**\n * Query the window which currently has keyboard focus.\n *\n * \\returns the window with keyboard focus.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetKeyboardInstanceName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_KeyboardID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_keyboard.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_keyboard.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
            "line": 42,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 103,
        "column": 37
      },
      "comment": "/**\n * Get the name of a keyboard.\n *\n * This function returns \u0022\u0022 if the keyboard doesn\u0027t have a name.\n *\n * \\param instance_id the keyboard instance ID\n * \\returns the name of the selected keyboard, or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetKeyboards\n */"
    },
    "SDL_GetKeyboards": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_KeyboardID *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_KeyboardID",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_keyboard.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
            "line": 42,
            "column": 16
          },
          "inner_type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "count",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 88,
        "column": 41
      },
      "comment": "/**\n * Get a list of currently connected keyboards.\n *\n * Note that this will include any device or virtual driver that includes\n * keyboard functionality, including some mice, KVM switches, motherboard\n * power buttons, etc. You should wait for input from a device before you\n * consider it actively in use.\n *\n * \\param count a pointer filled in with the number of keyboards returned\n * \\returns a 0 terminated array of keyboards instance IDs which should be\n *          freed with SDL_free(), or NULL on error; call SDL_GetError() for\n *          more details.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetKeyboardInstanceName\n * \\sa SDL_HasKeyboard\n */"
    },
    "SDL_GetKeyboardState": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const Uint8 *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "Uint8",
          "kind": "typeAlias",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          },
          "inner_type": {
            "name": "uint8_t",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "_uint8_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
              "line": 31,
              "column": 23,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "numkeys",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 143,
        "column": 38
      },
      "comment": "/**\n * Get a snapshot of the current state of the keyboard.\n *\n * The pointer returned is a pointer to an internal SDL array. It will be\n * valid for the whole lifetime of the application and should not be freed by\n * the caller.\n *\n * A array element with a value of 1 means that the key is pressed and a value\n * of 0 means that it is not. Indexes into this array are obtained by using\n * SDL_Scancode values.\n *\n * Use SDL_PumpEvents() to update the state array.\n *\n * This function gives you the current state after all events have been\n * processed, so if a key or button has been pressed and released before you\n * process events, then the pressed state will never show up in the\n * SDL_GetKeyboardState() calls.\n *\n * Note: This function doesn\u0027t take into account whether shift has been\n * pressed or not.\n *\n * \\param numkeys if non-NULL, receives the length of the returned array\n * \\returns a pointer to an array of key states.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_PumpEvents\n * \\sa SDL_ResetKeyboard\n */"
    },
    "SDL_GetKeyFromName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Keycode",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_keycode.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keycode.h",
          "line": 45,
          "column": 16
        },
        "inner_type": {
          "name": "Sint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 168,
            "column": 17
          },
          "inner_type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_int32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
              "line": 30,
              "column": 33,
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 292,
        "column": 37
      },
      "comment": "/**\n * Get a key code from a human-readable name.\n *\n * \\param name the human-readable key name\n * \\returns key code, or \u0060SDLK_UNKNOWN\u0060 if the name wasn\u0027t recognized; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetKeyFromScancode\n * \\sa SDL_GetKeyName\n * \\sa SDL_GetScancodeFromName\n */"
    },
    "SDL_GetKeyFromScancode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Keycode",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_keycode.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keycode.h",
          "line": 45,
          "column": 16
        },
        "inner_type": {
          "name": "Sint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 168,
            "column": 17
          },
          "inner_type": {
            "name": "int32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_int32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
              "line": 30,
              "column": 33,
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "scancode",
          "type": {
            "name": "SDL_Scancode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_scancode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_scancode.h",
              "line": 437,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_Scancode",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_scancode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_scancode.h",
                "line": 46,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_scancode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_scancode.h",
            "line": 437,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 202,
        "column": 37
      },
      "comment": "/**\n * Get the key code corresponding to the given scancode according to the\n * current keyboard layout.\n *\n * See SDL_Keycode for details.\n *\n * \\param scancode the desired SDL_Scancode to query\n * \\returns the SDL_Keycode that corresponds to the given SDL_Scancode.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetKeyName\n * \\sa SDL_GetScancodeFromKey\n */"
    },
    "SDL_GetKeyName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "key",
          "type": {
            "name": "SDL_Keycode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_keycode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keycode.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Sint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 168,
                "column": 17
              },
              "inner_type": {
                "name": "int32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_int32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                  "line": 30,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_keycode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keycode.h",
            "line": 45,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 277,
        "column": 37
      },
      "comment": "/**\n * Get a human-readable name for a key.\n *\n * See SDL_Scancode and SDL_Keycode for details.\n *\n * \\param key the desired SDL_Keycode to query\n * \\returns a pointer to a UTF-8 string that stays valid at least until the\n *          next call to this function. If you need it around any longer, you\n *          must copy it. If the key doesn\u0027t have a name, this function\n *          returns an empty string (\u0022\u0022).\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetKeyFromName\n * \\sa SDL_GetKeyFromScancode\n * \\sa SDL_GetScancodeFromKey\n */"
    },
    "SDL_GetLogOutputFunction": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "callback",
          "type": {
            "name": "SDL_LogOutputFunction *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_LogOutputFunction",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_log.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
                "line": 368,
                "column": 24
              },
              "inner_type": {
                "name": "void (void *, int, SDL_LogPriority, const char *)",
                "kind": "functionPointer",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "void",
                "kind": "primitive",
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 382,
        "column": 30
      },
      "comment": "/**\n * Get the current log output function.\n *\n * \\param callback an SDL_LogOutputFunction filled in with the current log\n *                 callback\n * \\param userdata a pointer filled in with the pointer that is passed to\n *                 \u0060callback\u0060\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetLogOutputFunction\n */"
    },
    "SDL_GetMasksForPixelFormatEnum": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 422,
            "column": 3
          }
        },
        {
          "name": "bpp",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Rmask",
          "type": {
            "name": "Uint32 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Gmask",
          "type": {
            "name": "Uint32 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Bmask",
          "type": {
            "name": "Uint32 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Amask",
          "type": {
            "name": "Uint32 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 750,
        "column": 34
      },
      "comment": "/**\n * Convert one of the enumerated pixel formats to a bpp value and RGBA masks.\n *\n * \\param format one of the SDL_PixelFormatEnum values\n * \\param bpp a bits per pixel value; usually 15, 16, or 32\n * \\param Rmask a pointer filled in with the red mask for the format\n * \\param Gmask a pointer filled in with the green mask for the format\n * \\param Bmask a pointer filled in with the blue mask for the format\n * \\param Amask a pointer filled in with the alpha mask for the format\n * \\returns SDL_TRUE on success or SDL_FALSE if the conversion wasn\u0027t\n *          possible; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetPixelFormatEnumForMasks\n */"
    },
    "SDL_GetMaxHapticEffects": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1028,
        "column": 29
      },
      "comment": "/**\n * Get the number of effects a haptic device can store.\n *\n * On some platforms this isn\u0027t fully supported, and therefore is an\n * approximation. Always check to see if your created effect was actually\n * created and do not rely solely on SDL_GetMaxHapticEffects().\n *\n * \\param haptic the SDL_Haptic device to query\n * \\returns the number of effects the haptic device can store or a negative\n *          error code on failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetMaxHapticEffectsPlaying\n * \\sa SDL_GetHapticFeatures\n */"
    },
    "SDL_GetMaxHapticEffectsPlaying": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1045,
        "column": 29
      },
      "comment": "/**\n * Get the number of effects a haptic device can play at the same time.\n *\n * This is not supported on all platforms, but will always return a value.\n *\n * \\param haptic the SDL_Haptic device to query maximum playing effects\n * \\returns the number of effects the haptic device can play at the same time\n *          or a negative error code on failure; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetMaxHapticEffects\n * \\sa SDL_GetHapticFeatures\n */"
    },
    "SDL_GetMemoryFunctions": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "malloc_func",
          "type": {
            "name": "SDL_malloc_func *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_malloc_func",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 414,
                "column": 25
              },
              "inner_type": {
                "name": "void *(size_t)",
                "kind": "functionPointer",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "calloc_func",
          "type": {
            "name": "SDL_calloc_func *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_calloc_func",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 415,
                "column": 25
              },
              "inner_type": {
                "name": "void *(size_t, size_t)",
                "kind": "functionPointer",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "realloc_func",
          "type": {
            "name": "SDL_realloc_func *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_realloc_func",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 416,
                "column": 25
              },
              "inner_type": {
                "name": "void *(void *, size_t)",
                "kind": "functionPointer",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "free_func",
          "type": {
            "name": "SDL_free_func *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_free_func",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 417,
                "column": 24
              },
              "inner_type": {
                "name": "void (void *)",
                "kind": "functionPointer",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 444,
        "column": 30
      },
      "comment": "/**\n * Get the current set of SDL memory functions\n *\n * \\param malloc_func filled with malloc function\n * \\param calloc_func filled with calloc function\n * \\param realloc_func filled with realloc function\n * \\param free_func filled with free function\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetMice": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_MouseID *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_MouseID",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_mouse.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
            "line": 41,
            "column": 16
          },
          "inner_type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "count",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 113,
        "column": 38
      },
      "comment": "/**\n * Get a list of currently connected mice.\n *\n * Note that this will include any device or virtual driver that includes\n * mouse functionality, including some game controllers, KVM switches, etc.\n * You should wait for input from a device before you consider it actively in\n * use.\n *\n * \\param count a pointer filled in with the number of mice returned\n * \\returns a 0 terminated array of mouse instance IDs which should be freed\n *          with SDL_free(), or NULL on error; call SDL_GetError() for more\n *          details.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetMouseInstanceName\n * \\sa SDL_HasMouse\n */"
    },
    "SDL_GetModState": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Keymod",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_keycode.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keycode.h",
          "line": 354,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_Keymod",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_keycode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keycode.h",
            "line": 332,
            "column": 9
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 167,
        "column": 36
      },
      "comment": "/**\n * Get the current key modifier state for the keyboard.\n *\n * \\returns an OR\u0027d combination of the modifier keys for the keyboard. See\n *          SDL_Keymod for details.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetKeyboardState\n * \\sa SDL_SetModState\n */"
    },
    "SDL_GetMouseFocus": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Window *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Window",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 108,
            "column": 16
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 137,
        "column": 38
      },
      "comment": "/**\n * Get the window which currently has mouse focus.\n *\n * \\returns the window with mouse focus.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetMouseInstanceName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_MouseID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_mouse.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
              "line": 41,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_mouse.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
            "line": 41,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 128,
        "column": 37
      },
      "comment": "/**\n * Get the name of a mouse.\n *\n * This function returns \u0022\u0022 if the mouse doesn\u0027t have a name.\n *\n * \\param instance_id the mouse instance ID\n * \\returns the name of the selected mouse, or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetMice\n */"
    },
    "SDL_GetMouseState": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 159,
        "column": 32
      },
      "comment": "/**\n * Retrieve the current state of the mouse.\n *\n * The current button state is returned as a button bitmask, which can be\n * tested using the \u0060SDL_BUTTON(X)\u0060 macros (where \u0060X\u0060 is generally 1 for the\n * left, 2 for middle, 3 for the right button), and \u0060x\u0060 and \u0060y\u0060 are set to the\n * mouse cursor position relative to the focus window. You can pass NULL for\n * either \u0060x\u0060 or \u0060y\u0060.\n *\n * \\param x the x coordinate of the mouse cursor position relative to the\n *          focus window\n * \\param y the y coordinate of the mouse cursor position relative to the\n *          focus window\n * \\returns a 32-bit button bitmask of the current button state.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGlobalMouseState\n * \\sa SDL_GetRelativeMouseState\n */"
    },
    "SDL_GetNaturalDisplayOrientation": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_DisplayOrientation",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_video.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
          "line": 103,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_DisplayOrientation",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 96,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "displayID",
          "type": {
            "name": "SDL_DisplayID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 44,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 44,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 424,
        "column": 48
      },
      "comment": "/**\n * Get the orientation of a display when it is unrotated.\n *\n * \\param displayID the instance ID of the display to query\n * \\returns The SDL_DisplayOrientation enum value of the display, or\n *          \u0060SDL_ORIENTATION_UNKNOWN\u0060 if it isn\u0027t available.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetDisplays\n */"
    },
    "SDL_GetNumAllocations": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 503,
        "column": 29
      },
      "comment": "/**\n * Get the number of outstanding (unfreed) allocations\n *\n * \\returns the number of allocations\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetNumberProperty": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Sint64",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 181,
          "column": 17
        },
        "inner_type": {
          "name": "int64_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_int64_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
            "line": 30,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "long long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "default_value",
          "type": {
            "name": "Sint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 181,
              "column": 17
            },
            "inner_type": {
              "name": "int64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_int64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 181,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 363,
        "column": 32
      },
      "comment": "/**\n * Get a number property on a set of properties\n *\n * You can use SDL_GetPropertyType() to query whether the property exists and\n * is a number property.\n *\n * \\param props the properties to query\n * \\param name the name of the property to query\n * \\param default_value the default value of the property\n * \\returns the value of the property, or \u0060default_value\u0060 if it is not set or\n *          not a number property.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetPropertyType\n * \\sa SDL_HasProperty\n * \\sa SDL_SetNumberProperty\n */"
    },
    "SDL_GetNumCameraDrivers": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 107,
        "column": 29
      },
      "comment": "/**\n * Use this function to get the number of built-in camera drivers.\n *\n * This function returns a hardcoded number. This never returns a negative\n * value; if there are no drivers compiled into this build of SDL, this\n * function returns zero. The presence of a driver in this list does not mean\n * it will function, it just means SDL is capable of interacting with that\n * interface. For example, a build of SDL might have v4l2 support, but if\n * there\u0027s no kernel support available, SDL\u0027s v4l2 driver would fail if used.\n *\n * By default, SDL tries all drivers, in its preferred order, until one is\n * found to be usable.\n *\n * \\returns the number of built-in camera drivers.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetCameraDriver\n */"
    },
    "SDL_GetNumGamepadTouchpadFingers": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "touchpad",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1170,
        "column": 29
      },
      "comment": "/**\n * Get the number of supported simultaneous fingers on a touchpad on a game\n * gamepad.\n *\n * \\param gamepad a gamepad\n * \\param touchpad a touchpad\n * \\returns number of supported simultaneous fingers\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadTouchpadFinger\n * \\sa SDL_GetNumGamepadTouchpads\n */"
    },
    "SDL_GetNumGamepadTouchpads": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1155,
        "column": 29
      },
      "comment": "/**\n * Get the number of touchpads on a gamepad.\n *\n * \\param gamepad a gamepad\n * \\returns number of touchpads\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetNumGamepadTouchpadFingers\n */"
    },
    "SDL_GetNumHapticAxes": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1074,
        "column": 29
      },
      "comment": "/**\n * Get the number of haptic axes the device has.\n *\n * The number of haptic axes might be useful if working with the\n * SDL_HapticDirection effect.\n *\n * \\param haptic the SDL_Haptic device to query\n * \\returns the number of axes on success or a negative error code on failure;\n *          call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetNumJoystickAxes": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 778,
        "column": 29
      },
      "comment": "/**\n * Get the number of general axis controls on a joystick.\n *\n * Often, the directional pad on a game controller will either look like 4\n * separate buttons or a POV hat, and not axes, but all of this is up to the\n * device and platform.\n *\n * \\param joystick an SDL_Joystick structure containing joystick information\n * \\returns the number of axis controls/number of axes on success or a\n *          negative error code on failure; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickAxis\n * \\sa SDL_GetNumJoystickBalls\n * \\sa SDL_GetNumJoystickButtons\n * \\sa SDL_GetNumJoystickHats\n */"
    },
    "SDL_GetNumJoystickBalls": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 799,
        "column": 29
      },
      "comment": "/**\n * Get the number of trackballs on a joystick.\n *\n * Joystick trackballs have only relative motion events associated with them\n * and their state cannot be polled.\n *\n * Most joysticks do not have trackballs.\n *\n * \\param joystick an SDL_Joystick structure containing joystick information\n * \\returns the number of trackballs on success or a negative error code on\n *          failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickBall\n * \\sa SDL_GetNumJoystickAxes\n * \\sa SDL_GetNumJoystickButtons\n * \\sa SDL_GetNumJoystickHats\n */"
    },
    "SDL_GetNumJoystickButtons": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 831,
        "column": 29
      },
      "comment": "/**\n * Get the number of buttons on a joystick.\n *\n * \\param joystick an SDL_Joystick structure containing joystick information\n * \\returns the number of buttons on success or a negative error code on\n *          failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickButton\n * \\sa SDL_GetNumJoystickAxes\n * \\sa SDL_GetNumJoystickBalls\n * \\sa SDL_GetNumJoystickHats\n */"
    },
    "SDL_GetNumJoystickHats": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 815,
        "column": 29
      },
      "comment": "/**\n * Get the number of POV hats on a joystick.\n *\n * \\param joystick an SDL_Joystick structure containing joystick information\n * \\returns the number of POV hats on success or a negative error code on\n *          failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickHat\n * \\sa SDL_GetNumJoystickAxes\n * \\sa SDL_GetNumJoystickBalls\n * \\sa SDL_GetNumJoystickButtons\n */"
    },
    "SDL_GetNumRenderDrivers": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 151,
        "column": 29
      },
      "comment": "/**\n * Get the number of 2D rendering drivers available for the current display.\n *\n * A render driver is a set of code that handles rendering and texture\n * management on a particular display. Normally there is only one, but some\n * drivers may have several available with different capabilities.\n *\n * There may be none if SDL was compiled without render support.\n *\n * \\returns a number \u003E= 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateRenderer\n * \\sa SDL_GetRenderDriver\n */"
    },
    "SDL_GetNumTouchFingers": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "touchID",
          "type": {
            "name": "SDL_TouchID",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_touch.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
              "line": 41,
              "column": 16
            },
            "inner_type": {
              "name": "Uint64",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 187,
                "column": 18
              },
              "inner_type": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_uint64_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                  "line": 31,
                  "column": 28,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_touch.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
            "line": 41,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_touch.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
        "line": 121,
        "column": 29
      },
      "comment": "/**\n * Get the number of active fingers for a given touch device.\n *\n * \\param touchID the ID of a touch device\n * \\returns the number of active fingers for a given touch device on success\n *          or a negative error code on failure; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetTouchFinger\n */"
    },
    "SDL_GetNumVideoDrivers": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 263,
        "column": 29
      },
      "comment": "/**\n * Get the number of video drivers compiled into SDL.\n *\n * \\returns a number \u003E= 1 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetVideoDriver\n */"
    },
    "SDL_GetOriginalMemoryFunctions": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "malloc_func",
          "type": {
            "name": "SDL_malloc_func *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_malloc_func",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 414,
                "column": 25
              },
              "inner_type": {
                "name": "void *(size_t)",
                "kind": "functionPointer",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "calloc_func",
          "type": {
            "name": "SDL_calloc_func *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_calloc_func",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 415,
                "column": 25
              },
              "inner_type": {
                "name": "void *(size_t, size_t)",
                "kind": "functionPointer",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "realloc_func",
          "type": {
            "name": "SDL_realloc_func *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_realloc_func",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 416,
                "column": 25
              },
              "inner_type": {
                "name": "void *(void *, size_t)",
                "kind": "functionPointer",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "free_func",
          "type": {
            "name": "SDL_free_func *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_free_func",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 417,
                "column": 24
              },
              "inner_type": {
                "name": "void (void *)",
                "kind": "functionPointer",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 429,
        "column": 30
      },
      "comment": "/**\n * Get the original set of SDL memory functions\n *\n * \\param malloc_func filled with malloc function\n * \\param calloc_func filled with calloc function\n * \\param realloc_func filled with realloc function\n * \\param free_func filled with free function\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetPathInfo": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "path",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "info",
          "type": {
            "name": "SDL_PathInfo *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_PathInfo",
              "kind": "typeAlias",
              "size_of": 40,
              "align_of": 8,
              "location": {
                "fileName": "SDL_filesystem.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
                "line": 255,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_PathInfo",
                "kind": "struct",
                "size_of": 40,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_filesystem.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
                  "line": 248,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_filesystem.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
        "line": 318,
        "column": 29
      },
      "comment": "/**\n * Get information about a filesystem path.\n *\n * \\param path the path to query\n * \\param info a pointer filled in with information about the path, or NULL to\n *             check for the existence of a file\n * \\returns 0 on success or a negative error code if the file doesn\u0027t exist,\n *          or another failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetPenCapabilities": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_PenID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pen.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
              "line": 57,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_pen.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
            "line": 57,
            "column": 16
          }
        },
        {
          "name": "capabilities",
          "type": {
            "name": "SDL_PenCapabilityInfo *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_PenCapabilityInfo",
              "kind": "typeAlias",
              "size_of": 12,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pen.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
                "line": 246,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_PenCapabilityInfo",
                "kind": "struct",
                "size_of": 12,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_pen.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
                  "line": 241,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 258,
        "column": 32
      },
      "comment": "/**\n * Retrieves capability flags for a given ::SDL_PenID.\n *\n * \\param instance_id The pen to query.\n * \\param capabilities Detail information about pen capabilities, such as the\n *                     number of buttons\n * \\returns a set of capability flags, cf. SDL_PEN_CAPABILITIES\n *\n * \\since This function is available since SDL 3.0.0\n */"
    },
    "SDL_GetPenFromGUID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PenID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_pen.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
          "line": 57,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "guid",
          "type": {
            "name": "SDL_GUID",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 1,
            "location": {
              "fileName": "SDL_guid.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
              "line": 57,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_GUID",
              "kind": "struct",
              "size_of": 16,
              "align_of": 1,
              "location": {
                "fileName": "SDL_guid.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
                "line": 55,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_guid.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
            "line": 57,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 195,
        "column": 35
      },
      "comment": "/**\n * Retrieves an ::SDL_PenID for the given ::SDL_GUID.\n *\n * \\param guid A pen GUID.\n * \\returns A valid ::SDL_PenID, or ::SDL_PEN_INVALID if there is no matching\n *          SDL_PenID.\n *\n * \\since This function is available since SDL 3.0.0\n */"
    },
    "SDL_GetPenGUID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_GUID",
        "kind": "typeAlias",
        "size_of": 16,
        "align_of": 1,
        "location": {
          "fileName": "SDL_guid.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
          "line": 57,
          "column": 3
        },
        "inner_type": {
          "name": "struct SDL_GUID",
          "kind": "struct",
          "size_of": 16,
          "align_of": 1,
          "location": {
            "fileName": "SDL_guid.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
            "line": 55,
            "column": 16
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_PenID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pen.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
              "line": 57,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_pen.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
            "line": 57,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 206,
        "column": 34
      },
      "comment": "/**\n * Retrieves the ::SDL_GUID for a given ::SDL_PenID.\n *\n * \\param instance_id The pen to query.\n * \\returns The corresponding pen GUID; persistent across multiple sessions.\n *          If \u0022instance_id\u0022 is ::SDL_PEN_INVALID, returns an all-zeroes GUID.\n *\n * \\since This function is available since SDL 3.0.0\n */"
    },
    "SDL_GetPenName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_PenID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pen.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
              "line": 57,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_pen.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
            "line": 57,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 236,
        "column": 37
      },
      "comment": "/**\n * Retrieves a human-readable description for a ::SDL_PenID.\n *\n * \\param instance_id The pen to query.\n * \\returns A string that contains the name of the pen, intended for human\n *          consumption. The string might or might not be localised, depending\n *          on platform settings. It is not guaranteed to be unique; use\n *          ::SDL_GetPenGUID() for (best-effort) unique identifiers. The\n *          pointer is managed by the SDL pen subsystem and must not be\n *          deallocated. The pointer remains valid until SDL is shut down.\n *          Returns NULL on error (cf. ::SDL_GetError())\n *\n * \\since This function is available since SDL 3.0.0\n */"
    },
    "SDL_GetPens": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PenID *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_PenID",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_pen.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
            "line": 57,
            "column": 16
          },
          "inner_type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "count",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 163,
        "column": 36
      },
      "comment": "/**\n * Retrieves all pens that are connected to the system.\n *\n * Yields an array of ::SDL_PenID values. These identify and track pens\n * throughout a session. To track pens across sessions (program restart), use\n * ::SDL_GUID .\n *\n * \\param count The number of pens in the array (number of array elements\n *              minus 1, i.e., not counting the terminator 0).\n * \\returns A 0 terminated array of ::SDL_PenID values, or NULL on error. The\n *          array must be freed with ::SDL_free(). On a NULL return,\n *          ::SDL_GetError() is set.\n *\n * \\since This function is available since SDL 3.0.0\n */"
    },
    "SDL_GetPenStatus": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_PenID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pen.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
              "line": 57,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_pen.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
            "line": 57,
            "column": 16
          }
        },
        {
          "name": "x",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "axes",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "num_axes",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 184,
        "column": 32
      },
      "comment": "/**\n * Retrieves the pen\u0027s current status.\n *\n * If the pen is detached (cf. ::SDL_PenConnected), this operation may return\n * default values.\n *\n * \\param instance_id The pen to query.\n * \\param x Out-mode parameter for pen x coordinate. May be NULL.\n * \\param y Out-mode parameter for pen y coordinate. May be NULL.\n * \\param axes Out-mode parameter for axis information. May be null. The axes\n *             are in the same order as ::SDL_PenAxis.\n * \\param num_axes Maximum number of axes to write to \u0022axes\u0022.\n * \\returns a bit mask with the current pen button states (::SDL_BUTTON_LMASK\n *          etc.), possibly ::SDL_PEN_DOWN_MASK, and exactly one of\n *          ::SDL_PEN_INK_MASK or ::SDL_PEN_ERASER_MASK , or 0 on error (see\n *          ::SDL_GetError()).\n *\n * \\since This function is available since SDL 3.0.0\n */"
    },
    "SDL_GetPenType": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PenSubtype",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_pen.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
          "line": 143,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_PenSubtype",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_pen.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
            "line": 134,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_PenID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pen.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
              "line": 57,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_pen.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
            "line": 57,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 273,
        "column": 40
      },
      "comment": "/**\n * Retrieves the pen type for a given ::SDL_PenID.\n *\n * \\param instance_id The pen to query.\n * \\returns The corresponding pen type (cf. ::SDL_PenSubtype) or 0 on error.\n *          Note that the pen type does not dictate whether the pen tip is\n *          ::SDL_PEN_TIP_INK or ::SDL_PEN_TIP_ERASER; to determine whether a\n *          pen is being used for drawing or in eraser mode, check either the\n *          pen tip on ::SDL_EVENT_PEN_DOWN, or the flag ::SDL_PEN_ERASER_MASK\n *          in the pen state.\n *\n * \\since This function is available since SDL 3.0.0\n */"
    },
    "SDL_GetPerformanceCounter": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint64",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 187,
          "column": 18
        },
        "inner_type": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_uint64_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
            "line": 31,
            "column": 28,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_timer.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
        "line": 90,
        "column": 32
      },
      "comment": "/**\n * Get the current value of the high resolution counter.\n *\n * This function is typically used for profiling.\n *\n * The counter values are only meaningful relative to each other. Differences\n * between values can be converted to times by using\n * SDL_GetPerformanceFrequency().\n *\n * \\returns the current counter value.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetPerformanceFrequency\n */"
    },
    "SDL_GetPerformanceFrequency": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint64",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 187,
          "column": 18
        },
        "inner_type": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_uint64_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
            "line": 31,
            "column": 28,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_timer.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
        "line": 101,
        "column": 32
      },
      "comment": "/**\n * Get the count per second of the high resolution counter.\n *\n * \\returns a platform-specific count per second.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetPerformanceCounter\n */"
    },
    "SDL_GetPixelFormatEnumForMasks": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PixelFormatEnum",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_pixels.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
          "line": 422,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_PixelFormatEnum",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 214,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "bpp",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Rmask",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        },
        {
          "name": "Gmask",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        },
        {
          "name": "Bmask",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        },
        {
          "name": "Amask",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 775,
        "column": 45
      },
      "comment": "/**\n * Convert a bpp value and RGBA masks to an enumerated pixel format.\n *\n * This will return \u0060SDL_PIXELFORMAT_UNKNOWN\u0060 if the conversion wasn\u0027t\n * possible.\n *\n * \\param bpp a bits per pixel value; usually 15, 16, or 32\n * \\param Rmask the red mask for the format\n * \\param Gmask the green mask for the format\n * \\param Bmask the blue mask for the format\n * \\param Amask the alpha mask for the format\n * \\returns the SDL_PixelFormatEnum value corresponding to the format masks,\n *          or SDL_PIXELFORMAT_UNKNOWN if there isn\u0027t a match.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetMasksForPixelFormatEnum\n */"
    },
    "SDL_GetPixelFormatName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 422,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 732,
        "column": 37
      },
      "comment": "/**\n * Get the human readable name of a pixel format.\n *\n * \\param format the pixel format to query\n * \\returns the human readable name of the specified pixel format or\n *          \u0060SDL_PIXELFORMAT_UNKNOWN\u0060 if the format isn\u0027t recognized.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetPlatform": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_platform.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_platform.h",
        "line": 55,
        "column": 38
      },
      "comment": "/**\n * Get the name of the platform.\n *\n * Here are the names returned for some (but not all) supported platforms:\n *\n * - \u0022Windows\u0022\n * - \u0022macOS\u0022\n * - \u0022Linux\u0022\n * - \u0022iOS\u0022\n * - \u0022Android\u0022\n *\n * \\returns the name of the platform. If the correct platform name is not\n *          available, returns a string beginning with the text \u0022Unknown\u0022.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetPowerInfo": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PowerState",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_power.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_power.h",
          "line": 49,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_PowerState",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_power.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_power.h",
            "line": 42,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "seconds",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "percent",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_power.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_power.h",
        "line": 77,
        "column": 40
      },
      "comment": "/**\n * Get the current power supply details.\n *\n * You should never take a battery status as absolute truth. Batteries\n * (especially failing batteries) are delicate hardware, and the values\n * reported here are best estimates based on what that hardware reports. It\u0027s\n * not uncommon for older batteries to lose stored power much faster than it\n * reports, or completely drain when reporting it has 20 percent left, etc.\n *\n * Battery status can change at any time; if you are concerned with power\n * state, you should call this function frequently, and perhaps ignore changes\n * until they seem to be stable for a few seconds.\n *\n * It\u0027s possible a platform can only report battery percentage or time left\n * but not both.\n *\n * \\param seconds seconds of battery life left, you can pass a NULL here if\n *                you don\u0027t care, will return -1 if we can\u0027t determine a\n *                value, or we\u0027re not running on a battery\n * \\param percent percentage of battery life left, between 0 and 100, you can\n *                pass a NULL here if you don\u0027t care, will return -1 if we\n *                can\u0027t determine a value, or we\u0027re not running on a battery\n * \\returns an SDL_PowerState enum representing the current battery state.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetPreferredLocales": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Locale *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_Locale",
          "kind": "typeAlias",
          "size_of": 16,
          "align_of": 8,
          "location": {
            "fileName": "SDL_locale.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_locale.h",
            "line": 47,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_Locale",
            "kind": "struct",
            "size_of": 16,
            "align_of": 8,
            "location": {
              "fileName": "SDL_locale.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_locale.h",
              "line": 43,
              "column": 16
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_locale.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_locale.h",
        "line": 91,
        "column": 38
      },
      "comment": "/**\n * Report the user\u0027s preferred locale.\n *\n * This returns an array of SDL_Locale structs, the final item zeroed out.\n * When the caller is done with this array, it should call SDL_free() on the\n * returned value; all the memory involved is allocated in a single block, so\n * a single SDL_free() will suffice.\n *\n * Returned language strings are in the format xx, where \u0027xx\u0027 is an ISO-639\n * language specifier (such as \u0022en\u0022 for English, \u0022de\u0022 for German, etc).\n * Country strings are in the format YY, where \u0022YY\u0022 is an ISO-3166 country\n * code (such as \u0022US\u0022 for the United States, \u0022CA\u0022 for Canada, etc). Country\n * might be NULL if there\u0027s no specific guidance on them (so you might get {\n * \u0022en\u0022, \u0022US\u0022 } for American English, but { \u0022en\u0022, NULL } means \u0022English\n * language, generically\u0022). Language strings are never NULL, except to\n * terminate the array.\n *\n * Please note that not all of these strings are 2 characters; some are three\n * or more.\n *\n * The returned list of locales are in the order of the user\u0027s preference. For\n * example, a German citizen that is fluent in US English and knows enough\n * Japanese to navigate around Tokyo might have a list like: { \u0022de\u0022, \u0022en_US\u0022,\n * \u0022jp\u0022, NULL }. Someone from England might prefer British English (where\n * \u0022color\u0022 is spelled \u0022colour\u0022, etc), but will settle for anything like it: {\n * \u0022en_GB\u0022, \u0022en\u0022, NULL }.\n *\n * This function returns NULL on error, including when the platform does not\n * supply this information at all.\n *\n * This might be a \u0022slow\u0022 call that has to query the operating system. It\u0027s\n * best to ask for this once and save the results. However, this list can\n * change, usually because the user has changed a system preference outside of\n * your program; SDL will send an SDL_EVENT_LOCALE_CHANGED event in this case,\n * if possible, and you can call this function again to get an updated copy of\n * preferred locales.\n *\n * \\returns array of locales, terminated with a locale with a NULL language\n *          field. Will return NULL on error.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetPrefPath": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "org",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "app",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_filesystem.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
        "line": 139,
        "column": 31
      },
      "comment": "/**\n * Get the user-and-app-specific path where files can be written.\n *\n * Get the \u0022pref dir\u0022. This is meant to be where users can write personal\n * files (preferences and save games, etc) that are specific to your\n * application. This directory is unique per user, per application.\n *\n * This function will decide the appropriate location in the native\n * filesystem, create the directory if necessary, and return a string of the\n * absolute path to the directory in UTF-8 encoding.\n *\n * On Windows, the string might look like:\n *\n * \u0060C:\\\\Users\\\\bob\\\\AppData\\\\Roaming\\\\My Company\\\\My Program Name\\\\\u0060\n *\n * On Linux, the string might look like:\n *\n * \u0060/home/bob/.local/share/My Program Name/\u0060\n *\n * On macOS, the string might look like:\n *\n * \u0060/Users/bob/Library/Application Support/My Program Name/\u0060\n *\n * You should assume the path returned by this function is the only safe place\n * to write files (and that SDL_GetBasePath(), while it might be writable, or\n * even the parent of the returned path, isn\u0027t where you should be writing\n * things).\n *\n * Both the org and app strings may become part of a directory name, so please\n * follow these rules:\n *\n * - Try to use the same org string (_including case-sensitivity_) for all\n *   your applications that use this function.\n * - Always use a unique app string for each one, and make sure it never\n *   changes for an app once you\u0027ve decided on it.\n * - Unicode characters are legal, as long as it\u0027s UTF-8 encoded, but...\n * - ...only use letters, numbers, and spaces. Avoid punctuation like \u0022Game\n *   Name 2: Bad Guy\u0027s Revenge!\u0022 ... \u0022Game Name 2\u0022 is sufficient.\n *\n * The returned path is guaranteed to end with a path separator (\u0027\\\\\u0027 on\n * Windows, \u0027/\u0027 on most other platforms).\n *\n * The pointer returned is owned by the caller. Please call SDL_free() on the\n * pointer when done with it.\n *\n * \\param org the name of your organization\n * \\param app the name of your application\n * \\returns a UTF-8 string of the user directory in platform-dependent\n *          notation. NULL if there\u0027s a problem (creating directory failed,\n *          etc.).\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetBasePath\n */"
    },
    "SDL_GetPrimaryDisplay": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_DisplayID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_video.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
          "line": 44,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 324,
        "column": 39
      },
      "comment": "/**\n * Return the primary display.\n *\n * \\returns the instance ID of the primary display on success or 0 on failure;\n *          call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetDisplays\n */"
    },
    "SDL_GetPrimarySelectionText": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_clipboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
        "line": 116,
        "column": 32
      },
      "comment": "/**\n * Get UTF-8 text from the primary selection, which must be freed with\n * SDL_free().\n *\n * This functions returns empty string if there was not enough memory left for\n * a copy of the primary selection\u0027s content.\n *\n * \\returns the primary selection text on success or an empty string on\n *          failure; call SDL_GetError() for more information. Caller must\n *          call SDL_free() on the returned pointer when done with it (even if\n *          there was an error).\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasPrimarySelectionText\n * \\sa SDL_SetPrimarySelectionText\n */"
    },
    "SDL_GetProperty": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "default_value",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 322,
        "column": 31
      },
      "comment": "/**\n * Get a property on a set of properties\n *\n * By convention, the names of properties that SDL exposes on objects will\n * start with \u0022SDL.\u0022, and properties that SDL uses internally will start with\n * \u0022SDL.internal.\u0022. These should be considered read-only and should not be\n * modified by applications.\n *\n * \\param props the properties to query\n * \\param name the name of the property to query\n * \\param default_value the default value of the property\n * \\returns the value of the property, or \u0060default_value\u0060 if it is not set or\n *          not a pointer property.\n *\n * \\threadsafety It is safe to call this function from any thread, although\n *               the data returned is not protected and could potentially be\n *               freed if you call SDL_SetProperty() or SDL_ClearProperty() on\n *               these properties from another thread. If you need to avoid\n *               this, use SDL_LockProperties() and SDL_UnlockProperties().\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetBooleanProperty\n * \\sa SDL_GetFloatProperty\n * \\sa SDL_GetNumberProperty\n * \\sa SDL_GetPropertyType\n * \\sa SDL_GetStringProperty\n * \\sa SDL_HasProperty\n * \\sa SDL_SetProperty\n */"
    },
    "SDL_GetPropertyType": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PropertyType",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_properties.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
          "line": 55,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_PropertyType",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 47,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 290,
        "column": 42
      },
      "comment": "/**\n * Get the type of a property on a set of properties\n *\n * \\param props the properties to query\n * \\param name the name of the property to query\n * \\returns the type of the property, or SDL_PROPERTY_TYPE_INVALID if it is\n *          not set.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasProperty\n */"
    },
    "SDL_GetRealGamepadInstanceType": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_GamepadType",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_gamepad.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
          "line": 76,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_GamepadType",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 62,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 577,
        "column": 41
      },
      "comment": "/**\n * Get the type of a gamepad, ignoring any mapping override.\n *\n * This can be called before any gamepads are opened.\n *\n * \\param instance_id the joystick instance ID\n * \\returns the gamepad type.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadInstanceType\n * \\sa SDL_GetGamepads\n * \\sa SDL_GetRealGamepadType\n */"
    },
    "SDL_GetRealGamepadType": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_GamepadType",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_gamepad.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
          "line": 76,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_GamepadType",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 62,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 734,
        "column": 41
      },
      "comment": "/**\n * Get the type of an opened gamepad, ignoring any mapping override.\n *\n * \\param gamepad the gamepad object to query.\n * \\returns the gamepad type, or SDL_GAMEPAD_TYPE_UNKNOWN if it\u0027s not\n *          available.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRealGamepadInstanceType\n */"
    },
    "SDL_GetRectAndLineIntersection": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "rect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "X1",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Y1",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "X2",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Y2",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 222,
        "column": 34
      },
      "comment": "/**\n * Calculate the intersection of a rectangle and line segment.\n *\n * This function is used to clip a line segment to a rectangle. A line segment\n * contained entirely within the rectangle or that does not intersect will\n * remain unchanged. A line segment that crosses the rectangle at either or\n * both ends will be clipped to the boundary of the rectangle and the new\n * coordinates saved in \u0060X1\u0060, \u0060Y1\u0060, \u0060X2\u0060, and/or \u0060Y2\u0060 as necessary.\n *\n * \\param rect an SDL_Rect structure representing the rectangle to intersect\n * \\param X1 a pointer to the starting X-coordinate of the line\n * \\param Y1 a pointer to the starting Y-coordinate of the line\n * \\param X2 a pointer to the ending X-coordinate of the line\n * \\param Y2 a pointer to the ending Y-coordinate of the line\n * \\returns SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetRectAndLineIntersectionFloat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "rect",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "X1",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Y1",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "X2",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Y2",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 367,
        "column": 34
      },
      "comment": "/**\n * Calculate the intersection of a rectangle and line segment with float\n * precision.\n *\n * This function is used to clip a line segment to a rectangle. A line segment\n * contained entirely within the rectangle or that does not intersect will\n * remain unchanged. A line segment that crosses the rectangle at either or\n * both ends will be clipped to the boundary of the rectangle and the new\n * coordinates saved in \u0060X1\u0060, \u0060Y1\u0060, \u0060X2\u0060, and/or \u0060Y2\u0060 as necessary.\n *\n * \\param rect an SDL_FRect structure representing the rectangle to intersect\n * \\param X1 a pointer to the starting X-coordinate of the line\n * \\param Y1 a pointer to the starting Y-coordinate of the line\n * \\param X2 a pointer to the ending X-coordinate of the line\n * \\param Y2 a pointer to the ending Y-coordinate of the line\n * \\returns SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetRectEnclosingPoints": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "points",
          "type": {
            "name": "const SDL_Point *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Point",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 50,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Point",
                "kind": "struct",
                "size_of": 8,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 46,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "clip",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "result",
          "type": {
            "name": "SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 199,
        "column": 34
      },
      "comment": "/**\n * Calculate a minimal rectangle enclosing a set of points.\n *\n * If \u0060clip\u0060 is not NULL then only points inside of the clipping rectangle are\n * considered.\n *\n * \\param points an array of SDL_Point structures representing points to be\n *               enclosed\n * \\param count the number of structures in the \u0060points\u0060 array\n * \\param clip an SDL_Rect used for clipping or NULL to enclose all points\n * \\param result an SDL_Rect structure filled in with the minimal enclosing\n *               rectangle\n * \\returns SDL_TRUE if any points were enclosed or SDL_FALSE if all the\n *          points were outside of the clipping rectangle.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetRectEnclosingPointsFloat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "points",
          "type": {
            "name": "const SDL_FPoint *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FPoint",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 62,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FPoint",
                "kind": "struct",
                "size_of": 8,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 58,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "clip",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "result",
          "type": {
            "name": "SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 343,
        "column": 34
      },
      "comment": "/**\n * Calculate a minimal rectangle enclosing a set of points with float\n * precision.\n *\n * If \u0060clip\u0060 is not NULL then only points inside of the clipping rectangle are\n * considered.\n *\n * \\param points an array of SDL_FPoint structures representing points to be\n *               enclosed\n * \\param count the number of structures in the \u0060points\u0060 array\n * \\param clip an SDL_FRect used for clipping or NULL to enclose all points\n * \\param result an SDL_FRect structure filled in with the minimal enclosing\n *               rectangle\n * \\returns SDL_TRUE if any points were enclosed or SDL_FALSE if all the\n *          points were outside of the clipping rectangle.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetRectIntersection": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "A",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "B",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "result",
          "type": {
            "name": "SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 162,
        "column": 34
      },
      "comment": "/**\n * Calculate the intersection of two rectangles.\n *\n * If \u0060result\u0060 is NULL then this function will return SDL_FALSE.\n *\n * \\param A an SDL_Rect structure representing the first rectangle\n * \\param B an SDL_Rect structure representing the second rectangle\n * \\param result an SDL_Rect structure filled in with the intersection of\n *               rectangles \u0060A\u0060 and \u0060B\u0060\n * \\returns SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasRectIntersection\n */"
    },
    "SDL_GetRectIntersectionFloat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "A",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "B",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "result",
          "type": {
            "name": "SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 305,
        "column": 34
      },
      "comment": "/**\n * Calculate the intersection of two rectangles with float precision.\n *\n * If \u0060result\u0060 is NULL then this function will return SDL_FALSE.\n *\n * \\param A an SDL_FRect structure representing the first rectangle\n * \\param B an SDL_FRect structure representing the second rectangle\n * \\param result an SDL_FRect structure filled in with the intersection of\n *               rectangles \u0060A\u0060 and \u0060B\u0060\n * \\returns SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasRectIntersectionFloat\n */"
    },
    "SDL_GetRectUnion": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "A",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "B",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "result",
          "type": {
            "name": "SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 178,
        "column": 29
      },
      "comment": "/**\n * Calculate the union of two rectangles.\n *\n * \\param A an SDL_Rect structure representing the first rectangle\n * \\param B an SDL_Rect structure representing the second rectangle\n * \\param result an SDL_Rect structure filled in with the union of rectangles\n *               \u0060A\u0060 and \u0060B\u0060\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetRectUnionFloat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "A",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "B",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "result",
          "type": {
            "name": "SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 321,
        "column": 29
      },
      "comment": "/**\n * Calculate the union of two rectangles with float precision.\n *\n * \\param A an SDL_FRect structure representing the first rectangle\n * \\param B an SDL_FRect structure representing the second rectangle\n * \\param result an SDL_FRect structure filled in with the union of rectangles\n *               \u0060A\u0060 and \u0060B\u0060\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetRelativeMouseMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 328,
        "column": 34
      },
      "comment": "/**\n * Query whether relative mouse mode is enabled.\n *\n * \\returns SDL_TRUE if relative mode is enabled or SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetRelativeMouseMode\n */"
    },
    "SDL_GetRelativeMouseState": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 208,
        "column": 32
      },
      "comment": "/**\n * Retrieve the relative state of the mouse.\n *\n * The current button state is returned as a button bitmask, which can be\n * tested using the \u0060SDL_BUTTON(X)\u0060 macros (where \u0060X\u0060 is generally 1 for the\n * left, 2 for middle, 3 for the right button), and \u0060x\u0060 and \u0060y\u0060 are set to the\n * mouse deltas since the last call to SDL_GetRelativeMouseState() or since\n * event initialization. You can pass NULL for either \u0060x\u0060 or \u0060y\u0060.\n *\n * \\param x a pointer filled with the last recorded x coordinate of the mouse\n * \\param y a pointer filled with the last recorded y coordinate of the mouse\n * \\returns a 32-bit button bitmask of the relative button state.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetMouseState\n */"
    },
    "SDL_GetRenderClipRect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1456,
        "column": 29
      },
      "comment": "/**\n * Get the clip rectangle for the current target.\n *\n * \\param renderer the rendering context\n * \\param rect an SDL_Rect structure filled in with the current clipping area\n *             or an empty rectangle if clipping is disabled\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderClipEnabled\n * \\sa SDL_SetRenderClipRect\n */"
    },
    "SDL_GetRenderColorScale": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "scale",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1634,
        "column": 29
      },
      "comment": "/**\n * Get the color scale used for render operations.\n *\n * \\param renderer the rendering context\n * \\param scale a pointer filled in with the current color scale value\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetRenderColorScale\n */"
    },
    "SDL_GetRenderDrawBlendMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "blendMode",
          "type": {
            "name": "SDL_BlendMode *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_BlendMode",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_blendmode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
                "line": 60,
                "column": 3
              },
              "inner_type": {
                "name": "SDL_BlendMode",
                "kind": "enum",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_blendmode.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
                  "line": 40,
                  "column": 9
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1664,
        "column": 29
      },
      "comment": "/**\n * Get the blend mode used for drawing operations.\n *\n * \\param renderer the rendering context\n * \\param blendMode a pointer filled in with the current SDL_BlendMode\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetRenderDrawBlendMode\n */"
    },
    "SDL_GetRenderDrawColor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "r",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "g",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "b",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "a",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1576,
        "column": 29
      },
      "comment": "/**\n * Get the color used for drawing operations (Rect, Line and Clear).\n *\n * \\param renderer the rendering context\n * \\param r a pointer filled in with the red value used to draw on the\n *          rendering target\n * \\param g a pointer filled in with the green value used to draw on the\n *          rendering target\n * \\param b a pointer filled in with the blue value used to draw on the\n *          rendering target\n * \\param a a pointer filled in with the alpha value used to draw on the\n *          rendering target; usually \u0060SDL_ALPHA_OPAQUE\u0060 (255)\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderDrawColorFloat\n * \\sa SDL_SetRenderDrawColor\n */"
    },
    "SDL_GetRenderDrawColorFloat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "r",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "g",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "b",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "a",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1598,
        "column": 29
      },
      "comment": "/**\n * Get the color used for drawing operations (Rect, Line and Clear).\n *\n * \\param renderer the rendering context\n * \\param r a pointer filled in with the red value used to draw on the\n *          rendering target\n * \\param g a pointer filled in with the green value used to draw on the\n *          rendering target\n * \\param b a pointer filled in with the blue value used to draw on the\n *          rendering target\n * \\param a a pointer filled in with the alpha value used to draw on the\n *          rendering target\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetRenderDrawColorFloat\n * \\sa SDL_GetRenderDrawColor\n */"
    },
    "SDL_GetRenderDriver": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 176,
        "column": 37
      },
      "comment": "/**\n * Use this function to get the name of a built in 2D rendering driver.\n *\n * The list of rendering drivers is given in the order that they are normally\n * initialized by default; the drivers that seem more reasonable to choose\n * first (as far as the SDL developers believe) are earlier in the list.\n *\n * The names of drivers are all simple, low-ASCII identifiers, like \u0022opengl\u0022,\n * \u0022direct3d12\u0022 or \u0022metal\u0022. These never have Unicode characters, and are not\n * meant to be proper names.\n *\n * The returned value points to a static, read-only string; do not modify or\n * free it!\n *\n * \\param index the index of the rendering driver; the value ranges from 0 to\n *              SDL_GetNumRenderDrivers() - 1\n * \\returns the name of the rendering driver at the requested index, or NULL\n *          if an invalid index was specified.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetNumRenderDrivers\n */"
    },
    "SDL_GetRenderer": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Renderer *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Renderer",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 123,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 322,
        "column": 39
      },
      "comment": "/**\n * Get the renderer associated with a window.\n *\n * \\param window the window to query\n * \\returns the rendering context on success or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetRendererFromTexture": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Renderer *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Renderer",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 123,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 795,
        "column": 39
      },
      "comment": "/**\n * Get the renderer that created an SDL_Texture.\n *\n * \\param texture the texture to query\n * \\returns a pointer to the SDL_Renderer that created the texture, or NULL on\n *          failure; call SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetRendererInfo": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "info",
          "type": {
            "name": "SDL_RendererInfo *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_RendererInfo",
              "kind": "typeAlias",
              "size_of": 88,
              "align_of": 8,
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 86,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_RendererInfo",
                "kind": "struct",
                "size_of": 88,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_render.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                  "line": 78,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 349,
        "column": 29
      },
      "comment": "/**\n * Get information about a rendering context.\n *\n * \\param renderer the rendering context\n * \\param info an SDL_RendererInfo structure filled with information about the\n *             current renderer\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateRenderer\n * \\sa SDL_CreateRendererWithProperties\n */"
    },
    "SDL_GetRendererProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PropertiesID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_properties.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
          "line": 42,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 421,
        "column": 42
      },
      "comment": "/**\n * Get the properties associated with a renderer.\n *\n * The following read-only properties are provided by SDL:\n *\n * - \u0060SDL_PROP_RENDERER_NAME_STRING\u0060: the name of the rendering driver\n * - \u0060SDL_PROP_RENDERER_WINDOW_POINTER\u0060: the window where rendering is\n *   displayed, if any\n * - \u0060SDL_PROP_RENDERER_SURFACE_POINTER\u0060: the surface where rendering is\n *   displayed, if this is a software renderer without a window\n * - \u0060SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER\u0060: an SDL_ColorSpace value\n *   describing the colorspace for output to the display, defaults to\n *   SDL_COLORSPACE_SRGB.\n * - \u0060SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN\u0060: true if the output colorspace is\n *   SDL_COLORSPACE_SRGB_LINEAR and the renderer is showing on a display with\n *   HDR enabled. This property can change dynamically when\n *   SDL_EVENT_DISPLAY_HDR_STATE_CHANGED is sent.\n * - \u0060SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT\u0060: the value of SDR white in the\n *   SDL_COLORSPACE_SRGB_LINEAR colorspace. When HDR is enabled, this value is\n *   automatically multiplied into the color scale. This property can change\n *   dynamically when SDL_EVENT_DISPLAY_HDR_STATE_CHANGED is sent.\n * - \u0060SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT\u0060: the additional high dynamic range\n *   that can be displayed, in terms of the SDR white point. When HDR is not\n *   enabled, this will be 1.0. This property can change dynamically when\n *   SDL_EVENT_DISPLAY_HDR_STATE_CHANGED is sent.\n *\n * With the direct3d renderer:\n *\n * - \u0060SDL_PROP_RENDERER_D3D9_DEVICE_POINTER\u0060: the IDirect3DDevice9 associated\n *   with the renderer\n *\n * With the direct3d11 renderer:\n *\n * - \u0060SDL_PROP_RENDERER_D3D11_DEVICE_POINTER\u0060: the ID3D11Device associated\n *   with the renderer\n *\n * With the direct3d12 renderer:\n *\n * - \u0060SDL_PROP_RENDERER_D3D12_DEVICE_POINTER\u0060: the ID3D12Device associated\n *   with the renderer\n * - \u0060SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER\u0060: the ID3D12CommandQueue\n *   associated with the renderer\n *\n * With the vulkan renderer:\n *\n * - \u0060SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER\u0060: the VkInstance associated\n *   with the renderer\n * - \u0060SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER\u0060: the VkSurfaceKHR associated\n *   with the renderer\n * - \u0060SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER\u0060: the VkPhysicalDevice\n *   associated with the renderer\n * - \u0060SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER\u0060: the VkDevice associated with\n *   the renderer\n * - \u0060SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER\u0060: the queue\n *   family index used for rendering\n * - \u0060SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER\u0060: the queue\n *   family index used for presentation\n * - \u0060SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER\u0060: the number of\n *   swapchain images, or potential frames in flight, used by the Vulkan\n *   renderer\n *\n * \\param renderer the rendering context\n * \\returns a valid property ID on success or 0 on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetProperty\n * \\sa SDL_SetProperty\n */"
    },
    "SDL_GetRenderLogicalPresentation": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "mode",
          "type": {
            "name": "SDL_RendererLogicalPresentation *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_RendererLogicalPresentation",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 118,
                "column": 3
              },
              "inner_type": {
                "name": "SDL_RendererLogicalPresentation",
                "kind": "enum",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_render.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                  "line": 111,
                  "column": 9
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "scale_mode",
          "type": {
            "name": "SDL_ScaleMode *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_ScaleMode",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 76,
                "column": 3
              },
              "inner_type": {
                "name": "SDL_ScaleMode",
                "kind": "enum",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 71,
                  "column": 9
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1318,
        "column": 29
      },
      "comment": "/**\n * Get device independent resolution and presentation mode for rendering.\n *\n * This function gets the width and height of the logical rendering output, or\n * the output size in pixels if a logical resolution is not enabled.\n *\n * \\param renderer the rendering context\n * \\param w an int to be filled with the width\n * \\param h an int to be filled with the height\n * \\param mode a pointer filled in with the presentation mode\n * \\param scale_mode a pointer filled in with the scale mode\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetRenderLogicalPresentation\n */"
    },
    "SDL_GetRenderMetalCommandEncoder": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 2101,
        "column": 31
      },
      "comment": "/**\n * Get the Metal command encoder for the current frame\n *\n * This function returns \u0060void *\u0060, so SDL doesn\u0027t have to include Metal\u0027s\n * headers, but it can be safely cast to an \u0060id\u003CMTLRenderCommandEncoder\u003E\u0060.\n *\n * Note that as of SDL 2.0.18, this will return NULL if Metal refuses to give\n * SDL a drawable to render to, which might happen if the window is\n * hidden/minimized/offscreen. This doesn\u0027t apply to command encoders for\n * render targets, just the window\u0027s backbuffer. Check your return values!\n *\n * \\param renderer The renderer to query\n * \\returns an \u0060id\u003CMTLRenderCommandEncoder\u003E\u0060 on success, or NULL if the\n *          renderer isn\u0027t a Metal renderer or there was an error.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderMetalLayer\n */"
    },
    "SDL_GetRenderMetalLayer": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 2080,
        "column": 31
      },
      "comment": "/**\n * Get the CAMetalLayer associated with the given Metal renderer.\n *\n * This function returns \u0060void *\u0060, so SDL doesn\u0027t have to include Metal\u0027s\n * headers, but it can be safely cast to a \u0060CAMetalLayer *\u0060.\n *\n * \\param renderer The renderer to query\n * \\returns a \u0060CAMetalLayer *\u0060 on success, or NULL if the renderer isn\u0027t a\n *          Metal renderer\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderMetalCommandEncoder\n */"
    },
    "SDL_GetRenderOutputSize": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 458,
        "column": 29
      },
      "comment": "/**\n * Get the output size in pixels of a rendering context.\n *\n * This returns the true output size in pixels, ignoring any render targets or\n * logical size and presentation.\n *\n * \\param renderer the rendering context\n * \\param w a pointer filled in with the width in pixels\n * \\param h a pointer filled in with the height in pixels\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetCurrentRenderOutputSize\n */"
    },
    "SDL_GetRenderScale": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "scaleX",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "scaleY",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1508,
        "column": 29
      },
      "comment": "/**\n * Get the drawing scale for the current target.\n *\n * \\param renderer the rendering context\n * \\param scaleX a pointer filled in with the horizontal scaling factor\n * \\param scaleY a pointer filled in with the vertical scaling factor\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetRenderScale\n */"
    },
    "SDL_GetRenderTarget": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Texture *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Texture",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 129,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1269,
        "column": 38
      },
      "comment": "/**\n * Get the current render target.\n *\n * The default render target is the window for which the renderer was created,\n * and is reported a NULL here.\n *\n * \\param renderer the rendering context\n * \\returns the current render target or NULL for the default render target.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetRenderTarget\n */"
    },
    "SDL_GetRenderViewport": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1406,
        "column": 29
      },
      "comment": "/**\n * Get the drawing area for the current target.\n *\n * \\param renderer the rendering context\n * \\param rect an SDL_Rect structure filled in with the current drawing area\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderViewportSet\n * \\sa SDL_SetRenderViewport\n */"
    },
    "SDL_GetRenderVSync": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "vsync",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 2158,
        "column": 29
      },
      "comment": "/**\n * Get VSync of the given renderer.\n *\n * \\param renderer The renderer to toggle\n * \\param vsync an int filled with 1 for on, 0 for off. All other values are\n *              reserved\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetRenderVSync\n */"
    },
    "SDL_GetRenderWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Window *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Window",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 108,
            "column": 16
          }
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 333,
        "column": 37
      },
      "comment": "/**\n * Get the window associated with a renderer.\n *\n * \\param renderer the renderer to query\n * \\returns the window on success or NULL on failure; call SDL_GetError() for\n *          more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetRevision": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_version.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_version.h",
        "line": 154,
        "column": 37
      },
      "comment": "/**\n * Get the code revision of SDL that is linked against your program.\n *\n * This value is the revision of the code you are linked with and may be\n * different from the code you are compiling with, which is found in the\n * constant SDL_REVISION.\n *\n * The revision is arbitrary string (a hash value) uniquely identifying the\n * exact revision of the SDL library in use, and is only useful in comparing\n * against other revisions. It is NOT an incrementing number.\n *\n * If SDL wasn\u0027t built from a git repository with the appropriate tools, this\n * will return an empty string.\n *\n * Prior to SDL 2.0.16, before development moved to GitHub, this returned a\n * hash for a Mercurial repository.\n *\n * You shouldn\u0027t use this function for anything but logging it for debugging\n * purposes. The string is not intended to be reliable in any way.\n *\n * \\returns an arbitrary string, uniquely identifying the exact revision of\n *          the SDL library in use.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetVersion\n */"
    },
    "SDL_GetRGB": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "pixel",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        },
        {
          "name": "format",
          "type": {
            "name": "const SDL_PixelFormat *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_PixelFormat",
              "kind": "typeAlias",
              "size_of": 56,
              "align_of": 8,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 721,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_PixelFormat",
                "kind": "struct",
                "size_of": 56,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 700,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "r",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "g",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "b",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 958,
        "column": 30
      },
      "comment": "/**\n * Get RGB values from a pixel in the specified format.\n *\n * This function uses the entire 8-bit [0..255] range when converting color\n * components from pixel formats with less than 8-bits per RGB component\n * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,\n * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).\n *\n * \\param pixel a pixel value\n * \\param format an SDL_PixelFormat structure describing the format of the\n *               pixel\n * \\param r a pointer filled in with the red component\n * \\param g a pointer filled in with the green component\n * \\param b a pointer filled in with the blue component\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRGBA\n * \\sa SDL_MapRGB\n * \\sa SDL_MapRGBA\n */"
    },
    "SDL_GetRGBA": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "pixel",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        },
        {
          "name": "format",
          "type": {
            "name": "const SDL_PixelFormat *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_PixelFormat",
              "kind": "typeAlias",
              "size_of": 56,
              "align_of": 8,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 721,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_PixelFormat",
                "kind": "struct",
                "size_of": 56,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 700,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "r",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "g",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "b",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "a",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 987,
        "column": 30
      },
      "comment": "/**\n * Get RGBA values from a pixel in the specified format.\n *\n * This function uses the entire 8-bit [0..255] range when converting color\n * components from pixel formats with less than 8-bits per RGB component\n * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,\n * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).\n *\n * If the surface has no alpha component, the alpha will be returned as 0xff\n * (100% opaque).\n *\n * \\param pixel a pixel value\n * \\param format an SDL_PixelFormat structure describing the format of the\n *               pixel\n * \\param r a pointer filled in with the red component\n * \\param g a pointer filled in with the green component\n * \\param b a pointer filled in with the blue component\n * \\param a a pointer filled in with the alpha component\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRGB\n * \\sa SDL_MapRGB\n * \\sa SDL_MapRGBA\n */"
    },
    "SDL_GetScancodeFromKey": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Scancode",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_scancode.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_scancode.h",
          "line": 437,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_Scancode",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_scancode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_scancode.h",
            "line": 46,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "key",
          "type": {
            "name": "SDL_Keycode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_keycode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keycode.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Sint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 168,
                "column": 17
              },
              "inner_type": {
                "name": "int32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_int32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                  "line": 30,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_keycode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keycode.h",
            "line": 45,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 218,
        "column": 38
      },
      "comment": "/**\n * Get the scancode corresponding to the given key code according to the\n * current keyboard layout.\n *\n * See SDL_Scancode for details.\n *\n * \\param key the desired SDL_Keycode to query\n * \\returns the SDL_Scancode that corresponds to the given SDL_Keycode.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetKeyFromScancode\n * \\sa SDL_GetScancodeName\n */"
    },
    "SDL_GetScancodeFromName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Scancode",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_scancode.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_scancode.h",
          "line": 437,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_Scancode",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_scancode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_scancode.h",
            "line": 46,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 258,
        "column": 38
      },
      "comment": "/**\n * Get a scancode from a human-readable name.\n *\n * \\param name the human-readable scancode name\n * \\returns the SDL_Scancode, or \u0060SDL_SCANCODE_UNKNOWN\u0060 if the name wasn\u0027t\n *          recognized; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetKeyFromName\n * \\sa SDL_GetScancodeFromKey\n * \\sa SDL_GetScancodeName\n */"
    },
    "SDL_GetScancodeName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "scancode",
          "type": {
            "name": "SDL_Scancode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_scancode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_scancode.h",
              "line": 437,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_Scancode",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_scancode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_scancode.h",
                "line": 46,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_scancode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_scancode.h",
            "line": 437,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 243,
        "column": 37
      },
      "comment": "/**\n * Get a human-readable name for a scancode.\n *\n * See SDL_Scancode for details.\n *\n * **Warning**: The returned name is by design not stable across platforms,\n * e.g. the name for \u0060SDL_SCANCODE_LGUI\u0060 is \u0022Left GUI\u0022 under Linux but \u0022Left\n * Windows\u0022 under Microsoft Windows, and some scancodes like\n * \u0060SDL_SCANCODE_NONUSBACKSLASH\u0060 don\u0027t have any name at all. There are even\n * scancodes that share names, e.g. \u0060SDL_SCANCODE_RETURN\u0060 and\n * \u0060SDL_SCANCODE_RETURN2\u0060 (both called \u0022Return\u0022). This function is therefore\n * unsuitable for creating a stable cross-platform two-way mapping between\n * strings and scancodes.\n *\n * \\param scancode the desired SDL_Scancode to query\n * \\returns a pointer to the name for the scancode. If the scancode doesn\u0027t\n *          have a name this function returns an empty string (\u0022\u0022).\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetScancodeFromKey\n * \\sa SDL_GetScancodeFromName\n */"
    },
    "SDL_GetSemaphoreValue": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "sem",
          "type": {
            "name": "SDL_Semaphore *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Semaphore",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 481,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 611,
        "column": 32
      },
      "comment": "/**\n * Get the current value of a semaphore.\n *\n * \\param sem the semaphore to query\n * \\returns the current value of the semaphore.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetSensorData": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "sensor",
          "type": {
            "name": "SDL_Sensor *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Sensor",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_sensor.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
                "line": 51,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "data",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "num_values",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 261,
        "column": 29
      },
      "comment": "/**\n * Get the current state of an opened sensor.\n *\n * The number of values and interpretation of the data is sensor dependent.\n *\n * \\param sensor The SDL_Sensor object to query\n * \\param data A pointer filled with the current sensor state\n * \\param num_values The number of values to write to data\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetSensorFromInstanceID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Sensor *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Sensor",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_sensor.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
            "line": 51,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_SensorID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_sensor.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
              "line": 60,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_sensor.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
            "line": 60,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 191,
        "column": 37
      },
      "comment": "/**\n * Return the SDL_Sensor associated with an instance ID.\n *\n * \\param instance_id the sensor instance ID\n * \\returns an SDL_Sensor object.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetSensorInstanceID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_SensorID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_sensor.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
          "line": 60,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "sensor",
          "type": {
            "name": "SDL_Sensor *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Sensor",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_sensor.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
                "line": 51,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 246,
        "column": 38
      },
      "comment": "/**\n * Get the instance ID of a sensor.\n *\n * \\param sensor The SDL_Sensor object to inspect\n * \\returns the sensor instance ID, or 0 if \u0060sensor\u0060 is NULL.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetSensorInstanceName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_SensorID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_sensor.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
              "line": 60,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_sensor.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
            "line": 60,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 149,
        "column": 37
      },
      "comment": "/**\n * Get the implementation dependent name of a sensor.\n *\n * \\param instance_id the sensor instance ID\n * \\returns the sensor name, or NULL if \u0060instance_id\u0060 is not valid\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetSensorInstanceNonPortableType": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_SensorID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_sensor.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
              "line": 60,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_sensor.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
            "line": 60,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 171,
        "column": 29
      },
      "comment": "/**\n * Get the platform dependent type of a sensor.\n *\n * \\param instance_id the sensor instance ID\n * \\returns the sensor platform dependent type, or -1 if \u0060instance_id\u0060 is not\n *          valid\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetSensorInstanceType": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_SensorType",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_sensor.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
          "line": 79,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_SensorType",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_sensor.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
            "line": 69,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_SensorID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_sensor.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
              "line": 60,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_sensor.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
            "line": 60,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 160,
        "column": 40
      },
      "comment": "/**\n * Get the type of a sensor.\n *\n * \\param instance_id the sensor instance ID\n * \\returns the SDL_SensorType, or \u0060SDL_SENSOR_INVALID\u0060 if \u0060instance_id\u0060 is\n *          not valid\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetSensorName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "sensor",
          "type": {
            "name": "SDL_Sensor *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Sensor",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_sensor.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
                "line": 51,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 215,
        "column": 37
      },
      "comment": "/**\n * Get the implementation dependent name of a sensor\n *\n * \\param sensor The SDL_Sensor object\n * \\returns the sensor name, or NULL if \u0060sensor\u0060 is NULL.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetSensorNonPortableType": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "sensor",
          "type": {
            "name": "SDL_Sensor *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Sensor",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_sensor.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
                "line": 51,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 236,
        "column": 29
      },
      "comment": "/**\n * Get the platform dependent type of a sensor.\n *\n * \\param sensor The SDL_Sensor object to inspect\n * \\returns the sensor platform dependent type, or -1 if \u0060sensor\u0060 is NULL.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetSensorProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PropertiesID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_properties.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
          "line": 42,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "sensor",
          "type": {
            "name": "SDL_Sensor *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Sensor",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_sensor.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
                "line": 51,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 205,
        "column": 42
      },
      "comment": "/**\n * Get the properties associated with a sensor.\n *\n * \\param sensor The SDL_Sensor object\n * \\returns a valid property ID on success or 0 on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetProperty\n * \\sa SDL_SetProperty\n */"
    },
    "SDL_GetSensors": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_SensorID *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_SensorID",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_sensor.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
            "line": 60,
            "column": 16
          },
          "inner_type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "count",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 139,
        "column": 39
      },
      "comment": "/**\n * Get a list of currently connected sensors.\n *\n * \\param count a pointer filled in with the number of sensors returned\n * \\returns a 0 terminated array of sensor instance IDs which should be freed\n *          with SDL_free(), or NULL on error; call SDL_GetError() for more\n *          details.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetSensorType": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_SensorType",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_sensor.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
          "line": 79,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_SensorType",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_sensor.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
            "line": 69,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "sensor",
          "type": {
            "name": "SDL_Sensor *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Sensor",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_sensor.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
                "line": 51,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 226,
        "column": 40
      },
      "comment": "/**\n * Get the type of a sensor.\n *\n * \\param sensor The SDL_Sensor object to inspect\n * \\returns the SDL_SensorType type, or \u0060SDL_SENSOR_INVALID\u0060 if \u0060sensor\u0060 is\n *          NULL.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetStorageFileSize": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "storage",
          "type": {
            "name": "SDL_Storage *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Storage",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_storage.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
                "line": 78,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "path",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "length",
          "type": {
            "name": "Uint64 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint64",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 187,
                "column": 18
              },
              "inner_type": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_uint64_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                  "line": 31,
                  "column": 28,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 217,
        "column": 29
      },
      "comment": "/**\n * Query the size of a file within a storage container.\n *\n * \\param storage a storage container to query\n * \\param path the relative path of the file to query\n * \\param length a pointer to be filled with the file\u0027s length\n * \\returns 0 if the file could be queried, a negative value otherwise; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ReadStorageFile\n * \\sa SDL_StorageReady\n */"
    },
    "SDL_GetStoragePathInfo": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "storage",
          "type": {
            "name": "SDL_Storage *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Storage",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_storage.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
                "line": 78,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "path",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "info",
          "type": {
            "name": "SDL_PathInfo *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_PathInfo",
              "kind": "typeAlias",
              "size_of": 40,
              "align_of": 8,
              "location": {
                "fileName": "SDL_filesystem.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
                "line": 255,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_PathInfo",
                "kind": "struct",
                "size_of": 40,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_filesystem.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
                  "line": 248,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 329,
        "column": 29
      },
      "comment": "/**\n * Get information about a filesystem path in a storage container.\n *\n * \\param storage a storage container\n * \\param path the path to query\n * \\param info a pointer filled in with information about the path, or NULL to\n *             check for the existence of a file\n * \\returns 0 on success or a negative error code if the file doesn\u0027t exist,\n *          or another failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_StorageReady\n */"
    },
    "SDL_GetStorageSpaceRemaining": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint64",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 187,
          "column": 18
        },
        "inner_type": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_uint64_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
            "line": 31,
            "column": 28,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "storage",
          "type": {
            "name": "SDL_Storage *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Storage",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_storage.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
                "line": 78,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 342,
        "column": 32
      },
      "comment": "/**\n * Queries the remaining space in a storage container.\n *\n * \\param storage a storage container to query\n * \\returns the amount of remaining space, in bytes\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_StorageReady\n * \\sa SDL_WriteStorageFile\n */"
    },
    "SDL_GetStringProperty": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "default_value",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 341,
        "column": 37
      },
      "comment": "/**\n * Get a string property on a set of properties\n *\n * \\param props the properties to query\n * \\param name the name of the property to query\n * \\param default_value the default value of the property\n * \\returns the value of the property, or \u0060default_value\u0060 if it is not set or\n *          not a string property.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetPropertyType\n * \\sa SDL_HasProperty\n * \\sa SDL_SetStringProperty\n */"
    },
    "SDL_GetSurfaceAlphaMod": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "alpha",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 569,
        "column": 29
      },
      "comment": "/**\n * Get the additional alpha value used in blit operations.\n *\n * \\param surface the SDL_Surface structure to query\n * \\param alpha a pointer filled in with the current alpha value\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetSurfaceColorMod\n * \\sa SDL_SetSurfaceAlphaMod\n */"
    },
    "SDL_GetSurfaceBlendMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "blendMode",
          "type": {
            "name": "SDL_BlendMode *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_BlendMode",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_blendmode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
                "line": 60,
                "column": 3
              },
              "inner_type": {
                "name": "SDL_BlendMode",
                "kind": "enum",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_blendmode.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
                  "line": 40,
                  "column": 9
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 601,
        "column": 29
      },
      "comment": "/**\n * Get the blend mode used for blit operations.\n *\n * \\param surface the SDL_Surface structure to query\n * \\param blendMode a pointer filled in with the current SDL_BlendMode\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetSurfaceBlendMode\n */"
    },
    "SDL_GetSurfaceClipRect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 641,
        "column": 29
      },
      "comment": "/**\n * Get the clipping rectangle for a surface.\n *\n * When \u0060surface\u0060 is the destination of a blit, only the area within the clip\n * rectangle is drawn into.\n *\n * \\param surface the SDL_Surface structure representing the surface to be\n *                clipped\n * \\param rect an SDL_Rect structure filled in with the clipping rectangle for\n *             the surface\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetSurfaceClipRect\n */"
    },
    "SDL_GetSurfaceColorKey": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "key",
          "type": {
            "name": "Uint32 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 493,
        "column": 29
      },
      "comment": "/**\n * Get the color key (transparent pixel) for a surface.\n *\n * The color key is a pixel of the format used by the surface, as generated by\n * SDL_MapRGB().\n *\n * If the surface doesn\u0027t have color key enabled this function returns -1.\n *\n * \\param surface the SDL_Surface structure to query\n * \\param key a pointer filled in with the transparent pixel\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetSurfaceColorKey\n * \\sa SDL_SurfaceHasColorKey\n */"
    },
    "SDL_GetSurfaceColorMod": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "r",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "g",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "b",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 534,
        "column": 29
      },
      "comment": "/**\n * Get the additional color value multiplied into blit operations.\n *\n * \\param surface the SDL_Surface structure to query\n * \\param r a pointer filled in with the current red color value\n * \\param g a pointer filled in with the current green color value\n * \\param b a pointer filled in with the current blue color value\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetSurfaceAlphaMod\n * \\sa SDL_SetSurfaceColorMod\n */"
    },
    "SDL_GetSurfaceColorspace": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "colorspace",
          "type": {
            "name": "SDL_Colorspace *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Colorspace",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 660,
                "column": 3
              },
              "inner_type": {
                "name": "SDL_Colorspace",
                "kind": "enum",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 567,
                  "column": 9
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 269,
        "column": 29
      },
      "comment": "/**\n * Get the colorspace used by a surface.\n *\n * The colorspace defaults to SDL_COLORSPACE_SRGB_LINEAR for floating point\n * formats, SDL_COLORSPACE_HDR10 for 10-bit formats, SDL_COLORSPACE_SRGB for\n * other RGB surfaces and SDL_COLORSPACE_BT709_FULL for YUV textures.\n *\n * \\param surface the SDL_Surface structure to query\n * \\param colorspace a pointer filled in with an SDL_ColorSpace value\n *                   describing the surface colorspace\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetSurfaceProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PropertiesID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_properties.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
          "line": 42,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 232,
        "column": 42
      },
      "comment": "/**\n * Get the properties associated with a surface.\n *\n * The following properties are understood by SDL:\n *\n * - \u0060SDL_PROP_SURFACE_COLORSPACE_NUMBER\u0060: an SDL_ColorSpace value describing\n *   the surface colorspace, defaults to SDL_COLORSPACE_SRGB_LINEAR for\n *   floating point formats, SDL_COLORSPACE_HDR10 for 10-bit formats,\n *   SDL_COLORSPACE_SRGB for other RGB surfaces and SDL_COLORSPACE_BT709_FULL\n *   for YUV surfaces.\n * - \u0060SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT\u0060: for HDR10 and floating point\n *   surfaces, this defines the value of 100% diffuse white, with higher\n *   values being displayed in the High Dynamic Range headroom. This defaults\n *   to 203 for HDR10 surfaces and 1.0 for floating point surfaces.\n * - \u0060SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT\u0060: for HDR10 and floating point\n *   surfaces, this defines the maximum dynamic range used by the content, in\n *   terms of the SDR white point. This defaults to 0.0, which disables tone\n *   mapping.\n * - \u0060SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING\u0060: the tone mapping operator\n *   used when compressing from a surface with high dynamic range to another\n *   with lower dynamic range. Currently this supports \u0022chrome\u0022, which uses\n *   the same tone mapping that Chrome uses for HDR content, the form \u0022*=N\u0022,\n *   where N is a floating point scale factor applied in linear space, and\n *   \u0022none\u0022, which disables tone mapping. This defaults to \u0022chrome\u0022.\n *\n * \\param surface the SDL_Surface structure to query\n * \\returns a valid property ID on success or 0 on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetProperty\n * \\sa SDL_SetProperty\n */"
    },
    "SDL_GetSystemRAM": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 273,
        "column": 29
      },
      "comment": "/**\n * Get the amount of RAM configured in the system.\n *\n * \\returns the amount of RAM configured in the system in MiB.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetSystemTheme": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_SystemTheme",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_video.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
          "line": 71,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_SystemTheme",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 66,
            "column": 9
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 300,
        "column": 41
      },
      "comment": "/**\n * Get the current system theme\n *\n * \\returns the current system theme, light, dark, or unknown\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetTextureAlphaMod": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "alpha",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 973,
        "column": 29
      },
      "comment": "/**\n * Get the additional alpha value multiplied into render copy operations.\n *\n * \\param texture the texture to query\n * \\param alpha a pointer filled in with the current alpha value\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetTextureAlphaModFloat\n * \\sa SDL_GetTextureColorMod\n * \\sa SDL_SetTextureAlphaMod\n */"
    },
    "SDL_GetTextureAlphaModFloat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "alpha",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 989,
        "column": 29
      },
      "comment": "/**\n * Get the additional alpha value multiplied into render copy operations.\n *\n * \\param texture the texture to query\n * \\param alpha a pointer filled in with the current alpha value\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetTextureAlphaMod\n * \\sa SDL_GetTextureColorModFloat\n * \\sa SDL_SetTextureAlphaModFloat\n */"
    },
    "SDL_GetTextureBlendMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "blendMode",
          "type": {
            "name": "SDL_BlendMode *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_BlendMode",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_blendmode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
                "line": 60,
                "column": 3
              },
              "inner_type": {
                "name": "SDL_BlendMode",
                "kind": "enum",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_blendmode.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
                  "line": 40,
                  "column": 9
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1020,
        "column": 29
      },
      "comment": "/**\n * Get the blend mode used for texture copy operations.\n *\n * \\param texture the texture to query\n * \\param blendMode a pointer filled in with the current SDL_BlendMode\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetTextureBlendMode\n */"
    },
    "SDL_GetTextureColorMod": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "r",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "g",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "b",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 891,
        "column": 29
      },
      "comment": "/**\n * Get the additional color value multiplied into render copy operations.\n *\n * \\param texture the texture to query\n * \\param r a pointer filled in with the current red color value\n * \\param g a pointer filled in with the current green color value\n * \\param b a pointer filled in with the current blue color value\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetTextureAlphaMod\n * \\sa SDL_GetTextureColorModFloat\n * \\sa SDL_SetTextureColorMod\n */"
    },
    "SDL_GetTextureColorModFloat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "r",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "g",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "b",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 909,
        "column": 29
      },
      "comment": "/**\n * Get the additional color value multiplied into render copy operations.\n *\n * \\param texture the texture to query\n * \\param r a pointer filled in with the current red color value\n * \\param g a pointer filled in with the current green color value\n * \\param b a pointer filled in with the current blue color value\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetTextureAlphaModFloat\n * \\sa SDL_GetTextureColorMod\n * \\sa SDL_SetTextureColorModFloat\n */"
    },
    "SDL_GetTextureProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PropertiesID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_properties.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
          "line": 42,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 759,
        "column": 42
      },
      "comment": "/**\n * Get the properties associated with a texture.\n *\n * The following read-only properties are provided by SDL:\n *\n * - \u0060SDL_PROP_TEXTURE_COLORSPACE_NUMBER\u0060: an SDL_ColorSpace value describing\n *   the colorspace used by the texture\n * - \u0060SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT\u0060: for HDR10 and floating point\n *   textures, this defines the value of 100% diffuse white, with higher\n *   values being displayed in the High Dynamic Range headroom. This defaults\n *   to 100 for HDR10 textures and 1.0 for other textures.\n * - \u0060SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT\u0060: for HDR10 and floating point\n *   textures, this defines the maximum dynamic range used by the content, in\n *   terms of the SDR white point. If this is defined, any values outside the\n *   range supported by the display will be scaled into the available HDR\n *   headroom, otherwise they are clipped. This defaults to 1.0 for SDR\n *   textures, 4.0 for HDR10 textures, and no default for floating point\n *   textures.\n *\n * With the direct3d11 renderer:\n *\n * - \u0060SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER\u0060: the ID3D11Texture2D associated\n *   with the texture\n * - \u0060SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER\u0060: the ID3D11Texture2D\n *   associated with the U plane of a YUV texture\n * - \u0060SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER\u0060: the ID3D11Texture2D\n *   associated with the V plane of a YUV texture\n *\n * With the direct3d12 renderer:\n *\n * - \u0060SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER\u0060: the ID3D12Resource associated\n *   with the texture\n * - \u0060SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER\u0060: the ID3D12Resource associated\n *   with the U plane of a YUV texture\n * - \u0060SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER\u0060: the ID3D12Resource associated\n *   with the V plane of a YUV texture\n *\n * With the vulkan renderer:\n *\n * - \u0060SDL_PROP_TEXTURE_VULKAN_TEXTURE_POINTER\u0060: the VkImage associated with\n *   the texture\n * - \u0060SDL_PROP_TEXTURE_VULKAN_TEXTURE_U_POINTER\u0060: the VkImage associated with\n *   the U plane of a YUV texture\n * - \u0060SDL_PROP_TEXTURE_VULKAN_TEXTURE_V_POINTER\u0060: the VkImage associated with\n *   the V plane of a YUV texture\n * - \u0060SDL_PROP_TEXTURE_VULKAN_TEXTURE_UV_POINTER\u0060: the VkImage associated with\n *   the UV plane of a NV12/NV21 texture\n *\n * With the opengl renderer:\n *\n * - \u0060SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER\u0060: the GLuint texture associated\n *   with the texture\n * - \u0060SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER\u0060: the GLuint texture\n *   associated with the UV plane of an NV12 texture\n * - \u0060SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER\u0060: the GLuint texture associated\n *   with the U plane of a YUV texture\n * - \u0060SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER\u0060: the GLuint texture associated\n *   with the V plane of a YUV texture\n * - \u0060SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER\u0060: the GLenum for the\n *   texture target (\u0060GL_TEXTURE_2D\u0060, \u0060GL_TEXTURE_RECTANGLE_ARB\u0060, etc)\n * - \u0060SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT\u0060: the texture coordinate width of\n *   the texture (0.0 - 1.0)\n * - \u0060SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT\u0060: the texture coordinate height of\n *   the texture (0.0 - 1.0)\n *\n * With the opengles2 renderer:\n *\n * - \u0060SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER\u0060: the GLuint texture\n *   associated with the texture\n * - \u0060SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER\u0060: the GLuint texture\n *   associated with the UV plane of an NV12 texture\n * - \u0060SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER\u0060: the GLuint texture\n *   associated with the U plane of a YUV texture\n * - \u0060SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER\u0060: the GLuint texture\n *   associated with the V plane of a YUV texture\n * - \u0060SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER\u0060: the GLenum for the\n *   texture target (\u0060GL_TEXTURE_2D\u0060, \u0060GL_TEXTURE_EXTERNAL_OES\u0060, etc)\n *\n * With the vulkan renderer:\n *\n * - \u0060SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER\u0060: the VkImage associated with the\n *   texture\n *\n * \\param texture the texture to query\n * \\returns a valid property ID on success or 0 on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetProperty\n * \\sa SDL_SetProperty\n */"
    },
    "SDL_GetTextureScaleMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "scaleMode",
          "type": {
            "name": "SDL_ScaleMode *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_ScaleMode",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 76,
                "column": 3
              },
              "inner_type": {
                "name": "SDL_ScaleMode",
                "kind": "enum",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 71,
                  "column": 9
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1052,
        "column": 29
      },
      "comment": "/**\n * Get the scale mode used for texture scale operations.\n *\n * \\param texture the texture to query.\n * \\param scaleMode a pointer filled in with the current scale mode.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetTextureScaleMode\n */"
    },
    "SDL_GetThreadID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_ThreadID",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_thread.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
          "line": 53,
          "column": 16
        },
        "inner_type": {
          "name": "Uint64",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 187,
            "column": 18
          },
          "inner_type": {
            "name": "uint64_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_uint64_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
              "line": 31,
              "column": 28,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned long long",
              "kind": "primitive",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "thread",
          "type": {
            "name": "SDL_Thread *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Thread",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_thread.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
                "line": 49,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 286,
        "column": 38
      },
      "comment": "/**\n * Get the thread identifier for the specified thread.\n *\n * This thread identifier is as reported by the underlying operating system.\n * If SDL is running on a platform that does not support threads the return\n * value will always be zero.\n *\n * \\param thread the thread to query\n * \\returns the ID of the specified thread, or the ID of the current thread if\n *          \u0060thread\u0060 is NULL.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetCurrentThreadID\n */"
    },
    "SDL_GetThreadName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "thread",
          "type": {
            "name": "SDL_Thread *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Thread",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_thread.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
                "line": 49,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 251,
        "column": 37
      },
      "comment": "/**\n * Get the thread name as it was specified in SDL_CreateThread().\n *\n * This is internal memory, not to be freed by the caller, and remains valid\n * until the specified thread is cleaned up by SDL_WaitThread().\n *\n * \\param thread the thread to query\n * \\returns a pointer to a UTF-8 string that names the specified thread, or\n *          NULL if it doesn\u0027t have a name.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetTicks": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint64",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 187,
          "column": 18
        },
        "inner_type": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_uint64_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
            "line": 31,
            "column": 28,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_timer.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
        "line": 63,
        "column": 32
      },
      "comment": "/**\n * Get the number of milliseconds since SDL library initialization.\n *\n * \\returns an unsigned 64-bit value representing the number of milliseconds\n *          since the SDL library initialized.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetTicksNS": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint64",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 187,
          "column": 18
        },
        "inner_type": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_uint64_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
            "line": 31,
            "column": 28,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_timer.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
        "line": 73,
        "column": 32
      },
      "comment": "/**\n * Get the number of nanoseconds since SDL library initialization.\n *\n * \\returns an unsigned 64-bit value representing the number of nanoseconds\n *          since the SDL library initialized.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetTLS": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "type": {
            "name": "SDL_TLSID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_thread.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
              "line": 56,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_thread.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
            "line": 56,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 400,
        "column": 32
      },
      "comment": "/**\n * Get the current thread\u0027s value associated with a thread local storage ID.\n *\n * \\param id the thread local storage ID\n * \\returns the value associated with the ID for the current thread or NULL if\n *          no value has been set; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetTLS\n */"
    },
    "SDL_GetTouchDeviceName": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "touchID",
          "type": {
            "name": "SDL_TouchID",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_touch.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
              "line": 41,
              "column": 16
            },
            "inner_type": {
              "name": "Uint64",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 187,
                "column": 18
              },
              "inner_type": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_uint64_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                  "line": 31,
                  "column": 28,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_touch.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
            "line": 41,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_touch.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
        "line": 97,
        "column": 37
      },
      "comment": "/**\n * Get the touch device name as reported from the driver.\n *\n * You do not own the returned string, do not modify or free it.\n *\n * \\param touchID the touch device instance ID.\n * \\returns touch device name, or NULL on error; call SDL_GetError() for more\n *          details.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetTouchDevices": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_TouchID *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_TouchID",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "SDL_touch.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
            "line": 41,
            "column": 16
          },
          "inner_type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "count",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_touch.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
        "line": 84,
        "column": 38
      },
      "comment": "/**\n * Get a list of registered touch devices.\n *\n * On some platforms SDL first sees the touch device if it was actually used.\n * Therefore the returned list might be empty, although devices are available.\n * After using all devices at least once the number will be correct.\n *\n * This was fixed for Android in SDL 2.0.1.\n *\n * \\param count a pointer filled in with the number of devices returned, can\n *              be NULL.\n * \\returns a 0 terminated array of touch device IDs which should be freed\n *          with SDL_free(), or NULL on error; call SDL_GetError() for more\n *          details.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetTouchDeviceType": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_TouchDeviceType",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_touch.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
          "line": 50,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_TouchDeviceType",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_touch.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
            "line": 44,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "touchID",
          "type": {
            "name": "SDL_TouchID",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_touch.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
              "line": 41,
              "column": 16
            },
            "inner_type": {
              "name": "Uint64",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 187,
                "column": 18
              },
              "inner_type": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_uint64_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                  "line": 31,
                  "column": 28,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_touch.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
            "line": 41,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_touch.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
        "line": 107,
        "column": 45
      },
      "comment": "/**\n * Get the type of the given touch device.\n *\n * \\param touchID the ID of a touch device\n * \\returns touch device type\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetTouchFinger": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Finger *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_Finger",
          "kind": "typeAlias",
          "size_of": 24,
          "align_of": 8,
          "location": {
            "fileName": "SDL_touch.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
            "line": 58,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_Finger",
            "kind": "struct",
            "size_of": 24,
            "align_of": 8,
            "location": {
              "fileName": "SDL_touch.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
              "line": 52,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "touchID",
          "type": {
            "name": "SDL_TouchID",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_touch.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
              "line": 41,
              "column": 16
            },
            "inner_type": {
              "name": "Uint64",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 187,
                "column": 18
              },
              "inner_type": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_uint64_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                  "line": 31,
                  "column": 28,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_touch.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
            "line": 41,
            "column": 16
          }
        },
        {
          "name": "index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_touch.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
        "line": 137,
        "column": 38
      },
      "comment": "/**\n * Get the finger object for specified touch device ID and finger index.\n *\n * The returned resource is owned by SDL and should not be deallocated.\n *\n * \\param touchID the ID of the requested touch device\n * \\param index the index of the requested finger\n * \\returns a pointer to the SDL_Finger object or NULL if no object at the\n *          given ID and index could be found.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetNumTouchFingers\n */"
    },
    "SDL_GetUserFolder": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "folder",
          "type": {
            "name": "SDL_Folder",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_filesystem.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
              "line": 206,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_Folder",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_filesystem.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
                "line": 168,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_filesystem.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
            "line": 206,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_filesystem.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
        "line": 235,
        "column": 31
      },
      "comment": "/**\n * Finds the most suitable user folder for the specified purpose, and returns\n * its path in OS-specific notation.\n *\n * Many OSes provide certain standard folders for certain purposes, such as\n * storing pictures, music or videos for a certain user. This function gives\n * the path for many of those special locations.\n *\n * This function is specifically for _user_ folders, which are meant for the\n * user to access and manage. For application-specific folders, meant to hold\n * data for the application to manage, see SDL_GetBasePath() and\n * SDL_GetPrefPath().\n *\n * Note that the function is expensive, and should be called once at the\n * beginning of the execution and kept for as long as needed.\n *\n * The returned value is owned by the caller and should be freed with\n * SDL_free().\n *\n * If NULL is returned, the error may be obtained with SDL_GetError().\n *\n * \\param folder The type of folder to find\n * \\returns Either a null-terminated C string containing the full path to the\n *          folder, or NULL if an error happened.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetVersion": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "ver",
          "type": {
            "name": "SDL_Version *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Version",
              "kind": "typeAlias",
              "size_of": 3,
              "align_of": 1,
              "location": {
                "fileName": "SDL_version.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_version.h",
                "line": 56,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Version",
                "kind": "struct",
                "size_of": 3,
                "align_of": 1,
                "location": {
                  "fileName": "SDL_version.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_version.h",
                  "line": 51,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_version.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_version.h",
        "line": 125,
        "column": 29
      },
      "comment": "/**\n * Get the version of SDL that is linked against your program.\n *\n * If you are linking to SDL dynamically, then it is possible that the current\n * version will be different than the version you compiled against. This\n * function returns the current version, while SDL_VERSION() is a macro that\n * tells you what version you compiled with.\n *\n * This function may be called safely at any time, even before SDL_Init().\n *\n * \\param ver the SDL_Version structure that contains the version information\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRevision\n */"
    },
    "SDL_GetVideoDriver": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 278,
        "column": 37
      },
      "comment": "/**\n * Get the name of a built in video driver.\n *\n * The video drivers are presented in the order in which they are normally\n * checked during initialization.\n *\n * \\param index the index of a video driver\n * \\returns the name of the video driver with the given **index**.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetNumVideoDrivers\n */"
    },
    "SDL_GetWindowBordersSize": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "top",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "left",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "bottom",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "right",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1357,
        "column": 29
      },
      "comment": "/**\n * Get the size of a window\u0027s borders (decorations) around the client area.\n *\n * Note: If this function fails (returns -1), the size values will be\n * initialized to 0, 0, 0, 0 (if a non-NULL pointer is provided), as if the\n * window in question was borderless.\n *\n * Note: This function may fail on systems where the window has not yet been\n * decorated by the display server (for example, immediately after calling\n * SDL_CreateWindow). It is recommended that you wait at least until the\n * window has been presented and composited, so that the window system has a\n * chance to decorate the window and provide the border dimensions to SDL.\n *\n * This function also returns -1 if getting the information is not supported.\n *\n * \\param window the window to query the size values of the border\n *               (decorations) from\n * \\param top pointer to variable for storing the size of the top border; NULL\n *            is permitted\n * \\param left pointer to variable for storing the size of the left border;\n *             NULL is permitted\n * \\param bottom pointer to variable for storing the size of the bottom\n *               border; NULL is permitted\n * \\param right pointer to variable for storing the size of the right border;\n *              NULL is permitted\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowSize\n */"
    },
    "SDL_GetWindowDisplayScale": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 628,
        "column": 31
      },
      "comment": "/**\n * Get the content display scale relative to a window\u0027s pixel size.\n *\n * This is a combination of the window pixel density and the display content\n * scale, and is the expected scale for displaying content in this window. For\n * example, if a 3840x2160 window had a display scale of 2.0, the user expects\n * the content to take twice as many pixels and be the same physical size as\n * if it were being displayed in a 1920x1080 window with a display scale of\n * 1.0.\n *\n * Conceptually this value corresponds to the scale display setting, and is\n * updated when that setting is changed, or the window moves to a display with\n * a different scale setting.\n *\n * \\param window the window to query\n * \\returns the display scale, or 0.0f on failure; call SDL_GetError() for\n *          more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetWindowFlags": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_WindowFlags",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_video.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
          "line": 115,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1158,
        "column": 41
      },
      "comment": "/**\n * Get the window flags.\n *\n * \\param window the window to query\n * \\returns a mask of the SDL_WindowFlags associated with \u0060window\u0060\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateWindow\n * \\sa SDL_HideWindow\n * \\sa SDL_MaximizeWindow\n * \\sa SDL_MinimizeWindow\n * \\sa SDL_SetWindowFullscreen\n * \\sa SDL_SetWindowMouseGrab\n * \\sa SDL_ShowWindow\n */"
    },
    "SDL_GetWindowFromID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Window *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Window",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 108,
            "column": 16
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "type": {
            "name": "SDL_WindowID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 45,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 996,
        "column": 37
      },
      "comment": "/**\n * Get a window from a stored ID.\n *\n * The numeric ID is what SDL_WindowEvent references, and is necessary to map\n * these events to specific SDL_Window objects.\n *\n * \\param id the ID of the window\n * \\returns the window associated with \u0060id\u0060 or NULL if it doesn\u0027t exist; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowID\n */"
    },
    "SDL_GetWindowFullscreenMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const SDL_DisplayMode *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_DisplayMode",
          "kind": "typeAlias",
          "size_of": 32,
          "align_of": 8,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 91,
            "column": 3
          },
          "inner_type": {
            "name": "SDL_DisplayMode",
            "kind": "struct",
            "size_of": 32,
            "align_of": 8,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 82,
              "column": 9
            }
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 675,
        "column": 48
      },
      "comment": "/**\n * Query the display mode to use when a window is visible at fullscreen.\n *\n * \\param window the window to query\n * \\returns a pointer to the exclusive fullscreen mode to use or NULL for\n *          borderless fullscreen desktop mode\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetWindowFullscreenMode\n * \\sa SDL_SetWindowFullscreen\n */"
    },
    "SDL_GetWindowICCProfile": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_size_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
                "line": 31,
                "column": 32,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_size_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 70,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 689,
        "column": 31
      },
      "comment": "/**\n * Get the raw ICC profile data for the screen the window is currently on.\n *\n * Data returned should be freed with SDL_free.\n *\n * \\param window the window to query\n * \\param size the size of the ICC profile\n * \\returns the raw ICC profile data on success or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetWindowID": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_WindowID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_video.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
          "line": 45,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 980,
        "column": 38
      },
      "comment": "/**\n * Get the numeric ID of a window.\n *\n * The numeric ID is what SDL_WindowEvent references, and is necessary to map\n * these events to specific SDL_Window objects.\n *\n * \\param window the window to query\n * \\returns the ID of the window on success or 0 on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowFromID\n */"
    },
    "SDL_GetWindowKeyboardGrab": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1837,
        "column": 34
      },
      "comment": "/**\n * Get a window\u0027s keyboard grab mode.\n *\n * \\param window the window to query\n * \\returns SDL_TRUE if keyboard is grabbed, and SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetWindowKeyboardGrab\n */"
    },
    "SDL_GetWindowMaximumSize": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1442,
        "column": 29
      },
      "comment": "/**\n * Get the maximum size of a window\u0027s client area.\n *\n * \\param window the window to query\n * \\param w a pointer filled in with the maximum width of the window, may be\n *          NULL\n * \\param h a pointer filled in with the maximum height of the window, may be\n *          NULL\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowMinimumSize\n * \\sa SDL_SetWindowMaximumSize\n */"
    },
    "SDL_GetWindowMinimumSize": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1408,
        "column": 29
      },
      "comment": "/**\n * Get the minimum size of a window\u0027s client area.\n *\n * \\param window the window to query\n * \\param w a pointer filled in with the minimum width of the window, may be\n *          NULL\n * \\param h a pointer filled in with the minimum height of the window, may be\n *          NULL\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowMaximumSize\n * \\sa SDL_SetWindowMinimumSize\n */"
    },
    "SDL_GetWindowMouseGrab": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1849,
        "column": 34
      },
      "comment": "/**\n * Get a window\u0027s mouse grab mode.\n *\n * \\param window the window to query\n * \\returns SDL_TRUE if mouse is grabbed, and SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetWindowKeyboardGrab\n */"
    },
    "SDL_GetWindowMouseRect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const SDL_Rect *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_Rect",
          "kind": "typeAlias",
          "size_of": 16,
          "align_of": 4,
          "location": {
            "fileName": "SDL_rect.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
            "line": 80,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_Rect",
            "kind": "struct",
            "size_of": 16,
            "align_of": 4,
            "location": {
              "fileName": "SDL_rect.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
              "line": 76,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1893,
        "column": 41
      },
      "comment": "/**\n * Get the mouse confinement rectangle of a window.\n *\n * \\param window The window to query\n * \\returns A pointer to the mouse confinement rectangle of a window, or NULL\n *          if there isn\u0027t one.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetWindowMouseRect\n */"
    },
    "SDL_GetWindowOpacity": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "out_opacity",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1933,
        "column": 29
      },
      "comment": "/**\n * Get the opacity of a window.\n *\n * If transparency isn\u0027t supported on this platform, opacity will be reported\n * as 1.0f without error.\n *\n * The parameter \u0060opacity\u0060 is ignored if it is NULL.\n *\n * This function also returns -1 if an invalid window was provided.\n *\n * \\param window the window to get the current opacity value from\n * \\param out_opacity the float filled in (0.0f - transparent, 1.0f - opaque)\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetWindowOpacity\n */"
    },
    "SDL_GetWindowParent": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Window *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Window",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 108,
            "column": 16
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1009,
        "column": 37
      },
      "comment": "/**\n * Get parent of a window.\n *\n * \\param window the window to query\n * \\returns the parent of the window on success or NULL if the window has no\n *          parent.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreatePopupWindow\n */"
    },
    "SDL_GetWindowPixelDensity": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 606,
        "column": 31
      },
      "comment": "/**\n * Get the pixel density of a window.\n *\n * This is a ratio of pixel size to window size. For example, if the window is\n * 1920x1080 and it has a high density back buffer of 3840x2160 pixels, it\n * would have a pixel density of 2.0.\n *\n * \\param window the window to query\n * \\returns the pixel density or 0.0f on failure; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowDisplayScale\n */"
    },
    "SDL_GetWindowPixelFormat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 701,
        "column": 32
      },
      "comment": "/**\n * Get the pixel format associated with the window.\n *\n * \\param window the window to query\n * \\returns the pixel format of the window on success or\n *          SDL_PIXELFORMAT_UNKNOWN on failure; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GetWindowPosition": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "x",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1260,
        "column": 29
      },
      "comment": "/**\n * Get the position of a window.\n *\n * This is the current position of the window as last reported by the\n * windowing system.\n *\n * If you do not need the value for one of the positions a NULL may be passed\n * in the \u0060x\u0060 or \u0060y\u0060 parameter.\n *\n * \\param window the window to query\n * \\param x a pointer filled in with the x position of the window, may be NULL\n * \\param y a pointer filled in with the y position of the window, may be NULL\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetWindowPosition\n */"
    },
    "SDL_GetWindowProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_PropertiesID",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_properties.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
          "line": 42,
          "column": 16
        },
        "inner_type": {
          "name": "Uint32",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          },
          "inner_type": {
            "name": "uint32_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_uint32_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
              "line": 31,
              "column": 22,
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1111,
        "column": 42
      },
      "comment": "/**\n * Get the properties associated with a window.\n *\n * The following read-only properties are provided by SDL:\n *\n * - \u0060SDL_PROP_WINDOW_SHAPE_POINTER\u0060: the surface associated with a shaped\n *   window\n *\n * On Android:\n *\n * - \u0060SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER\u0060: the ANativeWindow associated\n *   with the window\n * - \u0060SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER\u0060: the EGLSurface associated with\n *   the window\n *\n * On iOS:\n *\n * - \u0060SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER\u0060: the \u0060(__unsafe_unretained)\u0060\n *   UIWindow associated with the window\n * - \u0060SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER\u0060: the NSInteger tag\n *   assocated with metal views on the window\n *\n * On KMS/DRM:\n *\n * - \u0060SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER\u0060: the device index associated\n *   with the window (e.g. the X in /dev/dri/cardX)\n * - \u0060SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER\u0060: the DRM FD associated with the\n *   window\n * - \u0060SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER\u0060: the GBM device associated\n *   with the window\n *\n * On macOS:\n *\n * - \u0060SDL_PROP_WINDOW_COCOA_WINDOW_POINTER\u0060: the \u0060(__unsafe_unretained)\u0060\n *   NSWindow associated with the window\n * - \u0060SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER\u0060: the NSInteger tag\n *   assocated with metal views on the window\n *\n * On Vivante:\n *\n * - \u0060SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER\u0060: the EGLNativeDisplayType\n *   associated with the window\n * - \u0060SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER\u0060: the EGLNativeWindowType\n *   associated with the window\n * - \u0060SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER\u0060: the EGLSurface associated with\n *   the window\n *\n * On UWP:\n *\n * - \u0060SDL_PROP_WINDOW_WINRT_WINDOW_POINTER\u0060: the IInspectable CoreWindow\n *   associated with the window\n *\n * On Windows:\n *\n * - \u0060SDL_PROP_WINDOW_WIN32_HWND_POINTER\u0060: the HWND associated with the window\n * - \u0060SDL_PROP_WINDOW_WIN32_HDC_POINTER\u0060: the HDC associated with the window\n * - \u0060SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER\u0060: the HINSTANCE associated with\n *   the window\n *\n * On Wayland:\n *\n * Note: The \u0060xdg_*\u0060 window objects do not internally persist across window\n * show/hide calls. They will be null if the window is hidden and must be\n * queried each time it is shown.\n *\n * - \u0060SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER\u0060: the wl_display associated with\n *   the window\n * - \u0060SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER\u0060: the wl_surface associated with\n *   the window\n * - \u0060SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER\u0060: the wl_egl_window\n *   associated with the window\n * - \u0060SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER\u0060: the xdg_surface associated\n *   with the window\n * - \u0060SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER\u0060: the xdg_toplevel role\n *   associated with the window\n * - \u0027SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING\u0027: the export\n *   handle associated with the window\n * - \u0060SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER\u0060: the xdg_popup role\n *   associated with the window\n * - \u0060SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER\u0060: the xdg_positioner\n *   associated with the window, in popup mode\n *\n * On X11:\n *\n * - \u0060SDL_PROP_WINDOW_X11_DISPLAY_POINTER\u0060: the X11 Display associated with\n *   the window\n * - \u0060SDL_PROP_WINDOW_X11_SCREEN_NUMBER\u0060: the screen number associated with\n *   the window\n * - \u0060SDL_PROP_WINDOW_X11_WINDOW_NUMBER\u0060: the X11 Window associated with the\n *   window\n *\n * \\param window the window to query\n * \\returns a valid property ID on success or 0 on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetProperty\n * \\sa SDL_SetProperty\n */"
    },
    "SDL_GetWindowSize": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1323,
        "column": 29
      },
      "comment": "/**\n * Get the size of a window\u0027s client area.\n *\n * NULL can safely be passed as the \u0060w\u0060 or \u0060h\u0060 parameter if the width or\n * height value is not desired.\n *\n * The window pixel size may differ from its window coordinate size if the\n * window is on a high pixel density display. Use SDL_GetWindowSizeInPixels()\n * or SDL_GetRenderOutputSize() to get the real client area size in pixels.\n *\n * \\param window the window to query the width and height from\n * \\param w a pointer filled in with the width of the window, may be NULL\n * \\param h a pointer filled in with the height of the window, may be NULL\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderOutputSize\n * \\sa SDL_GetWindowSizeInPixels\n * \\sa SDL_SetWindowSize\n */"
    },
    "SDL_GetWindowSizeInPixels": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1374,
        "column": 29
      },
      "comment": "/**\n * Get the size of a window\u0027s client area, in pixels.\n *\n * \\param window the window from which the drawable size should be queried\n * \\param w a pointer to variable for storing the width in pixels, may be NULL\n * \\param h a pointer to variable for storing the height in pixels, may be\n *          NULL\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateWindow\n * \\sa SDL_GetWindowSize\n */"
    },
    "SDL_GetWindowSurface": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Surface *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_Surface",
          "kind": "typeAlias",
          "size_of": 96,
          "align_of": 8,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 131,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_Surface",
            "kind": "struct",
            "size_of": 96,
            "align_of": 8,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 107,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1717,
        "column": 38
      },
      "comment": "/**\n * Get the SDL surface associated with the window.\n *\n * A new surface will be created with the optimal format for the window, if\n * necessary. This surface will be freed when the window is destroyed. Do not\n * free this surface.\n *\n * This surface will be invalidated if the window is resized. After resizing a\n * window this function must be called again to return a valid surface.\n *\n * You may not combine this with 3D or the rendering API on this window.\n *\n * This function is affected by \u0060SDL_HINT_FRAMEBUFFER_ACCELERATION\u0060.\n *\n * \\param window the window to query\n * \\returns the surface associated with the window, or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DestroyWindowSurface\n * \\sa SDL_WindowHasSurface\n * \\sa SDL_UpdateWindowSurface\n * \\sa SDL_UpdateWindowSurfaceRects\n */"
    },
    "SDL_GetWindowTitle": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "const char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1187,
        "column": 37
      },
      "comment": "/**\n * Get the title of a window.\n *\n * \\param window the window to query\n * \\returns the title of the window in UTF-8 format or \u0022\u0022 if there is no\n *          title.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetWindowTitle\n */"
    },
    "SDL_GL_CreateContext": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_GLContext",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_video.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
          "line": 172,
          "column": 15
        },
        "inner_type": {
          "name": "void *",
          "kind": "pointer",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          },
          "inner_type": {
            "name": "void",
            "kind": "primitive",
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2375,
        "column": 39
      },
      "comment": "/**\n * Create an OpenGL context for an OpenGL window, and make it current.\n *\n * Windows users new to OpenGL should note that, for historical reasons, GL\n * functions added after OpenGL version 1.1 are not available by default.\n * Those functions must be loaded at run-time, either with an OpenGL\n * extension-handling library or with SDL_GL_GetProcAddress() and its related\n * functions.\n *\n * SDL_GLContext is an alias for \u0060void *\u0060. It\u0027s opaque to the application.\n *\n * \\param window the window to associate with the context\n * \\returns the OpenGL context associated with \u0060window\u0060 or NULL on error; call\n *          SDL_GetError() for more details.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GL_DeleteContext\n * \\sa SDL_GL_MakeCurrent\n */"
    },
    "SDL_GL_DeleteContext": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "context",
          "type": {
            "name": "SDL_GLContext",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 172,
              "column": 15
            },
            "inner_type": {
              "name": "void *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "void",
                "kind": "primitive",
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 172,
            "column": 15
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2549,
        "column": 29
      },
      "comment": "/**\n * Delete an OpenGL context.\n *\n * \\param context the OpenGL context to be deleted\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GL_CreateContext\n */"
    },
    "SDL_GL_ExtensionSupported": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "extension",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2308,
        "column": 34
      },
      "comment": "/**\n * Check if an OpenGL extension is supported for the current context.\n *\n * This function operates on the current GL context; you must have created a\n * context and it must be current before calling this function. Do not assume\n * that all contexts you create will have the same set of extensions\n * available, or that recreating an existing context will offer the same\n * extensions again.\n *\n * While it\u0027s probably not a massive overhead, this function is not an O(1)\n * operation. Check the extensions you care about after creating the GL\n * context and save that information somewhere instead of calling the function\n * every time you need to know.\n *\n * \\param extension the name of the extension to check\n * \\returns SDL_TRUE if the extension is supported, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GL_GetAttribute": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "attr",
          "type": {
            "name": "SDL_GLattr",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 222,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GLattr",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 192,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 222,
            "column": 3
          }
        },
        {
          "name": "value",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2353,
        "column": 29
      },
      "comment": "/**\n * Get the actual value for an attribute from the current context.\n *\n * \\param attr an SDL_GLattr enum value specifying the OpenGL attribute to get\n * \\param value a pointer filled in with the current value of \u0060attr\u0060\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GL_ResetAttributes\n * \\sa SDL_GL_SetAttribute\n */"
    },
    "SDL_GL_GetCurrentContext": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_GLContext",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_video.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
          "line": 172,
          "column": 15
        },
        "inner_type": {
          "name": "void *",
          "kind": "pointer",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          },
          "inner_type": {
            "name": "void",
            "kind": "primitive",
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2413,
        "column": 39
      },
      "comment": "/**\n * Get the currently active OpenGL context.\n *\n * \\returns the currently active OpenGL context or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GL_MakeCurrent\n */"
    },
    "SDL_GL_GetCurrentWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Window *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Window",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 108,
            "column": 16
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2401,
        "column": 37
      },
      "comment": "/**\n * Get the currently active OpenGL window.\n *\n * \\returns the currently active OpenGL window on success or NULL on failure;\n *          call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GL_GetProcAddress": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_FunctionPointer",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 1359,
          "column": 16
        },
        "inner_type": {
          "name": "void (void)",
          "kind": "functionPointer",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "proc",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2261,
        "column": 45
      },
      "comment": "/**\n * Get an OpenGL function by name.\n *\n * If the GL library is loaded at runtime with SDL_GL_LoadLibrary(), then all\n * GL functions must be retrieved this way. Usually this is used to retrieve\n * function pointers to OpenGL extensions.\n *\n * There are some quirks to looking up OpenGL functions that require some\n * extra care from the application. If you code carefully, you can handle\n * these quirks without any platform-specific code, though:\n *\n * - On Windows, function pointers are specific to the current GL context;\n *   this means you need to have created a GL context and made it current\n *   before calling SDL_GL_GetProcAddress(). If you recreate your context or\n *   create a second context, you should assume that any existing function\n *   pointers aren\u0027t valid to use with it. This is (currently) a\n *   Windows-specific limitation, and in practice lots of drivers don\u0027t suffer\n *   this limitation, but it is still the way the wgl API is documented to\n *   work and you should expect crashes if you don\u0027t respect it. Store a copy\n *   of the function pointers that comes and goes with context lifespan.\n * - On X11, function pointers returned by this function are valid for any\n *   context, and can even be looked up before a context is created at all.\n *   This means that, for at least some common OpenGL implementations, if you\n *   look up a function that doesn\u0027t exist, you\u0027ll get a non-NULL result that\n *   is _NOT_ safe to call. You must always make sure the function is actually\n *   available for a given GL context before calling it, by checking for the\n *   existence of the appropriate extension with SDL_GL_ExtensionSupported(),\n *   or verifying that the version of OpenGL you\u0027re using offers the function\n *   as core functionality.\n * - Some OpenGL drivers, on all platforms, *will* return NULL if a function\n *   isn\u0027t supported, but you can\u0027t count on this behavior. Check for\n *   extensions you use, and if you get a NULL anyway, act as if that\n *   extension wasn\u0027t available. This is probably a bug in the driver, but you\n *   can code defensively for this scenario anyhow.\n * - Just because you\u0027re on Linux/Unix, don\u0027t assume you\u0027ll be using X11.\n *   Next-gen display servers are waiting to replace it, and may or may not\n *   make the same promises about function pointers.\n * - OpenGL function pointers must be declared \u0060APIENTRY\u0060 as in the example\n *   code. This will ensure the proper calling convention is followed on\n *   platforms where this matters (Win32) thereby avoiding stack corruption.\n *\n * \\param proc the name of an OpenGL function\n * \\returns a pointer to the named OpenGL function. The returned pointer\n *          should be cast to the appropriate function signature.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GL_ExtensionSupported\n * \\sa SDL_GL_LoadLibrary\n * \\sa SDL_GL_UnloadLibrary\n */"
    },
    "SDL_GL_GetSwapInterval": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "interval",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2518,
        "column": 29
      },
      "comment": "/**\n * Get the swap interval for the current OpenGL context.\n *\n * If the system can\u0027t determine the swap interval, or there isn\u0027t a valid\n * current context, this function will set *interval to 0 as a safe default.\n *\n * \\param interval Output interval value. 0 if there is no vertical retrace\n *                 synchronization, 1 if the buffer swap is synchronized with\n *                 the vertical retrace, and -1 if late swaps happen\n *                 immediately instead of waiting for the next retrace\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GL_SetSwapInterval\n */"
    },
    "SDL_GL_LoadLibrary": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "path",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2208,
        "column": 29
      },
      "comment": "/**\n * Dynamically load an OpenGL library.\n *\n * This should be done after initializing the video driver, but before\n * creating any OpenGL windows. If no OpenGL library is loaded, the default\n * library will be loaded upon creation of the first OpenGL window.\n *\n * If you do this, you need to retrieve all of the GL functions used in your\n * program from the dynamic library using SDL_GL_GetProcAddress().\n *\n * \\param path the platform dependent OpenGL library name, or NULL to open the\n *             default OpenGL library\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GL_GetProcAddress\n * \\sa SDL_GL_UnloadLibrary\n */"
    },
    "SDL_GL_MakeCurrent": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "context",
          "type": {
            "name": "SDL_GLContext",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 172,
              "column": 15
            },
            "inner_type": {
              "name": "void *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "void",
                "kind": "primitive",
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 172,
            "column": 15
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2391,
        "column": 29
      },
      "comment": "/**\n * Set up an OpenGL context for rendering into an OpenGL window.\n *\n * The context must have been created with a compatible window.\n *\n * \\param window the window to associate with the context\n * \\param context the OpenGL context to associate with the window\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GL_CreateContext\n */"
    },
    "SDL_GL_ResetAttributes": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2318,
        "column": 30
      },
      "comment": "/**\n * Reset all previously set OpenGL context attributes to their default values.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GL_GetAttribute\n * \\sa SDL_GL_SetAttribute\n */"
    },
    "SDL_GL_SetAttribute": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "attr",
          "type": {
            "name": "SDL_GLattr",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 222,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GLattr",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 192,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 222,
            "column": 3
          }
        },
        {
          "name": "value",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2338,
        "column": 29
      },
      "comment": "/**\n * Set an OpenGL window attribute before window creation.\n *\n * This function sets the OpenGL attribute \u0060attr\u0060 to \u0060value\u0060. The requested\n * attributes should be set before creating an OpenGL window. You should use\n * SDL_GL_GetAttribute() to check the values after creating the OpenGL\n * context, since the values obtained can differ from the requested ones.\n *\n * \\param attr an SDL_GLattr enum value specifying the OpenGL attribute to set\n * \\param value the desired value for the attribute\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GL_GetAttribute\n * \\sa SDL_GL_ResetAttributes\n */"
    },
    "SDL_GL_SetSwapInterval": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "interval",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2499,
        "column": 29
      },
      "comment": "/**\n * Set the swap interval for the current OpenGL context.\n *\n * Some systems allow specifying -1 for the interval, to enable adaptive\n * vsync. Adaptive vsync works the same as vsync, but if you\u0027ve already missed\n * the vertical retrace for a given frame, it swaps buffers immediately, which\n * might be less jarring for the user during occasional framerate drops. If an\n * application requests adaptive vsync and the system does not support it,\n * this function will fail and return -1. In such a case, you should probably\n * retry the call with 1 for the interval.\n *\n * Adaptive vsync is implemented for some glX drivers with\n * GLX_EXT_swap_control_tear, and for some Windows drivers with\n * WGL_EXT_swap_control_tear.\n *\n * Read more on the Khronos wiki:\n * https://www.khronos.org/opengl/wiki/Swap_Interval#Adaptive_Vsync\n *\n * \\param interval 0 for immediate updates, 1 for updates synchronized with\n *                 the vertical retrace, -1 for adaptive vsync\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GL_GetSwapInterval\n */"
    },
    "SDL_GL_SwapWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2536,
        "column": 29
      },
      "comment": "/**\n * Update a window with OpenGL rendering.\n *\n * This is used with double-buffered OpenGL contexts, which are the default.\n *\n * On macOS, make sure you bind 0 to the draw framebuffer before swapping the\n * window, otherwise nothing will happen. If you aren\u0027t using\n * glBindFramebuffer(), this is the default and you won\u0027t have to do anything\n * extra.\n *\n * \\param window the window to change\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_GL_UnloadLibrary": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2287,
        "column": 30
      },
      "comment": "/**\n * Unload the OpenGL library previously loaded by SDL_GL_LoadLibrary().\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GL_LoadLibrary\n */"
    },
    "SDL_GUIDFromString": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_GUID",
        "kind": "typeAlias",
        "size_of": 16,
        "align_of": 1,
        "location": {
          "fileName": "SDL_guid.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
          "line": 57,
          "column": 3
        },
        "inner_type": {
          "name": "struct SDL_GUID",
          "kind": "struct",
          "size_of": 16,
          "align_of": 1,
          "location": {
            "fileName": "SDL_guid.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
            "line": 55,
            "column": 16
          }
        }
      },
      "parameters": [
        {
          "name": "pchGUID",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_guid.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
        "line": 92,
        "column": 34
      },
      "comment": "/**\n * Convert a GUID string into a ::SDL_GUID structure.\n *\n * Performs no error checking. If this function is given a string containing\n * an invalid GUID, the function will silently succeed, but the GUID generated\n * will not be useful.\n *\n * \\param pchGUID string containing an ASCII representation of a GUID\n * \\returns a ::SDL_GUID structure.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GUIDToString\n */"
    },
    "SDL_GUIDToString": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "guid",
          "type": {
            "name": "SDL_GUID",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 1,
            "location": {
              "fileName": "SDL_guid.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
              "line": 57,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_GUID",
              "kind": "struct",
              "size_of": 16,
              "align_of": 1,
              "location": {
                "fileName": "SDL_guid.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
                "line": 55,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_guid.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
            "line": 57,
            "column": 3
          }
        },
        {
          "name": "pszGUID",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "cbGUID",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_guid.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
        "line": 76,
        "column": 29
      },
      "comment": "/**\n * Get an ASCII string representation for a given ::SDL_GUID.\n *\n * You should supply at least 33 bytes for pszGUID.\n *\n * \\param guid the ::SDL_GUID you wish to convert to string\n * \\param pszGUID buffer in which to write the ASCII string\n * \\param cbGUID the size of pszGUID\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GUIDFromString\n */"
    },
    "SDL_HapticEffectSupported": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "effect",
          "type": {
            "name": "const SDL_HapticEffect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_HapticEffect",
              "kind": "typeAlias",
              "size_of": 72,
              "align_of": 8,
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 838,
                "column": 3
              },
              "inner_type": {
                "name": "union SDL_HapticEffect",
                "kind": "union",
                "size_of": 72,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_haptic.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                  "line": 828,
                  "column": 15
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1088,
        "column": 34
      },
      "comment": "/**\n * Check to see if an effect is supported by a haptic device.\n *\n * \\param haptic the SDL_Haptic device to query\n * \\param effect the desired effect to query\n * \\returns SDL_TRUE if the effect is supported or SDL_FALSE if it isn\u0027t.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateHapticEffect\n * \\sa SDL_GetHapticFeatures\n */"
    },
    "SDL_HapticRumbleSupported": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1297,
        "column": 34
      },
      "comment": "/**\n * Check whether rumble is supported on a haptic device.\n *\n * \\param haptic haptic device to check for rumble support\n * \\returns SDL_TRUE if the effect is supported or SDL_FALSE if it isn\u0027t.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_InitHapticRumble\n */"
    },
    "SDL_HasAltiVec": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 79,
        "column": 34
      },
      "comment": "/**\n * Determine whether the CPU has AltiVec features.\n *\n * This always returns false on CPUs that aren\u0027t using PowerPC instruction\n * sets.\n *\n * \\returns SDL_TRUE if the CPU has AltiVec features or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_HasARMSIMD": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 227,
        "column": 34
      },
      "comment": "/**\n * Determine whether the CPU has ARM SIMD (ARMv6) features.\n *\n * This is different from ARM NEON, which is a different instruction set.\n *\n * This always returns false on CPUs that aren\u0027t using ARM instruction sets.\n *\n * \\returns SDL_TRUE if the CPU has ARM SIMD features or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasNEON\n */"
    },
    "SDL_HasAVX": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 184,
        "column": 34
      },
      "comment": "/**\n * Determine whether the CPU has AVX features.\n *\n * This always returns false on CPUs that aren\u0027t using Intel instruction sets.\n *\n * \\returns SDL_TRUE if the CPU has AVX features or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasAVX2\n * \\sa SDL_HasAVX512F\n */"
    },
    "SDL_HasAVX2": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 198,
        "column": 34
      },
      "comment": "/**\n * Determine whether the CPU has AVX2 features.\n *\n * This always returns false on CPUs that aren\u0027t using Intel instruction sets.\n *\n * \\returns SDL_TRUE if the CPU has AVX2 features or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasAVX\n * \\sa SDL_HasAVX512F\n */"
    },
    "SDL_HasAVX512F": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 212,
        "column": 34
      },
      "comment": "/**\n * Determine whether the CPU has AVX-512F (foundation) features.\n *\n * This always returns false on CPUs that aren\u0027t using Intel instruction sets.\n *\n * \\returns SDL_TRUE if the CPU has AVX-512F features or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasAVX\n * \\sa SDL_HasAVX2\n */"
    },
    "SDL_HasClipboardData": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "mime_type",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_clipboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
        "line": 238,
        "column": 34
      },
      "comment": "/**\n * Query whether there is data in the clipboard for the provided mime type\n *\n * \\param mime_type The mime type to check for data for\n * \\returns SDL_TRUE if there exists data in clipboard for the provided mime\n *          type, SDL_FALSE if it does not.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetClipboardData\n * \\sa SDL_GetClipboardData\n */"
    },
    "SDL_HasClipboardText": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_clipboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
        "line": 83,
        "column": 34
      },
      "comment": "/**\n * Query whether the clipboard exists and contains a non-empty text string.\n *\n * \\returns SDL_TRUE if the clipboard has text, or SDL_FALSE if it does not.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetClipboardText\n * \\sa SDL_SetClipboardText\n */"
    },
    "SDL_HasEvent": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "type",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 887,
        "column": 34
      },
      "comment": "/**\n * Check for the existence of a certain event type in the event queue.\n *\n * If you need to check for a range of event types, use SDL_HasEvents()\n * instead.\n *\n * \\param type the type of event to be queried; see SDL_EventType for details\n * \\returns SDL_TRUE if events matching \u0060type\u0060 are present, or SDL_FALSE if\n *          events matching \u0060type\u0060 are not present.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasEvents\n */"
    },
    "SDL_HasEvents": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "minType",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        },
        {
          "name": "maxType",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 906,
        "column": 34
      },
      "comment": "/**\n * Check for the existence of certain event types in the event queue.\n *\n * If you need to check for a single event type, use SDL_HasEvent() instead.\n *\n * \\param minType the low end of event type to be queried, inclusive; see\n *                SDL_EventType for details\n * \\param maxType the high end of event type to be queried, inclusive; see\n *                SDL_EventType for details\n * \\returns SDL_TRUE if events with type \u003E= \u0060minType\u0060 and \u003C= \u0060maxType\u0060 are\n *          present, or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasEvents\n */"
    },
    "SDL_HasGamepad": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 401,
        "column": 34
      },
      "comment": "/**\n * Return whether a gamepad is currently connected.\n *\n * \\returns SDL_TRUE if a gamepad is connected, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepads\n */"
    },
    "SDL_HasJoystick": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 149,
        "column": 34
      },
      "comment": "/**\n * Return whether a joystick is currently connected.\n *\n * \\returns SDL_TRUE if a joystick is connected, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoysticks\n */"
    },
    "SDL_HasKeyboard": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 68,
        "column": 34
      },
      "comment": "/**\n * Return whether a keyboard is currently connected.\n *\n * \\returns SDL_TRUE if a keyboard is connected, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetKeyboards\n */"
    },
    "SDL_HasLASX": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 264,
        "column": 34
      },
      "comment": "/**\n * Determine whether the CPU has LASX (LOONGARCH SIMD) features.\n *\n * This always returns false on CPUs that aren\u0027t using LOONGARCH instruction\n * sets.\n *\n * \\returns SDL_TRUE if the CPU has LOONGARCH LASX features or SDL_FALSE if\n *          not.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_HasLSX": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 251,
        "column": 34
      },
      "comment": "/**\n * Determine whether the CPU has LSX (LOONGARCH SIMD) features.\n *\n * This always returns false on CPUs that aren\u0027t using LOONGARCH instruction\n * sets.\n *\n * \\returns SDL_TRUE if the CPU has LOONGARCH LSX features or SDL_FALSE if\n *          not.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_HasMMX": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 90,
        "column": 34
      },
      "comment": "/**\n * Determine whether the CPU has MMX features.\n *\n * This always returns false on CPUs that aren\u0027t using Intel instruction sets.\n *\n * \\returns SDL_TRUE if the CPU has MMX features or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_HasMouse": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 93,
        "column": 34
      },
      "comment": "/**\n * Return whether a mouse is currently connected.\n *\n * \\returns SDL_TRUE if a mouse is connected, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetMice\n */"
    },
    "SDL_HasNEON": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 238,
        "column": 34
      },
      "comment": "/**\n * Determine whether the CPU has NEON (ARM SIMD) features.\n *\n * This always returns false on CPUs that aren\u0027t using ARM instruction sets.\n *\n * \\returns SDL_TRUE if the CPU has ARM NEON features or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_HasPrimarySelectionText": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_clipboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
        "line": 130,
        "column": 34
      },
      "comment": "/**\n * Query whether the primary selection exists and contains a non-empty text\n * string.\n *\n * \\returns SDL_TRUE if the primary selection has text, or SDL_FALSE if it\n *          does not.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetPrimarySelectionText\n * \\sa SDL_SetPrimarySelectionText\n */"
    },
    "SDL_HasProperty": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 274,
        "column": 34
      },
      "comment": "/**\n * Return whether a property exists in a set of properties.\n *\n * \\param props the properties to query\n * \\param name the name of the property to query\n * \\returns SDL_TRUE if the property exists, or SDL_FALSE if it doesn\u0027t.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetPropertyType\n */"
    },
    "SDL_HasRectIntersection": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "A",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "B",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 144,
        "column": 34
      },
      "comment": "/**\n * Determine whether two rectangles intersect.\n *\n * If either pointer is NULL the function will return SDL_FALSE.\n *\n * \\param A an SDL_Rect structure representing the first rectangle\n * \\param B an SDL_Rect structure representing the second rectangle\n * \\returns SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRectIntersection\n */"
    },
    "SDL_HasRectIntersectionFloat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "A",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "B",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 287,
        "column": 34
      },
      "comment": "/**\n * Determine whether two rectangles intersect with float precision.\n *\n * If either pointer is NULL the function will return SDL_FALSE.\n *\n * \\param A an SDL_FRect structure representing the first rectangle\n * \\param B an SDL_FRect structure representing the second rectangle\n * \\returns SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRectIntersection\n */"
    },
    "SDL_HasScreenKeyboardSupport": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 381,
        "column": 34
      },
      "comment": "/**\n * Check whether the platform has screen keyboard support.\n *\n * \\returns SDL_TRUE if the platform has some screen keyboard support or\n *          SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_StartTextInput\n * \\sa SDL_ScreenKeyboardShown\n */"
    },
    "SDL_HasSSE": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 106,
        "column": 34
      },
      "comment": "/**\n * Determine whether the CPU has SSE features.\n *\n * This always returns false on CPUs that aren\u0027t using Intel instruction sets.\n *\n * \\returns SDL_TRUE if the CPU has SSE features or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasSSE2\n * \\sa SDL_HasSSE3\n * \\sa SDL_HasSSE41\n * \\sa SDL_HasSSE42\n */"
    },
    "SDL_HasSSE2": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 122,
        "column": 34
      },
      "comment": "/**\n * Determine whether the CPU has SSE2 features.\n *\n * This always returns false on CPUs that aren\u0027t using Intel instruction sets.\n *\n * \\returns SDL_TRUE if the CPU has SSE2 features or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasSSE\n * \\sa SDL_HasSSE3\n * \\sa SDL_HasSSE41\n * \\sa SDL_HasSSE42\n */"
    },
    "SDL_HasSSE3": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 138,
        "column": 34
      },
      "comment": "/**\n * Determine whether the CPU has SSE3 features.\n *\n * This always returns false on CPUs that aren\u0027t using Intel instruction sets.\n *\n * \\returns SDL_TRUE if the CPU has SSE3 features or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasSSE\n * \\sa SDL_HasSSE2\n * \\sa SDL_HasSSE41\n * \\sa SDL_HasSSE42\n */"
    },
    "SDL_HasSSE41": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 154,
        "column": 34
      },
      "comment": "/**\n * Determine whether the CPU has SSE4.1 features.\n *\n * This always returns false on CPUs that aren\u0027t using Intel instruction sets.\n *\n * \\returns SDL_TRUE if the CPU has SSE4.1 features or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasSSE\n * \\sa SDL_HasSSE2\n * \\sa SDL_HasSSE3\n * \\sa SDL_HasSSE42\n */"
    },
    "SDL_HasSSE42": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 170,
        "column": 34
      },
      "comment": "/**\n * Determine whether the CPU has SSE4.2 features.\n *\n * This always returns false on CPUs that aren\u0027t using Intel instruction sets.\n *\n * \\returns SDL_TRUE if the CPU has SSE4.2 features or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasSSE\n * \\sa SDL_HasSSE2\n * \\sa SDL_HasSSE3\n * \\sa SDL_HasSSE41\n */"
    },
    "SDL_hid_ble_scan": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "active",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 542,
        "column": 30
      },
      "comment": "/**\n * Start or stop a BLE scan on iOS and tvOS to pair Steam Controllers\n *\n * \\param active SDL_TRUE to start the scan, SDL_FALSE to stop the scan\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_close": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dev",
          "type": {
            "name": "SDL_hid_device *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_hid_device_",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 76,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 451,
        "column": 29
      },
      "comment": "/**\n * Close a HID device.\n *\n * \\param dev A device handle returned from SDL_hid_open().\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_device_change_count": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 214,
        "column": 32
      },
      "comment": "/**\n * Check to see if devices may have been added or removed.\n *\n * Enumerating the HID devices is an expensive operation, so you can call this\n * to see if there have been any system device changes since the last call to\n * this function. A change in the counter returned doesn\u0027t necessarily mean\n * that anything has changed, but you can call SDL_hid_enumerate() to get an\n * updated device list.\n *\n * Calling this function for the first time may cause a thread or other system\n * resource to be allocated to track device change notifications.\n *\n * \\returns a change counter that is incremented with each potential device\n *          change, or 0 if device change detection isn\u0027t available.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_hid_enumerate\n */"
    },
    "SDL_hid_enumerate": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_hid_device_info *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_hid_device_info",
          "kind": "typeAlias",
          "size_of": 80,
          "align_of": 8,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 157,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_hid_device_info",
            "kind": "struct",
            "size_of": 80,
            "align_of": 8,
            "location": {
              "fileName": "SDL_hidapi.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
              "line": 114,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "vendor_id",
          "type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "product_id",
          "type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 242,
        "column": 47
      },
      "comment": "/**\n * Enumerate the HID Devices.\n *\n * This function returns a linked list of all the HID devices attached to the\n * system which match vendor_id and product_id. If \u0060vendor_id\u0060 is set to 0\n * then any vendor matches. If \u0060product_id\u0060 is set to 0 then any product\n * matches. If \u0060vendor_id\u0060 and \u0060product_id\u0060 are both set to 0, then all HID\n * devices will be returned.\n *\n * By default SDL will only enumerate controllers, to reduce risk of hanging\n * or crashing on bad drivers, but SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS\n * can be set to \u00220\u0022 to enumerate all HID devices.\n *\n * \\param vendor_id The Vendor ID (VID) of the types of device to open, or 0\n *                  to match any vendor.\n * \\param product_id The Product ID (PID) of the types of device to open, or 0\n *                   to match any product.\n * \\returns a pointer to a linked list of type SDL_hid_device_info, containing\n *          information about the HID devices attached to the system, or NULL\n *          in the case of failure. Free this linked list by calling\n *          SDL_hid_free_enumeration().\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_hid_device_change_count\n */"
    },
    "SDL_hid_exit": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 193,
        "column": 29
      },
      "comment": "/**\n * Finalize the HIDAPI library.\n *\n * This function frees all of the static data associated with HIDAPI. It\n * should be called at the end of execution to avoid memory leaks.\n *\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_hid_init\n */"
    },
    "SDL_hid_free_enumeration": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "devs",
          "type": {
            "name": "SDL_hid_device_info *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_hid_device_info",
              "kind": "typeAlias",
              "size_of": 80,
              "align_of": 8,
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 157,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_hid_device_info",
                "kind": "struct",
                "size_of": 80,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_hidapi.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                  "line": 114,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 254,
        "column": 30
      },
      "comment": "/**\n * Free an enumeration Linked List\n *\n * This function frees a linked list created by SDL_hid_enumerate().\n *\n * \\param devs Pointer to a list of struct_device returned from\n *             SDL_hid_enumerate().\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_get_device_info": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_hid_device_info *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_hid_device_info",
          "kind": "typeAlias",
          "size_of": 80,
          "align_of": 8,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 157,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_hid_device_info",
            "kind": "struct",
            "size_of": 80,
            "align_of": 8,
            "location": {
              "fileName": "SDL_hidapi.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
              "line": 114,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "dev",
          "type": {
            "name": "SDL_hid_device *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_hid_device_",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 76,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 517,
        "column": 47
      },
      "comment": "/**\n * Get the device info from a HID device.\n *\n * \\param dev A device handle returned from SDL_hid_open().\n * \\returns a pointer to the SDL_hid_device_info for this hid_device, or NULL\n *          in the case of failure; call SDL_GetError() for more information.\n *          This struct is valid until the device is closed with\n *          SDL_hid_close().\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_get_feature_report": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dev",
          "type": {
            "name": "SDL_hid_device *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_hid_device_",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 76,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "data",
          "type": {
            "name": "unsigned char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "length",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 418,
        "column": 29
      },
      "comment": "/**\n * Get a feature report from a HID device.\n *\n * Set the first byte of \u0060data\u0060 to the Report ID of the report to be read.\n * Make sure to allow space for this extra byte in \u0060data\u0060. Upon return, the\n * first byte will still contain the Report ID, and the report data will start\n * in data[1].\n *\n * \\param dev A device handle returned from SDL_hid_open().\n * \\param data A buffer to put the read data into, including the Report ID.\n *             Set the first byte of \u0060data\u0060 to the Report ID of the report to\n *             be read, or set it to zero if your device does not use numbered\n *             reports.\n * \\param length The number of bytes to read, including an extra byte for the\n *               report ID. The buffer can be longer than the actual report.\n * \\returns the number of bytes read plus one for the report ID (which is\n *          still in the first byte), or -1 on error.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_get_indexed_string": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dev",
          "type": {
            "name": "SDL_hid_device *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_hid_device_",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 76,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "string_index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "string",
          "type": {
            "name": "wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 504,
        "column": 29
      },
      "comment": "/**\n * Get a string from a HID device, based on its string index.\n *\n * \\param dev A device handle returned from SDL_hid_open().\n * \\param string_index The index of the string to get.\n * \\param string A wide string buffer to put the data into.\n * \\param maxlen The length of the buffer in multiples of wchar_t.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_get_input_report": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dev",
          "type": {
            "name": "SDL_hid_device *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_hid_device_",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 76,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "data",
          "type": {
            "name": "unsigned char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "length",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 440,
        "column": 29
      },
      "comment": "/**\n * Get an input report from a HID device.\n *\n * Set the first byte of \u0060data\u0060 to the Report ID of the report to be read.\n * Make sure to allow space for this extra byte in \u0060data\u0060. Upon return, the\n * first byte will still contain the Report ID, and the report data will start\n * in data[1].\n *\n * \\param dev A device handle returned from SDL_hid_open().\n * \\param data A buffer to put the read data into, including the Report ID.\n *             Set the first byte of \u0060data\u0060 to the Report ID of the report to\n *             be read, or set it to zero if your device does not use numbered\n *             reports.\n * \\param length The number of bytes to read, including an extra byte for the\n *               report ID. The buffer can be longer than the actual report.\n * \\returns the number of bytes read plus one for the report ID (which is\n *          still in the first byte), or -1 on error.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_get_manufacturer_string": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dev",
          "type": {
            "name": "SDL_hid_device *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_hid_device_",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 76,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "string",
          "type": {
            "name": "wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 464,
        "column": 29
      },
      "comment": "/**\n * Get The Manufacturer String from a HID device.\n *\n * \\param dev A device handle returned from SDL_hid_open().\n * \\param string A wide string buffer to put the data into.\n * \\param maxlen The length of the buffer in multiples of wchar_t.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_get_product_string": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dev",
          "type": {
            "name": "SDL_hid_device *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_hid_device_",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 76,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "string",
          "type": {
            "name": "wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 477,
        "column": 29
      },
      "comment": "/**\n * Get The Product String from a HID device.\n *\n * \\param dev A device handle returned from SDL_hid_open().\n * \\param string A wide string buffer to put the data into.\n * \\param maxlen The length of the buffer in multiples of wchar_t.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_get_report_descriptor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dev",
          "type": {
            "name": "SDL_hid_device *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_hid_device_",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 76,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "buf",
          "type": {
            "name": "unsigned char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "buf_size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 533,
        "column": 29
      },
      "comment": "/**\n * Get a report descriptor from a HID device.\n *\n * User has to provide a preallocated buffer where descriptor will be copied\n * to. The recommended size for a preallocated buffer is 4096 bytes.\n *\n * \\param dev A device handle returned from SDL_hid_open().\n * \\param buf The buffer to copy descriptor into.\n * \\param buf_size The size of the buffer in bytes.\n * \\returns the number of bytes actually copied, or -1 on error; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_get_serial_number_string": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dev",
          "type": {
            "name": "SDL_hid_device *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_hid_device_",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 76,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "string",
          "type": {
            "name": "wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 490,
        "column": 29
      },
      "comment": "/**\n * Get The Serial Number String from a HID device.\n *\n * \\param dev A device handle returned from SDL_hid_open().\n * \\param string A wide string buffer to put the data into.\n * \\param maxlen The length of the buffer in multiples of wchar_t.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_init": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 178,
        "column": 29
      },
      "comment": "/**\n * Initialize the HIDAPI library.\n *\n * This function initializes the HIDAPI library. Calling it is not strictly\n * necessary, as it will be called automatically by SDL_hid_enumerate() and\n * any of the SDL_hid_open_*() functions if it is needed. This function should\n * be called at the beginning of execution however, if there is a chance of\n * HIDAPI handles being opened by different threads simultaneously.\n *\n * Each call to this function should have a matching call to SDL_hid_exit()\n *\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_hid_exit\n */"
    },
    "SDL_hid_open": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_hid_device *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_hid_device_",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 76,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "vendor_id",
          "type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "product_id",
          "type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "serial_number",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 272,
        "column": 42
      },
      "comment": "/**\n * Open a HID device using a Vendor ID (VID), Product ID (PID) and optionally\n * a serial number.\n *\n * If \u0060serial_number\u0060 is NULL, the first device with the specified VID and PID\n * is opened.\n *\n * \\param vendor_id The Vendor ID (VID) of the device to open.\n * \\param product_id The Product ID (PID) of the device to open.\n * \\param serial_number The Serial Number of the device to open (Optionally\n *                      NULL).\n * \\returns a pointer to a SDL_hid_device object on success or NULL on\n *          failure.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_open_path": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_hid_device *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_hid_device_",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 76,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "path",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 286,
        "column": 42
      },
      "comment": "/**\n * Open a HID device by its path name.\n *\n * The path name be determined by calling SDL_hid_enumerate(), or a\n * platform-specific path name can be used (eg: /dev/hidraw0 on Linux).\n *\n * \\param path The path name of the device to open\n * \\returns a pointer to a SDL_hid_device object on success or NULL on\n *          failure.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_read": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dev",
          "type": {
            "name": "SDL_hid_device *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_hid_device_",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 76,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "data",
          "type": {
            "name": "unsigned char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "length",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 353,
        "column": 29
      },
      "comment": "/**\n * Read an Input report from a HID device.\n *\n * Input reports are returned to the host through the INTERRUPT IN endpoint.\n * The first byte will contain the Report number if the device uses numbered\n * reports.\n *\n * \\param dev A device handle returned from SDL_hid_open().\n * \\param data A buffer to put the read data into.\n * \\param length The number of bytes to read. For devices with multiple\n *               reports, make sure to read an extra byte for the report\n *               number.\n * \\returns the actual number of bytes read and -1 on error. If no packet was\n *          available to be read and the handle is in non-blocking mode, this\n *          function returns 0.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_read_timeout": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dev",
          "type": {
            "name": "SDL_hid_device *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_hid_device_",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 76,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "data",
          "type": {
            "name": "unsigned char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "unsigned char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "length",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        },
        {
          "name": "milliseconds",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 333,
        "column": 29
      },
      "comment": "/**\n * Read an Input report from a HID device with timeout.\n *\n * Input reports are returned to the host through the INTERRUPT IN endpoint.\n * The first byte will contain the Report number if the device uses numbered\n * reports.\n *\n * \\param dev A device handle returned from SDL_hid_open().\n * \\param data A buffer to put the read data into.\n * \\param length The number of bytes to read. For devices with multiple\n *               reports, make sure to read an extra byte for the report\n *               number.\n * \\param milliseconds timeout in milliseconds or -1 for blocking wait.\n * \\returns the actual number of bytes read and -1 on error. If no packet was\n *          available to be read within the timeout period, this function\n *          returns 0.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_send_feature_report": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dev",
          "type": {
            "name": "SDL_hid_device *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_hid_device_",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 76,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "data",
          "type": {
            "name": "const unsigned char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const unsigned char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "length",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 396,
        "column": 29
      },
      "comment": "/**\n * Send a Feature report to the device.\n *\n * Feature reports are sent over the Control endpoint as a Set_Report\n * transfer. The first byte of \u0060data\u0060 must contain the Report ID. For devices\n * which only support a single report, this must be set to 0x0. The remaining\n * bytes contain the report data. Since the Report ID is mandatory, calls to\n * SDL_hid_send_feature_report() will always contain one more byte than the\n * report contains. For example, if a hid report is 16 bytes long, 17 bytes\n * must be passed to SDL_hid_send_feature_report(): the Report ID (or 0x0, for\n * devices which do not use numbered reports), followed by the report data (16\n * bytes). In this example, the length passed in would be 17.\n *\n * \\param dev A device handle returned from SDL_hid_open().\n * \\param data The data to send, including the report number as the first\n *             byte.\n * \\param length The length in bytes of the data to send, including the report\n *               number.\n * \\returns the actual number of bytes written and -1 on error.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_set_nonblocking": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dev",
          "type": {
            "name": "SDL_hid_device *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_hid_device_",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 76,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "nonblock",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 372,
        "column": 29
      },
      "comment": "/**\n * Set the device handle to be non-blocking.\n *\n * In non-blocking mode calls to SDL_hid_read() will return immediately with a\n * value of 0 if there is no data to be read. In blocking mode, SDL_hid_read()\n * will wait (block) until there is data to read before returning.\n *\n * Nonblocking can be turned on and off at any time.\n *\n * \\param dev A device handle returned from SDL_hid_open().\n * \\param nonblock enable or not the nonblocking reads - 1 to enable\n *                 nonblocking - 0 to disable nonblocking.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_hid_write": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "dev",
          "type": {
            "name": "SDL_hid_device *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_hid_device_",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 76,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "data",
          "type": {
            "name": "const unsigned char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const unsigned char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "length",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 312,
        "column": 29
      },
      "comment": "/**\n * Write an Output report to a HID device.\n *\n * The first byte of \u0060data\u0060 must contain the Report ID. For devices which only\n * support a single report, this must be set to 0x0. The remaining bytes\n * contain the report data. Since the Report ID is mandatory, calls to\n * SDL_hid_write() will always contain one more byte than the report contains.\n * For example, if a hid report is 16 bytes long, 17 bytes must be passed to\n * SDL_hid_write(), the Report ID (or 0x0, for devices with a single report),\n * followed by the report data (16 bytes). In this example, the length passed\n * in would be 17.\n *\n * SDL_hid_write() will send the data on the first OUT endpoint, if one\n * exists. If it does not, it will send the data through the Control Endpoint\n * (Endpoint 0).\n *\n * \\param dev A device handle returned from SDL_hid_open().\n * \\param data The data to send, including the report number as the first\n *             byte.\n * \\param length The length in bytes of the data to send.\n * \\returns the actual number of bytes written and -1 on error.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_HideCursor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 494,
        "column": 29
      },
      "comment": "/**\n * Hide the cursor.\n *\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CursorVisible\n * \\sa SDL_ShowCursor\n */"
    },
    "SDL_HideWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1527,
        "column": 29
      },
      "comment": "/**\n * Hide a window.\n *\n * \\param window the window to hide\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ShowWindow\n */"
    },
    "SDL_iconv": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_size_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
          "line": 31,
          "column": 32,
          "isSystem": true
        },
        "inner_type": {
          "name": "__darwin_size_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_types.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
            "line": 70,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "cd",
          "type": {
            "name": "SDL_iconv_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 1207,
              "column": 34
            },
            "inner_type": {
              "name": "struct SDL_iconv_data_t *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "struct SDL_iconv_data_t",
                "kind": "opaqueType",
                "location": {
                  "fileName": "SDL_stdinc.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                  "line": 1207,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 1207,
            "column": 34
          }
        },
        {
          "name": "inbuf",
          "type": {
            "name": "const char **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "const char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "inbytesleft",
          "type": {
            "name": "size_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_size_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
                "line": 31,
                "column": 32,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_size_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 70,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "outbuf",
          "type": {
            "name": "char **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "outbytesleft",
          "type": {
            "name": "size_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_size_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
                "line": 31,
                "column": 32,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_size_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 70,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1211,
        "column": 32
      }
    },
    "SDL_iconv_close": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "cd",
          "type": {
            "name": "SDL_iconv_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 1207,
              "column": 34
            },
            "inner_type": {
              "name": "struct SDL_iconv_data_t *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "struct SDL_iconv_data_t",
                "kind": "opaqueType",
                "location": {
                  "fileName": "SDL_stdinc.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                  "line": 1207,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 1207,
            "column": 34
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1210,
        "column": 29
      }
    },
    "SDL_iconv_open": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_iconv_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 1207,
          "column": 34
        },
        "inner_type": {
          "name": "struct SDL_iconv_data_t *",
          "kind": "pointer",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          },
          "inner_type": {
            "name": "struct SDL_iconv_data_t",
            "kind": "opaqueType",
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 1207,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "tocode",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "fromcode",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1208,
        "column": 37
      }
    },
    "SDL_iconv_string": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "tocode",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "fromcode",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "inbuf",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "inbytesleft",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1221,
        "column": 31
      },
      "comment": "/**\n * This function converts a buffer or string between encodings in one pass,\n * returning a string that must be freed with SDL_free() or NULL on error.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_Init": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "flags",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_init.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_init.h",
        "line": 112,
        "column": 29
      },
      "comment": "/**\n * Initialize the SDL library.\n *\n * SDL_Init() simply forwards to calling SDL_InitSubSystem(). Therefore, the\n * two may be used interchangeably. Though for readability of your code\n * SDL_InitSubSystem() might be preferred.\n *\n * The file I/O (for example: SDL_IOFromFile) and threading (SDL_CreateThread)\n * subsystems are initialized by default. Message boxes\n * (SDL_ShowSimpleMessageBox) also attempt to work without initializing the\n * video subsystem, in hopes of being useful in showing an error dialog when\n * SDL_Init fails. You must specifically initialize other subsystems if you\n * use them in your application.\n *\n * Logging (such as SDL_Log) works without initialization, too.\n *\n * \u0060flags\u0060 may be any of the following OR\u0027d together:\n *\n * - \u0060SDL_INIT_TIMER\u0060: timer subsystem\n * - \u0060SDL_INIT_AUDIO\u0060: audio subsystem\n * - \u0060SDL_INIT_VIDEO\u0060: video subsystem; automatically initializes the events\n *   subsystem\n * - \u0060SDL_INIT_JOYSTICK\u0060: joystick subsystem; automatically initializes the\n *   events subsystem\n * - \u0060SDL_INIT_HAPTIC\u0060: haptic (force feedback) subsystem\n * - \u0060SDL_INIT_GAMEPAD\u0060: gamepad subsystem; automatically initializes the\n *   joystick subsystem\n * - \u0060SDL_INIT_EVENTS\u0060: events subsystem\n * - \u0060SDL_INIT_SENSOR\u0060: sensor subsystem\n *\n * Subsystem initialization is ref-counted, you must call SDL_QuitSubSystem()\n * for each SDL_InitSubSystem() to correctly shutdown a subsystem manually (or\n * call SDL_Quit() to force shutdown). If a subsystem is already loaded then\n * this call will increase the ref-count and return.\n *\n * \\param flags subsystem initialization flags\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_InitSubSystem\n * \\sa SDL_Quit\n * \\sa SDL_SetMainReady\n * \\sa SDL_WasInit\n */"
    },
    "SDL_InitHapticRumble": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1312,
        "column": 29
      },
      "comment": "/**\n * Initialize a haptic device for simple rumble playback.\n *\n * \\param haptic the haptic device to initialize for simple rumble playback\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_PlayHapticRumble\n * \\sa SDL_StopHapticRumble\n * \\sa SDL_HapticRumbleSupported\n */"
    },
    "SDL_InitSubSystem": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "flags",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_init.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_init.h",
        "line": 129,
        "column": 29
      },
      "comment": "/**\n * Compatibility function to initialize the SDL library.\n *\n * This function and SDL_Init() are interchangeable.\n *\n * \\param flags any of the flags used by SDL_Init(); see SDL_Init for details.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_Init\n * \\sa SDL_Quit\n * \\sa SDL_QuitSubSystem\n */"
    },
    "SDL_isalnum": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 549,
        "column": 29
      },
      "comment": "/**\n * Query if a character is alphabetic (a letter) or a number.\n *\n * **WARNING**: Regardless of system locale, this will only treat ASCII values\n * for English \u0027a-z\u0027, \u0027A-Z\u0027, and \u00270-9\u0027 as true.\n *\n * \\param x character value to check.\n * \\returns non-zero if x falls within the character class, zero otherwise.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_isalpha": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 534,
        "column": 29
      },
      "comment": "/**\n * Query if a character is alphabetic (a letter).\n *\n * **WARNING**: Regardless of system locale, this will only treat ASCII values\n * for English \u0027a-z\u0027 and \u0027A-Z\u0027 as true.\n *\n * \\param x character value to check.\n * \\returns non-zero if x falls within the character class, zero otherwise.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_isblank": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 564,
        "column": 29
      },
      "comment": "/**\n * Report if a character is blank (a space or tab).\n *\n * **WARNING**: Regardless of system locale, this will only treat ASCII values\n * 0x20 (space) or 0x9 (tab) as true.\n *\n * \\param x character value to check.\n * \\returns non-zero if x falls within the character class, zero otherwise.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_iscntrl": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 579,
        "column": 29
      },
      "comment": "/**\n * Report if a character is a control character.\n *\n * **WARNING**: Regardless of system locale, this will only treat ASCII values\n * 0 through 0x1F, and 0x7F, as true.\n *\n * \\param x character value to check.\n * \\returns non-zero if x falls within the character class, zero otherwise.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_isdigit": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 594,
        "column": 29
      },
      "comment": "/**\n * Report if a character is a numeric digit.\n *\n * **WARNING**: Regardless of system locale, this will only treat ASCII values\n * \u00270\u0027 (0x30) through \u00279\u0027 (0x39), as true.\n *\n * \\param x character value to check.\n * \\returns non-zero if x falls within the character class, zero otherwise.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_IsGamepad": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 430,
        "column": 34
      },
      "comment": "/**\n * Check if the given joystick is supported by the gamepad interface.\n *\n * \\param instance_id the joystick instance ID\n * \\returns SDL_TRUE if the given joystick is supported by the gamepad\n *          interface, SDL_FALSE if it isn\u0027t or it\u0027s an invalid index.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoysticks\n * \\sa SDL_OpenGamepad\n */"
    },
    "SDL_isgraph": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 719,
        "column": 29
      },
      "comment": "/**\n * Report if a character is any \u0022printable\u0022 except space.\n *\n * Be advised that \u0022printable\u0022 has a definition that goes back to text\n * terminals from the dawn of computing, making this a sort of special case\n * function that is not suitable for Unicode (or most any) text management.\n *\n * **WARNING**: Regardless of system locale, this is equivalent to\n * \u0060(SDL_isprint(x)) \u0026\u0026 ((x) != \u0027 \u0027)\u0060.\n *\n * \\param x character value to check.\n * \\returns non-zero if x falls within the character class, zero otherwise.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_isprint\n */"
    },
    "SDL_IsJoystickHaptic": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 977,
        "column": 34
      },
      "comment": "/**\n * Query if a joystick has haptic features.\n *\n * \\param joystick the SDL_Joystick to test for haptic capabilities\n * \\returns SDL_TRUE if the joystick is haptic or SDL_FALSE if it isn\u0027t.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_OpenHapticFromJoystick\n */"
    },
    "SDL_IsJoystickVirtual": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 434,
        "column": 34
      },
      "comment": "/**\n * Query whether or not a joystick is virtual.\n *\n * \\param instance_id the joystick instance ID\n * \\returns SDL_TRUE if the joystick is virtual, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_islower": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 679,
        "column": 29
      },
      "comment": "/**\n * Report if a character is lower case.\n *\n * **WARNING**: Regardless of system locale, this will only treat ASCII values\n * \u0027a\u0027 through \u0027z\u0027 as true.\n *\n * \\param x character value to check.\n * \\returns non-zero if x falls within the character class, zero otherwise.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_IsMouseHaptic": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 952,
        "column": 34
      },
      "comment": "/**\n * Query whether or not the current mouse has haptic capabilities.\n *\n * \\returns SDL_TRUE if the mouse is haptic or SDL_FALSE if it isn\u0027t.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_OpenHapticFromMouse\n */"
    },
    "SDL_isprint": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 698,
        "column": 29
      },
      "comment": "/**\n * Report if a character is \u0022printable\u0022.\n *\n * Be advised that \u0022printable\u0022 has a definition that goes back to text\n * terminals from the dawn of computing, making this a sort of special case\n * function that is not suitable for Unicode (or most any) text management.\n *\n * **WARNING**: Regardless of system locale, this will only treat ASCII values\n * \u0027 \u0027 (0x20) through \u0027~\u0027 (0x7E) as true.\n *\n * \\param x character value to check.\n * \\returns non-zero if x falls within the character class, zero otherwise.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_ispunct": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 627,
        "column": 29
      },
      "comment": "/**\n * Report if a character is a punctuation mark.\n *\n * **WARNING**: Regardless of system locale, this is equivalent to\n * \u0060((SDL_isgraph(x)) \u0026\u0026 (!SDL_isalnum(x)))\u0060.\n *\n * \\param x character value to check.\n * \\returns non-zero if x falls within the character class, zero otherwise.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_isgraph\n * \\sa SDL_isalnum\n */"
    },
    "SDL_isspace": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 649,
        "column": 29
      },
      "comment": "/**\n * Report if a character is whitespace.\n *\n * **WARNING**: Regardless of system locale, this will only treat the\n * following ASCII values as true:\n *\n * - space (0x20)\n * - tab (0x09)\n * - newline (0x0A)\n * - vertical tab (0x0B)\n * - form feed (0x0C)\n * - return (0x0D)\n *\n * \\param x character value to check.\n * \\returns non-zero if x falls within the character class, zero otherwise.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_IsTablet": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_system.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_system.h",
        "line": 591,
        "column": 34
      },
      "comment": "/**\n * Query if the current device is a tablet.\n *\n * If SDL can\u0027t determine this, it will return SDL_FALSE.\n *\n * \\returns SDL_TRUE if the device is a tablet, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_isupper": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 664,
        "column": 29
      },
      "comment": "/**\n * Report if a character is upper case.\n *\n * **WARNING**: Regardless of system locale, this will only treat ASCII values\n * \u0027A\u0027 through \u0027Z\u0027 as true.\n *\n * \\param x character value to check.\n * \\returns non-zero if x falls within the character class, zero otherwise.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_isxdigit": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 609,
        "column": 29
      },
      "comment": "/**\n * Report if a character is a hexadecimal digit.\n *\n * **WARNING**: Regardless of system locale, this will only treat ASCII values\n * \u0027A\u0027 through \u0027F\u0027, \u0027a\u0027 through \u0027f\u0027, and \u00270\u0027 through \u00279\u0027, as true.\n *\n * \\param x character value to check.\n * \\returns non-zero if x falls within the character class, zero otherwise.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_itoa": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "value",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "str",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "radix",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 990,
        "column": 31
      }
    },
    "SDL_JoystickConnected": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 746,
        "column": 34
      },
      "comment": "/**\n * Get the status of a specified joystick.\n *\n * \\param joystick the joystick to query\n * \\returns SDL_TRUE if the joystick has been opened, SDL_FALSE if it has not;\n *          call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_JoystickEventsEnabled": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 863,
        "column": 34
      },
      "comment": "/**\n * Query the state of joystick event processing.\n *\n * If joystick events are disabled, you must call SDL_UpdateJoysticks()\n * yourself and check the state of the joystick when you want joystick\n * information.\n *\n * \\returns SDL_TRUE if joystick events are being processed, SDL_FALSE\n *          otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetJoystickEventsEnabled\n */"
    },
    "SDL_lltoa": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "value",
          "type": {
            "name": "Sint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 181,
              "column": 17
            },
            "inner_type": {
              "name": "int64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_int64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 181,
            "column": 17
          }
        },
        {
          "name": "str",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "radix",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 994,
        "column": 31
      }
    },
    "SDL_LoadBMP": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Surface *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_Surface",
          "kind": "typeAlias",
          "size_of": 96,
          "align_of": 8,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 131,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_Surface",
            "kind": "struct",
            "size_of": 96,
            "align_of": 8,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 107,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "file",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 355,
        "column": 38
      },
      "comment": "/**\n * Load a BMP image from a file.\n *\n * The new surface should be freed with SDL_DestroySurface(). Not doing so\n * will result in a memory leak.\n *\n * \\param file the BMP file to load\n * \\returns a pointer to a new SDL_Surface structure or NULL if there was an\n *          error; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DestroySurface\n * \\sa SDL_LoadBMP_IO\n * \\sa SDL_SaveBMP\n */"
    },
    "SDL_LoadBMP_IO": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Surface *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_Surface",
          "kind": "typeAlias",
          "size_of": 96,
          "align_of": 8,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 131,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_Surface",
            "kind": "struct",
            "size_of": 96,
            "align_of": 8,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 107,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "src",
          "type": {
            "name": "SDL_IOStream *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_IOStream",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_iostream.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_iostream.h",
                "line": 112,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "closeio",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 337,
        "column": 38
      },
      "comment": "/**\n * Load a BMP image from a seekable SDL data stream.\n *\n * The new surface should be freed with SDL_DestroySurface(). Not doing so\n * will result in a memory leak.\n *\n * \\param src the data stream for the surface\n * \\param closeio if SDL_TRUE, calls SDL_CloseIO() on \u0060src\u0060 before returning,\n *                even in the case of an error\n * \\returns a pointer to a new SDL_Surface structure or NULL if there was an\n *          error; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DestroySurface\n * \\sa SDL_LoadBMP\n * \\sa SDL_SaveBMP_IO\n */"
    },
    "SDL_LoadFunction": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_FunctionPointer",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 1359,
          "column": 16
        },
        "inner_type": {
          "name": "void (void)",
          "kind": "functionPointer",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "handle",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_loadso.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_loadso.h",
        "line": 91,
        "column": 45
      },
      "comment": "/**\n * Look up the address of the named function in a shared object.\n *\n * This function pointer is no longer valid after calling SDL_UnloadObject().\n *\n * This function can only look up C function names. Other languages may have\n * name mangling and intrinsic language support that varies from compiler to\n * compiler.\n *\n * Make sure you declare your function pointers with the same calling\n * convention as the actual library function. Your code will crash\n * mysteriously if you do not do this.\n *\n * If the requested function doesn\u0027t exist, NULL is returned.\n *\n * \\param handle a valid shared object handle returned by SDL_LoadObject()\n * \\param name the name of the function to look up\n * \\returns a pointer to the function or NULL if there was an error; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LoadObject\n */"
    },
    "SDL_LoadObject": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "sofile",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_loadso.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_loadso.h",
        "line": 65,
        "column": 31
      },
      "comment": "/**\n * Dynamically load a shared object.\n *\n * \\param sofile a system-dependent name of the object file\n * \\returns an opaque pointer to the object handle or NULL if there was an\n *          error; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LoadFunction\n * \\sa SDL_UnloadObject\n */"
    },
    "SDL_LockJoysticks": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 131,
        "column": 30
      },
      "comment": "/**\n * Locking for atomic access to the joystick API\n *\n * The SDL joystick functions are thread-safe, however you can lock the\n * joysticks while processing to guarantee that the joystick list won\u0027t change\n * and joystick and gamepad events will not be delivered.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_LockMutex": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "mutex",
          "type": {
            "name": "SDL_Mutex *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Mutex",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 131,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 178,
        "column": 30
      },
      "comment": "/**\n * Lock the mutex.\n *\n * This will block until the mutex is available, which is to say it is in the\n * unlocked state and the OS has chosen the caller as the next thread to lock\n * it. Of all threads waiting to lock the mutex, only one may do so at a time.\n *\n * It is legal for the owning thread to lock an already-locked mutex. It must\n * unlock it the same number of times before it is actually made available for\n * other threads in the system (this is known as a \u0022recursive mutex\u0022).\n *\n * This function does not fail; if mutex is NULL, it will return immediately\n * having locked nothing. If the mutex is valid, this function will always\n * block until it can lock the mutex, and return with it locked.\n *\n * \\param mutex the mutex to lock\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_TryLockMutex\n * \\sa SDL_UnlockMutex\n */"
    },
    "SDL_LockProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 127,
        "column": 29
      },
      "comment": "/**\n * Lock a set of properties\n *\n * Obtain a multi-threaded lock for these properties. Other threads will wait\n * while trying to lock these properties until they are unlocked. Properties\n * must be unlocked before they are destroyed.\n *\n * The lock is automatically taken when setting individual properties, this\n * function is only needed when you want to set several properties atomically\n * or want to guarantee that properties being queried aren\u0027t freed in another\n * thread.\n *\n * \\param props the properties to lock\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_UnlockProperties\n */"
    },
    "SDL_LockRWLockForReading": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "rwlock",
          "type": {
            "name": "SDL_RWLock *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_RWLock",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 249,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 336,
        "column": 30
      },
      "comment": "/**\n * Lock the read/write lock for _read only_ operations.\n *\n * This will block until the rwlock is available, which is to say it is not\n * locked for writing by any other thread. Of all threads waiting to lock the\n * rwlock, all may do so at the same time as long as they are requesting\n * read-only access; if a thread wants to lock for writing, only one may do so\n * at a time, and no other threads, read-only or not, may hold the lock at the\n * same time.\n *\n * It is legal for the owning thread to lock an already-locked rwlock for\n * reading. It must unlock it the same number of times before it is actually\n * made available for other threads in the system (this is known as a\n * \u0022recursive rwlock\u0022).\n *\n * Note that locking for writing is not recursive (this is only available to\n * read-only locks).\n *\n * It is illegal to request a read-only lock from a thread that already holds\n * the write lock. Doing so results in undefined behavior. Unlock the write\n * lock before requesting a read-only lock. (But, of course, if you have the\n * write lock, you don\u0027t need further locks to read in any case.)\n *\n * This function does not fail; if rwlock is NULL, it will return immediately\n * having locked nothing. If the rwlock is valid, this function will always\n * block until it can lock the mutex, and return with it locked.\n *\n * \\param rwlock the read/write lock to lock\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LockRWLockForWriting\n * \\sa SDL_TryLockRWLockForReading\n * \\sa SDL_UnlockRWLock\n */"
    },
    "SDL_LockRWLockForWriting": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "rwlock",
          "type": {
            "name": "SDL_RWLock *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_RWLock",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 249,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 367,
        "column": 30
      },
      "comment": "/**\n * Lock the read/write lock for _write_ operations.\n *\n * This will block until the rwlock is available, which is to say it is not\n * locked for reading or writing by any other thread. Only one thread may hold\n * the lock when it requests write access; all other threads, whether they\n * also want to write or only want read-only access, must wait until the\n * writer thread has released the lock.\n *\n * It is illegal for the owning thread to lock an already-locked rwlock for\n * writing (read-only may be locked recursively, writing can not). Doing so\n * results in undefined behavior.\n *\n * It is illegal to request a write lock from a thread that already holds a\n * read-only lock. Doing so results in undefined behavior. Unlock the\n * read-only lock before requesting a write lock.\n *\n * This function does not fail; if rwlock is NULL, it will return immediately\n * having locked nothing. If the rwlock is valid, this function will always\n * block until it can lock the mutex, and return with it locked.\n *\n * \\param rwlock the read/write lock to lock\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LockRWLockForReading\n * \\sa SDL_TryLockRWLockForWriting\n * \\sa SDL_UnlockRWLock\n */"
    },
    "SDL_LockSpinlock": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "lock",
          "type": {
            "name": "SDL_SpinLock *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_SpinLock",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_atomic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
                "line": 94,
                "column": 13
              },
              "inner_type": {
                "name": "int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_atomic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
        "line": 126,
        "column": 30
      },
      "comment": "/**\n * Lock a spin lock by setting it to a non-zero value.\n *\n * ***Please note that spinlocks are dangerous if you don\u0027t know what you\u0027re\n * doing. Please be careful using any sort of spinlock!***\n *\n * \\param lock a pointer to a lock variable\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_TryLockSpinlock\n * \\sa SDL_UnlockSpinlock\n */"
    },
    "SDL_LockSurface": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 306,
        "column": 29
      },
      "comment": "/**\n * Set up a surface for directly accessing the pixels.\n *\n * Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write to\n * and read from \u0060surface-\u003Epixels\u0060, using the pixel format stored in\n * \u0060surface-\u003Eformat\u0060. Once you are done accessing the surface, you should use\n * SDL_UnlockSurface() to release it.\n *\n * Not all surfaces require locking. If \u0060SDL_MUSTLOCK(surface)\u0060 evaluates to\n * 0, then you can read and write to the surface at any time, and the pixel\n * format of the surface will not change.\n *\n * \\param surface the SDL_Surface structure to be locked\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_MUSTLOCK\n * \\sa SDL_UnlockSurface\n */"
    },
    "SDL_LockTexture": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "pixels",
          "type": {
            "name": "void **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "void",
                "kind": "primitive",
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "pitch",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1177,
        "column": 29
      },
      "comment": "/**\n * Lock a portion of the texture for **write-only** pixel access.\n *\n * As an optimization, the pixels made available for editing don\u0027t necessarily\n * contain the old texture data. This is a write-only operation, and if you\n * need to keep a copy of the texture data you should do that at the\n * application level.\n *\n * You must use SDL_UnlockTexture() to unlock the pixels and apply any\n * changes.\n *\n * \\param texture the texture to lock for access, which was created with\n *                \u0060SDL_TEXTUREACCESS_STREAMING\u0060\n * \\param rect an SDL_Rect structure representing the area to lock for access;\n *             NULL to lock the entire texture\n * \\param pixels this is filled in with a pointer to the locked pixels,\n *               appropriately offset by the locked area\n * \\param pitch this is filled in with the pitch of the locked pixels; the\n *              pitch is the length of one row in bytes\n * \\returns 0 on success or a negative error code if the texture is not valid\n *          or was not created with \u0060SDL_TEXTUREACCESS_STREAMING\u0060; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LockTextureToSurface\n * \\sa SDL_UnlockTexture\n */"
    },
    "SDL_LockTextureToSurface": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "SDL_Surface",
                "kind": "typeAlias",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 131,
                  "column": 3
                },
                "inner_type": {
                  "name": "struct SDL_Surface",
                  "kind": "struct",
                  "size_of": 96,
                  "align_of": 8,
                  "location": {
                    "fileName": "SDL_surface.h",
                    "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                    "line": 107,
                    "column": 16
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1213,
        "column": 29
      },
      "comment": "/**\n * Lock a portion of the texture for **write-only** pixel access, and expose\n * it as a SDL surface.\n *\n * Besides providing an SDL_Surface instead of raw pixel data, this function\n * operates like SDL_LockTexture.\n *\n * As an optimization, the pixels made available for editing don\u0027t necessarily\n * contain the old texture data. This is a write-only operation, and if you\n * need to keep a copy of the texture data you should do that at the\n * application level.\n *\n * You must use SDL_UnlockTexture() to unlock the pixels and apply any\n * changes.\n *\n * The returned surface is freed internally after calling SDL_UnlockTexture()\n * or SDL_DestroyTexture(). The caller should not free it.\n *\n * \\param texture the texture to lock for access, which must be created with\n *                \u0060SDL_TEXTUREACCESS_STREAMING\u0060\n * \\param rect a pointer to the rectangle to lock for access. If the rect is\n *             NULL, the entire texture will be locked\n * \\param surface this is filled in with an SDL surface representing the\n *                locked area\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LockTexture\n * \\sa SDL_UnlockTexture\n */"
    },
    "SDL_log": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1179,
        "column": 32
      }
    },
    "SDL_Log": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "fmt",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 183,
        "column": 30
      },
      "comment": "/**\n * Log a message with SDL_LOG_CATEGORY_APPLICATION and SDL_LOG_PRIORITY_INFO.\n *\n * \\param fmt a printf() style message format string\n * \\param ... additional parameters matching % tokens in the \u0060fmt\u0060 string, if\n *            any\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LogCritical\n * \\sa SDL_LogDebug\n * \\sa SDL_LogError\n * \\sa SDL_LogInfo\n * \\sa SDL_LogMessage\n * \\sa SDL_LogMessageV\n * \\sa SDL_LogVerbose\n * \\sa SDL_LogWarn\n */"
    },
    "SDL_log10": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1181,
        "column": 32
      }
    },
    "SDL_log10f": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1182,
        "column": 31
      }
    },
    "SDL_LogCritical": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "category",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 309,
        "column": 30
      },
      "comment": "/**\n * Log a message with SDL_LOG_PRIORITY_CRITICAL.\n *\n * \\param category the category of the message\n * \\param fmt a printf() style message format string\n * \\param ... additional parameters matching % tokens in the **fmt** string,\n *            if any\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_Log\n * \\sa SDL_LogDebug\n * \\sa SDL_LogError\n * \\sa SDL_LogInfo\n * \\sa SDL_LogMessage\n * \\sa SDL_LogMessageV\n * \\sa SDL_LogVerbose\n * \\sa SDL_LogWarn\n */"
    },
    "SDL_LogDebug": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "category",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 225,
        "column": 30
      },
      "comment": "/**\n * Log a message with SDL_LOG_PRIORITY_DEBUG.\n *\n * \\param category the category of the message\n * \\param fmt a printf() style message format string\n * \\param ... additional parameters matching % tokens in the **fmt** string,\n *            if any\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_Log\n * \\sa SDL_LogCritical\n * \\sa SDL_LogError\n * \\sa SDL_LogInfo\n * \\sa SDL_LogMessage\n * \\sa SDL_LogMessageV\n * \\sa SDL_LogVerbose\n * \\sa SDL_LogWarn\n */"
    },
    "SDL_LogError": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "category",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 288,
        "column": 30
      },
      "comment": "/**\n * Log a message with SDL_LOG_PRIORITY_ERROR.\n *\n * \\param category the category of the message\n * \\param fmt a printf() style message format string\n * \\param ... additional parameters matching % tokens in the **fmt** string,\n *            if any\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_Log\n * \\sa SDL_LogCritical\n * \\sa SDL_LogDebug\n * \\sa SDL_LogInfo\n * \\sa SDL_LogMessage\n * \\sa SDL_LogMessageV\n * \\sa SDL_LogVerbose\n * \\sa SDL_LogWarn\n */"
    },
    "SDL_logf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1180,
        "column": 31
      }
    },
    "SDL_LogGetPriority": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_LogPriority",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_log.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
          "line": 111,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_LogPriority",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_log.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
            "line": 102,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "category",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 151,
        "column": 41
      },
      "comment": "/**\n * Get the priority of a particular log category.\n *\n * \\param category the category to query\n * \\returns the SDL_LogPriority for the requested category\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LogSetPriority\n */"
    },
    "SDL_LogInfo": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "category",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 246,
        "column": 30
      },
      "comment": "/**\n * Log a message with SDL_LOG_PRIORITY_INFO.\n *\n * \\param category the category of the message\n * \\param fmt a printf() style message format string\n * \\param ... additional parameters matching % tokens in the **fmt** string,\n *            if any\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_Log\n * \\sa SDL_LogCritical\n * \\sa SDL_LogDebug\n * \\sa SDL_LogError\n * \\sa SDL_LogMessage\n * \\sa SDL_LogMessageV\n * \\sa SDL_LogVerbose\n * \\sa SDL_LogWarn\n */"
    },
    "SDL_LogMessage": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "category",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "priority",
          "type": {
            "name": "SDL_LogPriority",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_log.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
              "line": 111,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_LogPriority",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_log.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
                "line": 102,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_log.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
            "line": 111,
            "column": 3
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 331,
        "column": 30
      },
      "comment": "/**\n * Log a message with the specified category and priority.\n *\n * \\param category the category of the message\n * \\param priority the priority of the message\n * \\param fmt a printf() style message format string\n * \\param ... additional parameters matching % tokens in the **fmt** string,\n *            if any\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_Log\n * \\sa SDL_LogCritical\n * \\sa SDL_LogDebug\n * \\sa SDL_LogError\n * \\sa SDL_LogInfo\n * \\sa SDL_LogMessageV\n * \\sa SDL_LogVerbose\n * \\sa SDL_LogWarn\n */"
    },
    "SDL_LogResetPriorities": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 163,
        "column": 30
      },
      "comment": "/**\n * Reset all priorities to default.\n *\n * This is called by SDL_Quit().\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LogSetAllPriority\n * \\sa SDL_LogSetPriority\n */"
    },
    "SDL_LogSetAllPriority": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "priority",
          "type": {
            "name": "SDL_LogPriority",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_log.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
              "line": 111,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_LogPriority",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_log.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
                "line": 102,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_log.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
            "line": 111,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 124,
        "column": 30
      },
      "comment": "/**\n * Set the priority of all log categories.\n *\n * \\param priority the SDL_LogPriority to assign\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LogResetPriorities\n * \\sa SDL_LogSetPriority\n */"
    },
    "SDL_LogSetPriority": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "category",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "priority",
          "type": {
            "name": "SDL_LogPriority",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_log.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
              "line": 111,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_LogPriority",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_log.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
                "line": 102,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_log.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
            "line": 111,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 138,
        "column": 30
      },
      "comment": "/**\n * Set the priority of a particular log category.\n *\n * \\param category the category to assign a priority to\n * \\param priority the SDL_LogPriority to assign\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LogGetPriority\n * \\sa SDL_LogResetPriorities\n * \\sa SDL_LogSetAllPriority\n */"
    },
    "SDL_LogVerbose": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "category",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 204,
        "column": 30
      },
      "comment": "/**\n * Log a message with SDL_LOG_PRIORITY_VERBOSE.\n *\n * \\param category the category of the message\n * \\param fmt a printf() style message format string\n * \\param ... additional parameters matching % tokens in the **fmt** string,\n *            if any\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_Log\n * \\sa SDL_LogCritical\n * \\sa SDL_LogDebug\n * \\sa SDL_LogError\n * \\sa SDL_LogInfo\n * \\sa SDL_LogMessage\n * \\sa SDL_LogMessageV\n * \\sa SDL_LogWarn\n */"
    },
    "SDL_LogWarn": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "category",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "fmt",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 267,
        "column": 30
      },
      "comment": "/**\n * Log a message with SDL_LOG_PRIORITY_WARN.\n *\n * \\param category the category of the message\n * \\param fmt a printf() style message format string\n * \\param ... additional parameters matching % tokens in the **fmt** string,\n *            if any\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_Log\n * \\sa SDL_LogCritical\n * \\sa SDL_LogDebug\n * \\sa SDL_LogError\n * \\sa SDL_LogInfo\n * \\sa SDL_LogMessage\n * \\sa SDL_LogMessageV\n * \\sa SDL_LogVerbose\n */"
    },
    "SDL_lround": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "long",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1189,
        "column": 30
      }
    },
    "SDL_lroundf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "long",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1190,
        "column": 30
      }
    },
    "SDL_ltoa": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "value",
          "type": {
            "name": "long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "str",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "radix",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 992,
        "column": 31
      }
    },
    "SDL_malloc": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 409,
        "column": 42
      }
    },
    "SDL_MapRGB": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "format",
          "type": {
            "name": "const SDL_PixelFormat *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_PixelFormat",
              "kind": "typeAlias",
              "size_of": 56,
              "align_of": 8,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 721,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_PixelFormat",
                "kind": "struct",
                "size_of": 56,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 700,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "r",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "g",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "b",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 898,
        "column": 32
      },
      "comment": "/**\n * Map an RGB triple to an opaque pixel value for a given pixel format.\n *\n * This function maps the RGB color value to the specified pixel format and\n * returns the pixel value best approximating the given RGB color value for\n * the given pixel format.\n *\n * If the format has a palette (8-bit) the index of the closest matching color\n * in the palette will be returned.\n *\n * If the specified pixel format has an alpha component it will be returned as\n * all 1 bits (fully opaque).\n *\n * If the pixel format bpp (color depth) is less than 32-bpp then the unused\n * upper bits of the return value can safely be ignored (e.g., with a 16-bpp\n * format the return value can be assigned to a Uint16, and similarly a Uint8\n * for an 8-bpp format).\n *\n * \\param format an SDL_PixelFormat structure describing the pixel format\n * \\param r the red component of the pixel in the range 0-255\n * \\param g the green component of the pixel in the range 0-255\n * \\param b the blue component of the pixel in the range 0-255\n * \\returns a pixel value\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRGB\n * \\sa SDL_GetRGBA\n * \\sa SDL_MapRGBA\n */"
    },
    "SDL_MapRGBA": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "format",
          "type": {
            "name": "const SDL_PixelFormat *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_PixelFormat",
              "kind": "typeAlias",
              "size_of": 56,
              "align_of": 8,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 721,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_PixelFormat",
                "kind": "struct",
                "size_of": 56,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 700,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "r",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "g",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "b",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "a",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 933,
        "column": 32
      },
      "comment": "/**\n * Map an RGBA quadruple to a pixel value for a given pixel format.\n *\n * This function maps the RGBA color value to the specified pixel format and\n * returns the pixel value best approximating the given RGBA color value for\n * the given pixel format.\n *\n * If the specified pixel format has no alpha component the alpha value will\n * be ignored (as it will be in formats with a palette).\n *\n * If the format has a palette (8-bit) the index of the closest matching color\n * in the palette will be returned.\n *\n * If the pixel format bpp (color depth) is less than 32-bpp then the unused\n * upper bits of the return value can safely be ignored (e.g., with a 16-bpp\n * format the return value can be assigned to a Uint16, and similarly a Uint8\n * for an 8-bpp format).\n *\n * \\param format an SDL_PixelFormat structure describing the format of the\n *               pixel\n * \\param r the red component of the pixel in the range 0-255\n * \\param g the green component of the pixel in the range 0-255\n * \\param b the blue component of the pixel in the range 0-255\n * \\param a the alpha component of the pixel in the range 0-255\n * \\returns a pixel value\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRGB\n * \\sa SDL_GetRGBA\n * \\sa SDL_MapRGB\n */"
    },
    "SDL_MaximizeWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1570,
        "column": 29
      },
      "comment": "/**\n * Request that the window be made as large as possible.\n *\n * Non-resizable windows can\u0027t be maximized. The window must have the\n * SDL_WINDOW_RESIZABLE flag set, or this will have no effect.\n *\n * On some windowing systems this request is asynchronous and the new window\n * state may not have have been applied immediately upon the return of this\n * function. If an immediate change is required, call SDL_SyncWindow() to\n * block until the changes have taken effect.\n *\n * When the window state changes, an SDL_EVENT_WINDOW_MAXIMIZED event will be\n * emitted. Note that, as this is just a request, the windowing system can\n * deny the state change.\n *\n * When maximizing a window, whether the constraints set via\n * SDL_SetWindowMaximumSize() are honored depends on the policy of the window\n * manager. Win32 and macOS enforce the constraints when maximizing, while X11\n * and Wayland window managers may vary.\n *\n * \\param window the window to maximize\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_MinimizeWindow\n * \\sa SDL_RestoreWindow\n * \\sa SDL_SyncWindow\n */"
    },
    "SDL_memcmp": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "s1",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "s2",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "len",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 799,
        "column": 29
      }
    },
    "SDL_memcpy": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "src",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "len",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 760,
        "column": 31
      }
    },
    "SDL_memmove": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "src",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "len",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 774,
        "column": 31
      }
    },
    "SDL_MemoryBarrierAcquireFunction": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_atomic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
        "line": 193,
        "column": 30
      },
      "comment": "/*\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_MemoryBarrierReleaseFunction": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_atomic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
        "line": 188,
        "column": 30
      },
      "comment": "/**\n * Memory barriers are designed to prevent reads and writes from being\n * reordered by the compiler and being seen out of order on multi-core CPUs.\n *\n * A typical pattern would be for thread A to write some data and a flag, and\n * for thread B to read the flag and get the data. In this case you would\n * insert a release barrier between writing the data and the flag,\n * guaranteeing that the data write completes no later than the flag is\n * written, and you would insert an acquire barrier between reading the flag\n * and reading the data, to ensure that all the reads associated with the flag\n * have completed.\n *\n * In this pattern you should always see a release barrier paired with an\n * acquire barrier and you should gate the data reads/writes with a single\n * flag variable.\n *\n * For more information on these semantics, take a look at the blog post:\n * http://preshing.com/20120913/acquire-and-release-semantics\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_memset": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "c",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "len",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 784,
        "column": 31
      }
    },
    "SDL_memset4": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "val",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        },
        {
          "name": "dwords",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 785,
        "column": 31
      }
    },
    "SDL_Metal_CreateView": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_MetalView",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_metal.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_metal.h",
          "line": 44,
          "column": 15
        },
        "inner_type": {
          "name": "void *",
          "kind": "pointer",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          },
          "inner_type": {
            "name": "void",
            "kind": "primitive",
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_metal.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_metal.h",
        "line": 69,
        "column": 39
      },
      "comment": "/**\n * Create a CAMetalLayer-backed NSView/UIView and attach it to the specified\n * window.\n *\n * On macOS, this does *not* associate a MTLDevice with the CAMetalLayer on\n * its own. It is up to user code to do that.\n *\n * The returned handle can be casted directly to a NSView or UIView. To access\n * the backing CAMetalLayer, call SDL_Metal_GetLayer().\n *\n * \\param window the window\n * \\returns handle NSView or UIView\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_Metal_DestroyView\n * \\sa SDL_Metal_GetLayer\n */"
    },
    "SDL_Metal_DestroyView": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "view",
          "type": {
            "name": "SDL_MetalView",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_metal.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_metal.h",
              "line": 44,
              "column": 15
            },
            "inner_type": {
              "name": "void *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "void",
                "kind": "primitive",
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_metal.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_metal.h",
            "line": 44,
            "column": 15
          }
        }
      ],
      "location": {
        "fileName": "SDL_metal.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_metal.h",
        "line": 83,
        "column": 30
      },
      "comment": "/**\n * Destroy an existing SDL_MetalView object.\n *\n * This should be called before SDL_DestroyWindow, if SDL_Metal_CreateView was\n * called after SDL_CreateWindow.\n *\n * \\param view the SDL_MetalView object\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_Metal_CreateView\n */"
    },
    "SDL_Metal_GetLayer": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "view",
          "type": {
            "name": "SDL_MetalView",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_metal.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_metal.h",
              "line": 44,
              "column": 15
            },
            "inner_type": {
              "name": "void *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "void",
                "kind": "primitive",
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_metal.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_metal.h",
            "line": 44,
            "column": 15
          }
        }
      ],
      "location": {
        "fileName": "SDL_metal.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_metal.h",
        "line": 93,
        "column": 31
      },
      "comment": "/**\n * Get a pointer to the backing CAMetalLayer for the given view.\n *\n * \\param view the SDL_MetalView object\n * \\returns a pointer\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_MinimizeWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1594,
        "column": 29
      },
      "comment": "/**\n * Request that the window be minimized to an iconic representation.\n *\n * On some windowing systems this request is asynchronous and the new window\n * state may not have have been applied immediately upon the return of this\n * function. If an immediate change is required, call SDL_SyncWindow() to\n * block until the changes have taken effect.\n *\n * When the window state changes, an SDL_EVENT_WINDOW_MINIMIZED event will be\n * emitted. Note that, as this is just a request, the windowing system can\n * deny the state change.\n *\n * \\param window the window to minimize\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_MaximizeWindow\n * \\sa SDL_RestoreWindow\n * \\sa SDL_SyncWindow\n */"
    },
    "SDL_modf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "double *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "double",
              "kind": "primitive",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1183,
        "column": 32
      }
    },
    "SDL_modff": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1184,
        "column": 31
      }
    },
    "SDL_OnApplicationDidBecomeActive": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_system.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_system.h",
        "line": 632,
        "column": 30
      },
      "comment": "/*\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_OnApplicationDidEnterBackground": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_system.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_system.h",
        "line": 622,
        "column": 30
      },
      "comment": "/*\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_OnApplicationDidReceiveMemoryWarning": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_system.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_system.h",
        "line": 612,
        "column": 30
      },
      "comment": "/*\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_OnApplicationWillEnterForeground": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_system.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_system.h",
        "line": 627,
        "column": 30
      },
      "comment": "/*\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_OnApplicationWillResignActive": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_system.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_system.h",
        "line": 617,
        "column": 30
      },
      "comment": "/*\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_OnApplicationWillTerminate": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_system.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_system.h",
        "line": 607,
        "column": 30
      },
      "comment": "/*\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_OpenCameraDevice": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Camera *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Camera",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_camera.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
            "line": 54,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_CameraDeviceID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_camera.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
              "line": 48,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_camera.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
            "line": 48,
            "column": 16
          }
        },
        {
          "name": "spec",
          "type": {
            "name": "const SDL_CameraSpec *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_CameraSpec",
              "kind": "typeAlias",
              "size_of": 20,
              "align_of": 4,
              "location": {
                "fileName": "SDL_camera.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
                "line": 71,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_CameraSpec",
                "kind": "struct",
                "size_of": 20,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_camera.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
                  "line": 64,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 292,
        "column": 37
      },
      "comment": "/**\n * Open a video capture device (a \u0022camera\u0022).\n *\n * You can open the device with any reasonable spec, and if the hardware can\u0027t\n * directly support it, it will convert data seamlessly to the requested\n * format. This might incur overhead, including scaling of image data.\n *\n * If you would rather accept whatever format the device offers, you can pass\n * a NULL spec here and it will choose one for you (and you can use\n * SDL_Surface\u0027s conversion/scaling functions directly if necessary).\n *\n * You can call SDL_GetCameraFormat() to get the actual data format if passing\n * a NULL spec here. You can see the exact specs a device can support without\n * conversion with SDL_GetCameraSupportedSpecs().\n *\n * SDL will not attempt to emulate framerate; it will try to set the hardware\n * to the rate closest to the requested speed, but it won\u0027t attempt to limit\n * or duplicate frames artificially; call SDL_GetCameraFormat() to see the\n * actual framerate of the opened the device, and check your timestamps if\n * this is crucial to your app!\n *\n * Note that the camera is not usable until the user approves its use! On some\n * platforms, the operating system will prompt the user to permit access to\n * the camera, and they can choose Yes or No at that point. Until they do, the\n * camera will not be usable. The app should either wait for an\n * SDL_EVENT_CAMERA_DEVICE_APPROVED (or SDL_EVENT_CAMERA_DEVICE_DENIED) event,\n * or poll SDL_IsCameraApproved() occasionally until it returns non-zero. On\n * platforms that don\u0027t require explicit user approval (and perhaps in places\n * where the user previously permitted access), the approval event might come\n * immediately, but it might come seconds, minutes, or hours later!\n *\n * \\param instance_id the camera device instance ID\n * \\param spec The desired format for data the device will provide. Can be\n *             NULL.\n * \\returns device, or NULL on failure; call SDL_GetError() for more\n *          information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetCameraDevices\n * \\sa SDL_GetCameraFormat\n */"
    },
    "SDL_OpenFileStorage": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Storage *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Storage",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_storage.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
            "line": 78,
            "column": 16
          }
        }
      },
      "parameters": [
        {
          "name": "path",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 145,
        "column": 38
      },
      "comment": "/**\n * Opens up a container for local filesystem storage.\n *\n * This is provided for development and tools. Portable applications should\n * use SDL_OpenTitleStorage() for access to game data and\n * SDL_OpenUserStorage() for access to user data.\n *\n * \\param path the base path prepended to all storage paths, or NULL for no\n *             base path\n * \\returns a filesystem storage container on success or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CloseStorage\n * \\sa SDL_GetStorageFileSize\n * \\sa SDL_GetStorageSpaceRemaining\n * \\sa SDL_OpenTitleStorage\n * \\sa SDL_OpenUserStorage\n * \\sa SDL_ReadStorageFile\n * \\sa SDL_WriteStorageFile\n */"
    },
    "SDL_OpenGamepad": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Gamepad *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Gamepad",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 59,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 607,
        "column": 38
      },
      "comment": "/**\n * Open a gamepad for use.\n *\n * \\param instance_id the joystick instance ID\n * \\returns a gamepad identifier or NULL if an error occurred; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CloseGamepad\n * \\sa SDL_IsGamepad\n */"
    },
    "SDL_OpenHaptic": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Haptic *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Haptic",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 146,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_HapticID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_haptic.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
              "line": 845,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 845,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 904,
        "column": 37
      },
      "comment": "/**\n * Open a haptic device for use.\n *\n * The index passed as an argument refers to the N\u0027th haptic device on this\n * system.\n *\n * When opening a haptic device, its gain will be set to maximum and\n * autocenter will be disabled. To modify these values use SDL_SetHapticGain()\n * and SDL_SetHapticAutocenter().\n *\n * \\param instance_id the haptic device instance ID\n * \\returns the device identifier or NULL on failure; call SDL_GetError() for\n *          more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CloseHaptic\n * \\sa SDL_GetHaptics\n * \\sa SDL_OpenHapticFromJoystick\n * \\sa SDL_OpenHapticFromMouse\n * \\sa SDL_SetHapticAutocenter\n * \\sa SDL_SetHapticGain\n */"
    },
    "SDL_OpenHapticFromJoystick": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Haptic *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Haptic",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 146,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 999,
        "column": 37
      },
      "comment": "/**\n * Open a haptic device for use from a joystick device.\n *\n * You must still close the haptic device separately. It will not be closed\n * with the joystick.\n *\n * When opened from a joystick you should first close the haptic device before\n * closing the joystick device. If not, on some implementations the haptic\n * device will also get unallocated and you\u0027ll be unable to use force feedback\n * on that device.\n *\n * \\param joystick the SDL_Joystick to create a haptic device from\n * \\returns a valid haptic device identifier on success or NULL on failure;\n *          call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CloseHaptic\n * \\sa SDL_IsJoystickHaptic\n */"
    },
    "SDL_OpenHapticFromMouse": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Haptic *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Haptic",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 146,
            "column": 8
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 965,
        "column": 37
      },
      "comment": "/**\n * Try to open a haptic device from the current mouse.\n *\n * \\returns the haptic device identifier or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CloseHaptic\n * \\sa SDL_IsMouseHaptic\n */"
    },
    "SDL_OpenJoystick": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Joystick *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Joystick",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 71,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 311,
        "column": 39
      },
      "comment": "/**\n * Open a joystick for use.\n *\n * The joystick subsystem must be initialized before a joystick can be opened\n * for use.\n *\n * \\param instance_id the joystick instance ID\n * \\returns a joystick identifier or NULL if an error occurred; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CloseJoystick\n */"
    },
    "SDL_OpenSensor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Sensor *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Sensor",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_sensor.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
            "line": 51,
            "column": 8
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_SensorID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_sensor.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
              "line": 60,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_sensor.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
            "line": 60,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 181,
        "column": 37
      },
      "comment": "/**\n * Open a sensor for use.\n *\n * \\param instance_id the sensor instance ID\n * \\returns an SDL_Sensor sensor object, or NULL if an error occurred.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_OpenStorage": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Storage *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Storage",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_storage.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
            "line": 78,
            "column": 16
          }
        }
      },
      "parameters": [
        {
          "name": "iface",
          "type": {
            "name": "const SDL_StorageInterface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_StorageInterface",
              "kind": "typeAlias",
              "size_of": 80,
              "align_of": 8,
              "location": {
                "fileName": "SDL_storage.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
                "line": 76,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_StorageInterface",
                "kind": "struct",
                "size_of": 80,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_storage.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
                  "line": 44,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 169,
        "column": 38
      },
      "comment": "/**\n * Opens up a container using a client-provided storage interface.\n *\n * Applications do not need to use this function unless they are providing\n * their own SDL_Storage implementation. If you just need an SDL_Storage, you\n * should use the built-in implementations in SDL, like SDL_OpenTitleStorage()\n * or SDL_OpenUserStorage().\n *\n * \\param iface the function table to be used by this container\n * \\param userdata the pointer that will be passed to the store interface\n * \\returns a storage container on success or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CloseStorage\n * \\sa SDL_GetStorageFileSize\n * \\sa SDL_GetStorageSpaceRemaining\n * \\sa SDL_ReadStorageFile\n * \\sa SDL_StorageReady\n * \\sa SDL_WriteStorageFile\n */"
    },
    "SDL_OpenTitleStorage": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Storage *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Storage",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_storage.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
            "line": 78,
            "column": 16
          }
        }
      },
      "parameters": [
        {
          "name": "override",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 95,
        "column": 38
      },
      "comment": "/**\n * Opens up a read-only container for the application\u0027s filesystem.\n *\n * \\param override a path to override the backend\u0027s default title root\n * \\param props a property list that may contain backend-specific information\n * \\returns a title storage container on success or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CloseStorage\n * \\sa SDL_GetStorageFileSize\n * \\sa SDL_OpenUserStorage\n * \\sa SDL_ReadStorageFile\n */"
    },
    "SDL_OpenURL": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "url",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_misc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_misc.h",
        "line": 69,
        "column": 29
      },
      "comment": "/**\n * Open a URL/URI in the browser or other appropriate external application.\n *\n * Open a URL in a separate, system-provided application. How this works will\n * vary wildly depending on the platform. This will likely launch what makes\n * sense to handle a specific URL\u0027s protocol (a web browser for \u0060http://\u0060,\n * etc), but it might also be able to launch file managers for directories and\n * other things.\n *\n * What happens when you open a URL varies wildly as well: your game window\n * may lose focus (and may or may not lose focus if your game was fullscreen\n * or grabbing input at the time). On mobile devices, your app will likely\n * move to the background or your process might be paused. Any given platform\n * may or may not handle a given URL.\n *\n * If this is unimplemented (or simply unavailable) for a platform, this will\n * fail with an error. A successful result does not mean the URL loaded, just\n * that we launched _something_ to handle it (or at least believe we did).\n *\n * All this to say: this function can be useful, but you should definitely\n * test it on every platform you target.\n *\n * \\param url A valid URL/URI to open. Use \u0060file:///full/path/to/file\u0060 for\n *            local files, if supported.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_OpenUserStorage": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Storage *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_Storage",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_storage.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
            "line": 78,
            "column": 16
          }
        }
      },
      "parameters": [
        {
          "name": "org",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "app",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 121,
        "column": 38
      },
      "comment": "/**\n * Opens up a container for a user\u0027s unique read/write filesystem.\n *\n * While title storage can generally be kept open throughout runtime, user\n * storage should only be opened when the client is ready to read/write files.\n * This allows the backend to properly batch file operations and flush them\n * when the container has been closed; ensuring safe and optimal save I/O.\n *\n * \\param org the name of your organization\n * \\param app the name of your application\n * \\param props a property list that may contain backend-specific information\n * \\returns a user storage container on success or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CloseStorage\n * \\sa SDL_GetStorageFileSize\n * \\sa SDL_GetStorageSpaceRemaining\n * \\sa SDL_OpenTitleStorage\n * \\sa SDL_ReadStorageFile\n * \\sa SDL_StorageReady\n * \\sa SDL_WriteStorageFile\n */"
    },
    "SDL_PauseHaptic": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1256,
        "column": 29
      },
      "comment": "/**\n * Pause a haptic device.\n *\n * Device must support the \u0060SDL_HAPTIC_PAUSE\u0060 feature. Call SDL_ResumeHaptic()\n * to resume playback.\n *\n * Do not modify the effects nor add new ones while the device is paused. That\n * can cause all sorts of weird errors.\n *\n * \\param haptic the SDL_Haptic device to pause\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ResumeHaptic\n */"
    },
    "SDL_PeepEvents": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "events",
          "type": {
            "name": "SDL_Event *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Event",
              "kind": "typeAlias",
              "size_of": 128,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 792,
                "column": 3
              },
              "inner_type": {
                "name": "union SDL_Event",
                "kind": "union",
                "size_of": 128,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_events.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                  "line": 741,
                  "column": 15
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "numevents",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "action",
          "type": {
            "name": "SDL_eventaction",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 830,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_eventaction",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 825,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 830,
            "column": 3
          }
        },
        {
          "name": "minType",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        },
        {
          "name": "maxType",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 870,
        "column": 29
      },
      "comment": "/**\n * Check the event queue for messages and optionally return them.\n *\n * \u0060action\u0060 may be any of the following:\n *\n * - \u0060SDL_ADDEVENT\u0060: up to \u0060numevents\u0060 events will be added to the back of the\n *   event queue.\n * - \u0060SDL_PEEKEVENT\u0060: \u0060numevents\u0060 events at the front of the event queue,\n *   within the specified minimum and maximum type, will be returned to the\n *   caller and will _not_ be removed from the queue.\n * - \u0060SDL_GETEVENT\u0060: up to \u0060numevents\u0060 events at the front of the event queue,\n *   within the specified minimum and maximum type, will be returned to the\n *   caller and will be removed from the queue.\n *\n * You may have to call SDL_PumpEvents() before calling this function.\n * Otherwise, the events may not be ready to be filtered when you call\n * SDL_PeepEvents().\n *\n * This function is thread-safe.\n *\n * \\param events destination buffer for the retrieved events\n * \\param numevents if action is SDL_ADDEVENT, the number of events to add\n *                  back to the event queue; if action is SDL_PEEKEVENT or\n *                  SDL_GETEVENT, the maximum number of events to retrieve\n * \\param action action to take; see [[#action|Remarks]] for details\n * \\param minType minimum value of the event type to be considered;\n *                SDL_EVENT_FIRST is a safe choice\n * \\param maxType maximum value of the event type to be considered;\n *                SDL_EVENT_LAST is a safe choice\n * \\returns the number of events actually stored or a negative error code on\n *          failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_PollEvent\n * \\sa SDL_PumpEvents\n * \\sa SDL_PushEvent\n */"
    },
    "SDL_PenConnected": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_PenID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pen.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
              "line": 57,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_pen.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
            "line": 57,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 220,
        "column": 34
      },
      "comment": "/**\n * Checks whether a pen is still attached.\n *\n * If a pen is detached, it will not show up for ::SDL_GetPens(). Other\n * operations will still be available but may return default values.\n *\n * \\param instance_id A pen ID.\n * \\returns SDL_TRUE if \u0022instance_id\u0022 is valid and the corresponding pen is\n *          attached, or SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0\n */"
    },
    "SDL_PlayHapticRumble": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "strength",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "length",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1328,
        "column": 29
      },
      "comment": "/**\n * Run a simple rumble effect on a haptic device.\n *\n * \\param haptic the haptic device to play the rumble effect on\n * \\param strength strength of the rumble to play as a 0-1 float value\n * \\param length length of the rumble to play in milliseconds\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_InitHapticRumble\n * \\sa SDL_StopHapticRumble\n */"
    },
    "SDL_PollEvent": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "event",
          "type": {
            "name": "SDL_Event *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Event",
              "kind": "typeAlias",
              "size_of": 128,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 792,
                "column": 3
              },
              "inner_type": {
                "name": "union SDL_Event",
                "kind": "union",
                "size_of": 128,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_events.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                  "line": 741,
                  "column": 15
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 1002,
        "column": 34
      },
      "comment": "/**\n * Poll for currently pending events.\n *\n * If \u0060event\u0060 is not NULL, the next event is removed from the queue and stored\n * in the SDL_Event structure pointed to by \u0060event\u0060. The 1 returned refers to\n * this event, immediately stored in the SDL Event structure -- not an event\n * to follow.\n *\n * If \u0060event\u0060 is NULL, it simply returns 1 if there is an event in the queue,\n * but will not remove it from the queue.\n *\n * As this function may implicitly call SDL_PumpEvents(), you can only call\n * this function in the thread that set the video mode.\n *\n * SDL_PollEvent() is the favored way of receiving system events since it can\n * be done from the main loop and does not suspend the main loop while waiting\n * on an event to be posted.\n *\n * The common practice is to fully process the event queue once every frame,\n * usually as a first step before updating the game\u0027s state:\n *\n * \u0060\u0060\u0060c\n * while (game_is_still_running) {\n *     SDL_Event event;\n *     while (SDL_PollEvent(\u0026event)) {  // poll until all events are handled!\n *         // decide what to do with this event.\n *     }\n *\n *     // update game state, draw the current frame\n * }\n * \u0060\u0060\u0060\n *\n * \\param event the SDL_Event structure to be filled with the next event from\n *              the queue, or NULL\n * \\returns SDL_TRUE if this got an event or SDL_FALSE if there are none\n *          available.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_PushEvent\n * \\sa SDL_WaitEvent\n * \\sa SDL_WaitEventTimeout\n */"
    },
    "SDL_PostSemaphore": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "sem",
          "type": {
            "name": "SDL_Semaphore *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Semaphore",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 481,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 601,
        "column": 29
      },
      "comment": "/**\n * Atomically increment a semaphore\u0027s value and wake waiting threads.\n *\n * \\param sem the semaphore to increment\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_TryWaitSemaphore\n * \\sa SDL_WaitSemaphore\n * \\sa SDL_WaitSemaphoreTimeout\n */"
    },
    "SDL_pow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1185,
        "column": 32
      }
    },
    "SDL_powf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1186,
        "column": 31
      }
    },
    "SDL_PremultiplyAlpha": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "src_format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 422,
            "column": 3
          }
        },
        {
          "name": "src",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "src_pitch",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dst_format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 422,
            "column": 3
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dst_pitch",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 806,
        "column": 29
      },
      "comment": "/**\n * Premultiply the alpha on a block of pixels.\n *\n * This is safe to use with src == dst, but not for other overlapping areas.\n *\n * This function is currently only implemented for SDL_PIXELFORMAT_ARGB8888.\n *\n * \\param width the width of the block to convert, in pixels\n * \\param height the height of the block to convert, in pixels\n * \\param src_format an SDL_PixelFormatEnum value of the \u0060src\u0060 pixels format\n * \\param src a pointer to the source pixels\n * \\param src_pitch the pitch of the source pixels, in bytes\n * \\param dst_format an SDL_PixelFormatEnum value of the \u0060dst\u0060 pixels format\n * \\param dst a pointer to be filled in with premultiplied pixel data\n * \\param dst_pitch the pitch of the destination pixels, in bytes\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_PumpEvents": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 822,
        "column": 30
      },
      "comment": "/**\n * Pump the event loop, gathering events from the input devices.\n *\n * This function updates the event queue and internal input device state.\n *\n * **WARNING**: This should only be run in the thread that initialized the\n * video subsystem, and for extra safety, you should consider only doing those\n * things on the main thread in any case.\n *\n * SDL_PumpEvents() gathers all the pending input information from devices and\n * places it in the event queue. Without calls to SDL_PumpEvents() no events\n * would ever be placed on the queue. Often the need for calls to\n * SDL_PumpEvents() is hidden from the user since SDL_PollEvent() and\n * SDL_WaitEvent() implicitly call SDL_PumpEvents(). However, if you are not\n * polling or waiting for events (e.g. you are filtering them), then you must\n * call SDL_PumpEvents() to force an event queue update.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_PollEvent\n * \\sa SDL_WaitEvent\n */"
    },
    "SDL_PushEvent": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "event",
          "type": {
            "name": "SDL_Event *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Event",
              "kind": "typeAlias",
              "size_of": 128,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 792,
                "column": 3
              },
              "inner_type": {
                "name": "union SDL_Event",
                "kind": "union",
                "size_of": 128,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_events.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                  "line": 741,
                  "column": 15
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 1086,
        "column": 29
      },
      "comment": "/**\n * Add an event to the event queue.\n *\n * The event queue can actually be used as a two way communication channel.\n * Not only can events be read from the queue, but the user can also push\n * their own events onto it. \u0060event\u0060 is a pointer to the event structure you\n * wish to push onto the queue. The event is copied into the queue, and the\n * caller may dispose of the memory pointed to after SDL_PushEvent() returns.\n *\n * Note: Pushing device input events onto the queue doesn\u0027t modify the state\n * of the device within SDL.\n *\n * This function is thread-safe, and can be called from other threads safely.\n *\n * Note: Events pushed onto the queue with SDL_PushEvent() get passed through\n * the event filter but events added with SDL_PeepEvents() do not.\n *\n * For pushing application-specific events, please use SDL_RegisterEvents() to\n * get an event type that does not conflict with other code that also wants\n * its own custom event types.\n *\n * \\param event the SDL_Event to be added to the queue\n * \\returns 1 on success, 0 if the event was filtered, or a negative error\n *          code on failure; call SDL_GetError() for more information. A\n *          common reason for error is the event queue being full.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_PeepEvents\n * \\sa SDL_PollEvent\n * \\sa SDL_RegisterEvents\n */"
    },
    "SDL_qsort": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "base",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "nmemb",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        },
        {
          "name": "compare",
          "type": {
            "name": "int (const void *, const void *)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 508,
        "column": 30
      }
    },
    "SDL_qsort_r": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "base",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "nmemb",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        },
        {
          "name": "compare",
          "type": {
            "name": "int (void *, const void *, const void *)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 511,
        "column": 30
      }
    },
    "SDL_QueryTexture": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "format",
          "type": {
            "name": "Uint32 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "access",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 817,
        "column": 29
      },
      "comment": "/**\n * Query the attributes of a texture.\n *\n * \\param texture the texture to query\n * \\param format a pointer filled in with the raw format of the texture; the\n *               actual format may differ, but pixel transfers will use this\n *               format (one of the SDL_PixelFormatEnum values). This argument\n *               can be NULL if you don\u0027t need this information.\n * \\param access a pointer filled in with the actual access to the texture\n *               (one of the SDL_TextureAccess values). This argument can be\n *               NULL if you don\u0027t need this information.\n * \\param w a pointer filled in with the width of the texture in pixels. This\n *          argument can be NULL if you don\u0027t need this information.\n * \\param h a pointer filled in with the height of the texture in pixels. This\n *          argument can be NULL if you don\u0027t need this information.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_Quit": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_init.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_init.h",
        "line": 176,
        "column": 30
      },
      "comment": "/**\n * Clean up all initialized subsystems.\n *\n * You should call this function even if you have already shutdown each\n * initialized subsystem with SDL_QuitSubSystem(). It is safe to call this\n * function even in the case of errors in initialization.\n *\n * You can use this function with atexit() to ensure that it is run when your\n * application is shutdown, but it is not wise to do this from a library or\n * other dynamically loaded code.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_Init\n * \\sa SDL_QuitSubSystem\n */"
    },
    "SDL_QuitSubSystem": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "flags",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_init.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_init.h",
        "line": 144,
        "column": 30
      },
      "comment": "/**\n * Shut down specific SDL subsystems.\n *\n * You still need to call SDL_Quit() even if you close all open subsystems\n * with SDL_QuitSubSystem().\n *\n * \\param flags any of the flags used by SDL_Init(); see SDL_Init for details.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_InitSubSystem\n * \\sa SDL_Quit\n */"
    },
    "SDL_RaiseWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1538,
        "column": 29
      },
      "comment": "/**\n * Raise a window above other windows and set the input focus.\n *\n * \\param window the window to raise\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_ReadStorageFile": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "storage",
          "type": {
            "name": "SDL_Storage *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Storage",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_storage.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
                "line": 78,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "path",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "destination",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "length",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 187,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 236,
        "column": 29
      },
      "comment": "/**\n * Synchronously read a file from a storage container into a client-provided\n * buffer.\n *\n * \\param storage a storage container to read from\n * \\param path the relative path of the file to read\n * \\param destination a client-provided buffer to read the file into\n * \\param length the length of the destination buffer\n * \\returns 0 if the file was read, a negative value otherwise; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetStorageFileSize\n * \\sa SDL_StorageReady\n * \\sa SDL_WriteStorageFile\n */"
    },
    "SDL_ReadSurfacePixel": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "r",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "g",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "b",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "a",
          "type": {
            "name": "Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 1039,
        "column": 29
      },
      "comment": "/**\n * Retrieves a single pixel from a surface.\n *\n * This function prioritizes correctness over speed: it is suitable for unit\n * tests, but is not intended for use in a game engine.\n *\n * Like SDL_GetRGBA, this uses the entire 0..255 range when converting color\n * components from pixel formats with less than 8 bits per RGB component.\n *\n * \\param surface the surface to read\n * \\param x the horizontal coordinate, 0 \u003C= x \u003C width\n * \\param y the vertical coordinate, 0 \u003C= y \u003C height\n * \\param r a pointer filled in with the red channel, 0-255, or NULL to ignore\n *          this channel\n * \\param g a pointer filled in with the green channel, 0-255, or NULL to\n *          ignore this channel\n * \\param b a pointer filled in with the blue channel, 0-255, or NULL to\n *          ignore this channel\n * \\param a a pointer filled in with the alpha channel, 0-255, or NULL to\n *          ignore this channel\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_realloc": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "mem",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "size",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 411,
        "column": 49
      }
    },
    "SDL_RegisterEvents": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "numevents",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 1262,
        "column": 32
      },
      "comment": "/**\n * Allocate a set of user-defined events, and return the beginning event\n * number for that set of events.\n *\n * \\param numevents the number of events to be allocated\n * \\returns the beginning event number, or 0 if numevents is invalid or if\n *          there are not enough user-defined events left.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_PushEvent\n */"
    },
    "SDL_ReleaseCameraFrame": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "camera",
          "type": {
            "name": "SDL_Camera *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Camera",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_camera.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
                "line": 54,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "frame",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 454,
        "column": 29
      },
      "comment": "/**\n * Release a frame of video acquired from a camera.\n *\n * Let the back-end re-use the internal buffer for camera.\n *\n * This function _must_ be called only on surface objects returned by\n * SDL_AcquireCameraFrame(). This function should be called as quickly as\n * possible after acquisition, as SDL keeps a small FIFO queue of surfaces for\n * video frames; if surfaces aren\u0027t released in a timely manner, SDL may drop\n * upcoming video frames from the camera.\n *\n * If the app needs to keep the surface for a significant time, they should\n * make a copy of it and release the original.\n *\n * The app should not use the surface again after calling this function;\n * assume the surface is freed and the pointer is invalid.\n *\n * \\param camera opened camera device\n * \\param frame The video frame surface to release.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AcquireCameraFrame\n */"
    },
    "SDL_ReloadGamepadMappings": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 321,
        "column": 29
      },
      "comment": "/**\n * Reinitialize the SDL mapping database to its initial state.\n *\n * This will generate gamepad events as needed if device mappings change.\n *\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_RemovePath": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "path",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_filesystem.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
        "line": 293,
        "column": 29
      },
      "comment": "/**\n * Remove a file or an empty directory.\n *\n * \\param path the path of the directory to enumerate\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_RemoveStoragePath": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "storage",
          "type": {
            "name": "SDL_Storage *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Storage",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_storage.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
                "line": 78,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "path",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 298,
        "column": 29
      },
      "comment": "/**\n * Remove a file or an empty directory in a writable storage container.\n *\n * \\param storage a storage container\n * \\param path the path of the directory to enumerate\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_StorageReady\n */"
    },
    "SDL_RemoveTimer": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "id",
          "type": {
            "name": "SDL_TimerID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_timer.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
              "line": 142,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_timer.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
            "line": 142,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_timer.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
        "line": 191,
        "column": 34
      },
      "comment": "/**\n * Remove a timer created with SDL_AddTimer().\n *\n * \\param id the ID of the timer to remove\n * \\returns SDL_TRUE if the timer is removed or SDL_FALSE if the timer wasn\u0027t\n *          found.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AddTimer\n */"
    },
    "SDL_RenamePath": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "oldpath",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "newpath",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_filesystem.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
        "line": 305,
        "column": 29
      },
      "comment": "/**\n * Rename a file or directory.\n *\n * \\param oldpath the old path\n * \\param newpath the new path\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_RenameStoragePath": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "storage",
          "type": {
            "name": "SDL_Storage *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Storage",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_storage.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
                "line": 78,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "oldpath",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "newpath",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 313,
        "column": 29
      },
      "comment": "/**\n * Rename a file or directory in a writable storage container.\n *\n * \\param storage a storage container\n * \\param oldpath the old path\n * \\param newpath the new path\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_StorageReady\n */"
    },
    "SDL_RenderClear": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1680,
        "column": 29
      },
      "comment": "/**\n * Clear the current rendering target with the drawing color.\n *\n * This function clears the entire rendering target, ignoring the viewport and\n * the clip rectangle.\n *\n * \\param renderer the rendering context\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetRenderDrawColor\n */"
    },
    "SDL_RenderClipEnabled": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1470,
        "column": 34
      },
      "comment": "/**\n * Get whether clipping is enabled on the given renderer.\n *\n * \\param renderer the rendering context\n * \\returns SDL_TRUE if clipping is enabled or SDL_FALSE if not; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderClipRect\n * \\sa SDL_SetRenderClipRect\n */"
    },
    "SDL_RenderCoordinatesFromWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "window_x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "window_y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "x",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1336,
        "column": 29
      },
      "comment": "/**\n * Get a point in render coordinates when given a point in window coordinates.\n *\n * \\param renderer the rendering context\n * \\param window_x the x coordinate in window coordinates\n * \\param window_y the y coordinate in window coordinates\n * \\param x a pointer filled with the x coordinate in render coordinates\n * \\param y a pointer filled with the y coordinate in render coordinates\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetRenderLogicalPresentation\n * \\sa SDL_SetRenderScale\n */"
    },
    "SDL_RenderCoordinatesToWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "window_x",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "window_y",
          "type": {
            "name": "float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1356,
        "column": 29
      },
      "comment": "/**\n * Get a point in window coordinates when given a point in render coordinates.\n *\n * \\param renderer the rendering context\n * \\param x the x coordinate in render coordinates\n * \\param y the y coordinate in render coordinates\n * \\param window_x a pointer filled with the x coordinate in window\n *                 coordinates\n * \\param window_y a pointer filled with the y coordinate in window\n *                 coordinates\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetRenderLogicalPresentation\n * \\sa SDL_SetRenderScale\n */"
    },
    "SDL_RenderFillRect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1786,
        "column": 29
      },
      "comment": "/**\n * Fill a rectangle on the current rendering target with the drawing color at\n * subpixel precision.\n *\n * \\param renderer The renderer which should fill a rectangle.\n * \\param rect A pointer to the destination rectangle, or NULL for the entire\n *             rendering target.\n * \\returns 0 on success, or -1 on error\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderFillRects\n */"
    },
    "SDL_RenderFillRects": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rects",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1802,
        "column": 29
      },
      "comment": "/**\n * Fill some number of rectangles on the current rendering target with the\n * drawing color at subpixel precision.\n *\n * \\param renderer The renderer which should fill multiple rectangles.\n * \\param rects A pointer to an array of destination rectangles.\n * \\param count The number of rectangles.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderFillRect\n */"
    },
    "SDL_RenderGeometry": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "vertices",
          "type": {
            "name": "const SDL_Vertex *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Vertex",
              "kind": "typeAlias",
              "size_of": 32,
              "align_of": 4,
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 96,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Vertex",
                "kind": "struct",
                "size_of": 32,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_render.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                  "line": 91,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "num_vertices",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "indices",
          "type": {
            "name": "const int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "num_indices",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1870,
        "column": 29
      },
      "comment": "/**\n * Render a list of triangles, optionally using a texture and indices into the\n * vertex array Color and alpha modulation is done per vertex\n * (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).\n *\n * \\param renderer The rendering context.\n * \\param texture (optional) The SDL texture to use.\n * \\param vertices Vertices.\n * \\param num_vertices Number of vertices.\n * \\param indices (optional) An array of integer indices into the \u0027vertices\u0027\n *                array, if NULL all vertices will be rendered in sequential\n *                order.\n * \\param num_indices Number of indices.\n * \\returns 0 on success, or -1 if the operation is not supported\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderGeometryRaw\n */"
    },
    "SDL_RenderGeometryRaw": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "xy",
          "type": {
            "name": "const float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "xy_stride",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "color",
          "type": {
            "name": "const SDL_Color *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Color",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 1,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 673,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Color",
                "kind": "struct",
                "size_of": 4,
                "align_of": 1,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 667,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "color_stride",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "uv",
          "type": {
            "name": "const float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "uv_stride",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "num_vertices",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "indices",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "num_indices",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "size_indices",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1900,
        "column": 29
      },
      "comment": "/**\n * Render a list of triangles, optionally using a texture and indices into the\n * vertex arrays Color and alpha modulation is done per vertex\n * (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).\n *\n * \\param renderer The rendering context.\n * \\param texture (optional) The SDL texture to use.\n * \\param xy Vertex positions\n * \\param xy_stride Byte size to move from one element to the next element\n * \\param color Vertex colors (as SDL_Color)\n * \\param color_stride Byte size to move from one element to the next element\n * \\param uv Vertex normalized texture coordinates\n * \\param uv_stride Byte size to move from one element to the next element\n * \\param num_vertices Number of vertices.\n * \\param indices (optional) An array of indices into the \u0027vertices\u0027 arrays,\n *                if NULL all vertices will be rendered in sequential order.\n * \\param num_indices Number of indices.\n * \\param size_indices Index size: 1 (byte), 2 (short), 4 (int)\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderGeometry\n */"
    },
    "SDL_RenderGeometryRawFloat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "xy",
          "type": {
            "name": "const float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "xy_stride",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "color",
          "type": {
            "name": "const SDL_FColor *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FColor",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 686,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FColor",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 680,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "color_stride",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "uv",
          "type": {
            "name": "const float *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "uv_stride",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "num_vertices",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "indices",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "num_indices",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "size_indices",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1934,
        "column": 29
      },
      "comment": "/**\n * Render a list of triangles, optionally using a texture and indices into the\n * vertex arrays Color and alpha modulation is done per vertex\n * (SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored).\n *\n * \\param renderer The rendering context.\n * \\param texture (optional) The SDL texture to use.\n * \\param xy Vertex positions\n * \\param xy_stride Byte size to move from one element to the next element\n * \\param color Vertex colors (as SDL_FColor)\n * \\param color_stride Byte size to move from one element to the next element\n * \\param uv Vertex normalized texture coordinates\n * \\param uv_stride Byte size to move from one element to the next element\n * \\param num_vertices Number of vertices.\n * \\param indices (optional) An array of indices into the \u0027vertices\u0027 arrays,\n *                if NULL all vertices will be rendered in sequential order.\n * \\param num_indices Number of indices.\n * \\param size_indices Index size: 1 (byte), 2 (short), 4 (int)\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderGeometry\n * \\sa SDL_RenderGeometryRaw\n */"
    },
    "SDL_RenderLine": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "x1",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y1",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "x2",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y2",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1725,
        "column": 29
      },
      "comment": "/**\n * Draw a line on the current rendering target at subpixel precision.\n *\n * \\param renderer The renderer which should draw a line.\n * \\param x1 The x coordinate of the start point.\n * \\param y1 The y coordinate of the start point.\n * \\param x2 The x coordinate of the end point.\n * \\param y2 The y coordinate of the end point.\n * \\returns 0 on success, or -1 on error\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderLines\n */"
    },
    "SDL_RenderLines": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "points",
          "type": {
            "name": "const SDL_FPoint *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FPoint",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 62,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FPoint",
                "kind": "struct",
                "size_of": 8,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 58,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1741,
        "column": 29
      },
      "comment": "/**\n * Draw a series of connected lines on the current rendering target at\n * subpixel precision.\n *\n * \\param renderer The renderer which should draw multiple lines.\n * \\param points The points along the lines\n * \\param count The number of points, drawing count-1 lines\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderLine\n */"
    },
    "SDL_RenderPoint": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1694,
        "column": 29
      },
      "comment": "/**\n * Draw a point on the current rendering target at subpixel precision.\n *\n * \\param renderer The renderer which should draw a point.\n * \\param x The x coordinate of the point.\n * \\param y The y coordinate of the point.\n * \\returns 0 on success, or -1 on error\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderPoints\n */"
    },
    "SDL_RenderPoints": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "points",
          "type": {
            "name": "const SDL_FPoint *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FPoint",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 62,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FPoint",
                "kind": "struct",
                "size_of": 8,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 58,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1709,
        "column": 29
      },
      "comment": "/**\n * Draw multiple points on the current rendering target at subpixel precision.\n *\n * \\param renderer The renderer which should draw multiple points.\n * \\param points The points to draw\n * \\param count The number of points to draw\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderPoint\n */"
    },
    "SDL_RenderPresent": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 2000,
        "column": 29
      },
      "comment": "/**\n * Update the screen with any rendering performed since the previous call.\n *\n * SDL\u0027s rendering functions operate on a backbuffer; that is, calling a\n * rendering function such as SDL_RenderLine() does not directly put a line on\n * the screen, but rather updates the backbuffer. As such, you compose your\n * entire scene and *present* the composed backbuffer to the screen as a\n * complete picture.\n *\n * Therefore, when using SDL\u0027s rendering API, one does all drawing intended\n * for the frame, and then calls this function once per frame to present the\n * final drawing to the user.\n *\n * The backbuffer should be considered invalidated after each present; do not\n * assume that previous contents will exist between frames. You are strongly\n * encouraged to call SDL_RenderClear() to initialize the backbuffer before\n * starting each new frame\u0027s drawing, even if you plan to overwrite every\n * pixel.\n *\n * \\param renderer the rendering context\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\threadsafety You may only call this function on the main thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderClear\n * \\sa SDL_RenderLine\n * \\sa SDL_RenderLines\n * \\sa SDL_RenderPoint\n * \\sa SDL_RenderPoints\n * \\sa SDL_RenderRect\n * \\sa SDL_RenderRects\n * \\sa SDL_RenderFillRect\n * \\sa SDL_RenderFillRects\n * \\sa SDL_SetRenderDrawBlendMode\n * \\sa SDL_SetRenderDrawColor\n */"
    },
    "SDL_RenderReadPixels": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Surface *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_Surface",
          "kind": "typeAlias",
          "size_of": 96,
          "align_of": 8,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 131,
            "column": 3
          },
          "inner_type": {
            "name": "struct SDL_Surface",
            "kind": "struct",
            "size_of": 96,
            "align_of": 8,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 107,
              "column": 16
            }
          }
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1959,
        "column": 39
      },
      "comment": "/**\n * Read pixels from the current rendering target.\n *\n * The returned surface should be freed with SDL_DestroySurface()\n *\n * **WARNING**: This is a very slow operation, and should not be used\n * frequently. If you\u0027re using this on the main rendering target, it should be\n * called after rendering and before SDL_RenderPresent().\n *\n * \\param renderer the rendering context\n * \\param rect an SDL_Rect structure representing the area in pixels relative\n *             to the to current viewport, or NULL for the entire viewport\n * \\returns a new SDL_Surface on success or NULL on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_RenderRect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1755,
        "column": 29
      },
      "comment": "/**\n * Draw a rectangle on the current rendering target at subpixel precision.\n *\n * \\param renderer The renderer which should draw a rectangle.\n * \\param rect A pointer to the destination rectangle, or NULL to outline the\n *             entire rendering target.\n * \\returns 0 on success, or -1 on error\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderRects\n */"
    },
    "SDL_RenderRects": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rects",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "count",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1771,
        "column": 29
      },
      "comment": "/**\n * Draw some number of rectangles on the current rendering target at subpixel\n * precision.\n *\n * \\param renderer The renderer which should draw multiple rectangles.\n * \\param rects A pointer to an array of destination rectangles.\n * \\param count The number of rectangles.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderRect\n */"
    },
    "SDL_RenderTexture": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "srcrect",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dstrect",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1820,
        "column": 29
      },
      "comment": "/**\n * Copy a portion of the texture to the current rendering target at subpixel\n * precision.\n *\n * \\param renderer The renderer which should copy parts of a texture.\n * \\param texture The source texture.\n * \\param srcrect A pointer to the source rectangle, or NULL for the entire\n *                texture.\n * \\param dstrect A pointer to the destination rectangle, or NULL for the\n *                entire rendering target.\n * \\returns 0 on success, or -1 on error\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderTextureRotated\n */"
    },
    "SDL_RenderTextureRotated": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "srcrect",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dstrect",
          "type": {
            "name": "const SDL_FRect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FRect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 102,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FRect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 96,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "angle",
          "type": {
            "name": "const double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "center",
          "type": {
            "name": "const SDL_FPoint *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_FPoint",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 62,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_FPoint",
                "kind": "struct",
                "size_of": 8,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 58,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "flip",
          "type": {
            "name": "SDL_FlipMode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 86,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_FlipMode",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 81,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 86,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1846,
        "column": 29
      },
      "comment": "/**\n * Copy a portion of the source texture to the current rendering target, with\n * rotation and flipping, at subpixel precision.\n *\n * \\param renderer The renderer which should copy parts of a texture.\n * \\param texture The source texture.\n * \\param srcrect A pointer to the source rectangle, or NULL for the entire\n *                texture.\n * \\param dstrect A pointer to the destination rectangle, or NULL for the\n *                entire rendering target.\n * \\param angle An angle in degrees that indicates the rotation that will be\n *              applied to dstrect, rotating it in a clockwise direction\n * \\param center A pointer to a point indicating the point around which\n *               dstrect will be rotated (if NULL, rotation will be done\n *               around dstrect.w/2, dstrect.h/2).\n * \\param flip An SDL_FlipMode value stating which flipping actions should be\n *             performed on the texture\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RenderTexture\n */"
    },
    "SDL_RenderViewportSet": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1424,
        "column": 34
      },
      "comment": "/**\n * Return whether an explicit rectangle was set as the viewport.\n *\n * This is useful if you\u0027re saving and restoring the viewport and want to know\n * whether you should restore a specific rectangle or NULL. Note that the\n * viewport is always reset when changing rendering targets.\n *\n * \\param renderer the rendering context\n * \\returns SDL_TRUE if the viewport was set to a specific rectangle, or\n *          SDL_FALSE if it was set to NULL (the entire target)\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderViewport\n * \\sa SDL_SetRenderViewport\n */"
    },
    "SDL_ReportAssertion": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_AssertState",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_assert.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
          "line": 126,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_AssertState",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_assert.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
            "line": 119,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "data",
          "type": {
            "name": "SDL_AssertData *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_AssertData",
              "kind": "typeAlias",
              "size_of": 48,
              "align_of": 8,
              "location": {
                "fileName": "SDL_assert.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
                "line": 137,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_AssertData",
                "kind": "struct",
                "size_of": 48,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_assert.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
                  "line": 128,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "func",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "file",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "line",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_assert.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
        "line": 152,
        "column": 41
      },
      "comment": "/**\n * Never call this directly.\n *\n * Use the SDL_assert* macros.\n *\n * \\param data assert data structure\n * \\param func function name\n * \\param file file name\n * \\param line line number\n * \\returns assert state\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_ResetAssertionReport": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_assert.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
        "line": 338,
        "column": 30
      },
      "comment": "/**\n * Clear the list of all assertion failures.\n *\n * This function will clear the list of all assertions triggered up to that\n * point. Immediately following this call, SDL_GetAssertionReport will return\n * no items. In addition, any previously-triggered assertions will be reset to\n * a trigger_count of zero, and their always_ignore state will be false.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetAssertionReport\n */"
    },
    "SDL_ResetHint": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2639,
        "column": 34
      },
      "comment": "/**\n * Reset a hint to the default value.\n *\n * This will reset a hint to the value of the environment variable, or NULL if\n * the environment isn\u0027t set. Callbacks will be called normally with this\n * change.\n *\n * \\param name the hint to set\n * \\returns SDL_TRUE if the hint was set, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetHint\n * \\sa SDL_ResetHints\n */"
    },
    "SDL_ResetHints": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2652,
        "column": 30
      },
      "comment": "/**\n * Reset all hints to the default values.\n *\n * This will reset all hints to the value of the associated environment\n * variable, or NULL if the environment isn\u0027t set. Callbacks will be called\n * normally with this change.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ResetHint\n */"
    },
    "SDL_ResetKeyboard": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 154,
        "column": 30
      },
      "comment": "/**\n * Clear the state of the keyboard\n *\n * This function will generate key up events for all pressed keys.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetKeyboardState\n */"
    },
    "SDL_RestoreWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1619,
        "column": 29
      },
      "comment": "/**\n * Request that the size and position of a minimized or maximized window be\n * restored.\n *\n * On some windowing systems this request is asynchronous and the new window\n * state may not have have been applied immediately upon the return of this\n * function. If an immediate change is required, call SDL_SyncWindow() to\n * block until the changes have taken effect.\n *\n * When the window state changes, an SDL_EVENT_WINDOW_RESTORED event will be\n * emitted. Note that, as this is just a request, the windowing system can\n * deny the state change.\n *\n * \\param window the window to restore\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_MaximizeWindow\n * \\sa SDL_MinimizeWindow\n * \\sa SDL_SyncWindow\n */"
    },
    "SDL_ResumeHaptic": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1271,
        "column": 29
      },
      "comment": "/**\n * Resume a haptic device.\n *\n * Call to unpause after SDL_PauseHaptic().\n *\n * \\param haptic the SDL_Haptic device to unpause\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_PauseHaptic\n */"
    },
    "SDL_round": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1187,
        "column": 32
      }
    },
    "SDL_roundf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1188,
        "column": 31
      }
    },
    "SDL_RumbleGamepad": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "low_frequency_rumble",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 162,
            "column": 18
          }
        },
        {
          "name": "high_frequency_rumble",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 162,
            "column": 18
          }
        },
        {
          "name": "duration_ms",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1282,
        "column": 29
      },
      "comment": "/**\n * Start a rumble effect on a gamepad.\n *\n * Each call to this function cancels any previous rumble effect, and calling\n * it with 0 intensity stops any rumbling.\n *\n * This function requires you to process SDL events or call\n * SDL_UpdateJoysticks() to update rumble state.\n *\n * \\param gamepad The gamepad to vibrate\n * \\param low_frequency_rumble The intensity of the low frequency (left)\n *                             rumble motor, from 0 to 0xFFFF\n * \\param high_frequency_rumble The intensity of the high frequency (right)\n *                              rumble motor, from 0 to 0xFFFF\n * \\param duration_ms The duration of the rumble effect, in milliseconds\n * \\returns 0, or -1 if rumble isn\u0027t supported on this gamepad\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_RumbleGamepadTriggers": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "left_rumble",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 162,
            "column": 18
          }
        },
        {
          "name": "right_rumble",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 162,
            "column": 18
          }
        },
        {
          "name": "duration_ms",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1310,
        "column": 29
      },
      "comment": "/**\n * Start a rumble effect in the gamepad\u0027s triggers.\n *\n * Each call to this function cancels any previous trigger rumble effect, and\n * calling it with 0 intensity stops any rumbling.\n *\n * Note that this is rumbling of the _triggers_ and not the gamepad as a\n * whole. This is currently only supported on Xbox One gamepads. If you want\n * the (more common) whole-gamepad rumble, use SDL_RumbleGamepad() instead.\n *\n * This function requires you to process SDL events or call\n * SDL_UpdateJoysticks() to update rumble state.\n *\n * \\param gamepad The gamepad to vibrate\n * \\param left_rumble The intensity of the left trigger rumble motor, from 0\n *                    to 0xFFFF\n * \\param right_rumble The intensity of the right trigger rumble motor, from 0\n *                     to 0xFFFF\n * \\param duration_ms The duration of the rumble effect, in milliseconds\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RumbleGamepad\n */"
    },
    "SDL_RumbleJoystick": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "low_frequency_rumble",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 162,
            "column": 18
          }
        },
        {
          "name": "high_frequency_rumble",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 162,
            "column": 18
          }
        },
        {
          "name": "duration_ms",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 1009,
        "column": 29
      },
      "comment": "/**\n * Start a rumble effect.\n *\n * Each call to this function cancels any previous rumble effect, and calling\n * it with 0 intensity stops any rumbling.\n *\n * This function requires you to process SDL events or call\n * SDL_UpdateJoysticks() to update rumble state.\n *\n * \\param joystick The joystick to vibrate\n * \\param low_frequency_rumble The intensity of the low frequency (left)\n *                             rumble motor, from 0 to 0xFFFF\n * \\param high_frequency_rumble The intensity of the high frequency (right)\n *                              rumble motor, from 0 to 0xFFFF\n * \\param duration_ms The duration of the rumble effect, in milliseconds\n * \\returns 0, or -1 if rumble isn\u0027t supported on this joystick\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_RumbleJoystickTriggers": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "left_rumble",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 162,
            "column": 18
          }
        },
        {
          "name": "right_rumble",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 162,
            "column": 18
          }
        },
        {
          "name": "duration_ms",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 1038,
        "column": 29
      },
      "comment": "/**\n * Start a rumble effect in the joystick\u0027s triggers\n *\n * Each call to this function cancels any previous trigger rumble effect, and\n * calling it with 0 intensity stops any rumbling.\n *\n * Note that this is rumbling of the _triggers_ and not the game controller as\n * a whole. This is currently only supported on Xbox One controllers. If you\n * want the (more common) whole-controller rumble, use SDL_RumbleJoystick()\n * instead.\n *\n * This function requires you to process SDL events or call\n * SDL_UpdateJoysticks() to update rumble state.\n *\n * \\param joystick The joystick to vibrate\n * \\param left_rumble The intensity of the left trigger rumble motor, from 0\n *                    to 0xFFFF\n * \\param right_rumble The intensity of the right trigger rumble motor, from 0\n *                     to 0xFFFF\n * \\param duration_ms The duration of the rumble effect, in milliseconds\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RumbleJoystick\n */"
    },
    "SDL_RunHapticEffect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "effect",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "iterations",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1151,
        "column": 29
      },
      "comment": "/**\n * Run the haptic effect on its associated haptic device.\n *\n * To repeat the effect over and over indefinitely, set \u0060iterations\u0060 to\n * \u0060SDL_HAPTIC_INFINITY\u0060. (Repeats the envelope - attack and fade.) To make\n * one instance of the effect last indefinitely (so the effect does not fade),\n * set the effect\u0027s \u0060length\u0060 in its structure/union to \u0060SDL_HAPTIC_INFINITY\u0060\n * instead.\n *\n * \\param haptic the SDL_Haptic device to run the effect on\n * \\param effect the ID of the haptic effect to run\n * \\param iterations the number of iterations to run the effect; use\n *                   \u0060SDL_HAPTIC_INFINITY\u0060 to repeat forever\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetHapticEffectStatus\n * \\sa SDL_StopHapticEffect\n * \\sa SDL_StopHapticEffects\n */"
    },
    "SDL_SaveBMP": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "file",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 399,
        "column": 29
      },
      "comment": "/**\n * Save a surface to a file.\n *\n * Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the\n * BMP directly. Other RGB formats with 8-bit or higher get converted to a\n * 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit\n * surface before they are saved. YUV and paletted 1-bit and 4-bit formats are\n * not supported.\n *\n * \\param surface the SDL_Surface structure containing the image to be saved\n * \\param file a file to save to\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LoadBMP\n * \\sa SDL_SaveBMP_IO\n */"
    },
    "SDL_SaveBMP_IO": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "SDL_IOStream *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_IOStream",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_iostream.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_iostream.h",
                "line": 112,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "closeio",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 378,
        "column": 29
      },
      "comment": "/**\n * Save a surface to a seekable SDL data stream in BMP format.\n *\n * Surfaces with a 24-bit, 32-bit and paletted 8-bit format get saved in the\n * BMP directly. Other RGB formats with 8-bit or higher get converted to a\n * 24-bit surface or, if they have an alpha mask or a colorkey, to a 32-bit\n * surface before they are saved. YUV and paletted 1-bit and 4-bit formats are\n * not supported.\n *\n * \\param surface the SDL_Surface structure containing the image to be saved\n * \\param dst a data stream to save to\n * \\param closeio if SDL_TRUE, calls SDL_CloseIO() on \u0060dst\u0060 before returning,\n *                even in the case of an error\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LoadBMP_IO\n * \\sa SDL_SaveBMP\n */"
    },
    "SDL_scalbn": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "n",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1191,
        "column": 32
      }
    },
    "SDL_scalbnf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "n",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1192,
        "column": 31
      }
    },
    "SDL_ScreenKeyboardShown": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 393,
        "column": 34
      },
      "comment": "/**\n * Check whether the screen keyboard is shown for given window.\n *\n * \\param window the window for which screen keyboard should be queried\n * \\returns SDL_TRUE if screen keyboard is shown or SDL_FALSE if not.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HasScreenKeyboardSupport\n */"
    },
    "SDL_ScreenSaverEnabled": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2148,
        "column": 34
      },
      "comment": "/**\n * Check whether the screensaver is currently enabled.\n *\n * The screensaver is disabled by default since SDL 2.0.2. Before SDL 2.0.2\n * the screensaver was enabled by default.\n *\n * The default can also be changed using \u0060SDL_HINT_VIDEO_ALLOW_SCREENSAVER\u0060.\n *\n * \\returns SDL_TRUE if the screensaver is enabled, SDL_FALSE if it is\n *          disabled.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_DisableScreenSaver\n * \\sa SDL_EnableScreenSaver\n */"
    },
    "SDL_SendGamepadEffect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "data",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "size",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1343,
        "column": 29
      },
      "comment": "/**\n * Send a gamepad specific effect packet\n *\n * \\param gamepad The gamepad to affect\n * \\param data The data to send to the gamepad\n * \\param size The size of the data to send to the gamepad\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SendJoystickEffect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "data",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "size",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 1071,
        "column": 29
      },
      "comment": "/**\n * Send a joystick specific effect packet\n *\n * \\param joystick The joystick to affect\n * \\param data The data to send to the joystick\n * \\param size The size of the data to send to the joystick\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetAssertionHandler": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "handler",
          "type": {
            "name": "SDL_AssertionHandler",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_assert.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
              "line": 230,
              "column": 35
            },
            "inner_type": {
              "name": "SDL_AssertState (const SDL_AssertData *, void *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_assert.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
            "line": 230,
            "column": 35
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_assert.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
        "line": 254,
        "column": 30
      },
      "comment": "/**\n * Set an application-defined assertion handler.\n *\n * This function allows an application to show its own assertion UI and/or\n * force the response to an assertion failure. If the application doesn\u0027t\n * provide this, SDL will try to do the right thing, popping up a\n * system-specific GUI dialog, and probably minimizing any fullscreen windows.\n *\n * This callback may fire from any thread, but it runs wrapped in a mutex, so\n * it will only fire from one thread at a time.\n *\n * This callback is NOT reset to SDL\u0027s internal handler upon SDL_Quit()!\n *\n * \\param handler the SDL_AssertionHandler function to call when an assertion\n *                fails or NULL for the default handler\n * \\param userdata a pointer that is passed to \u0060handler\u0060\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetAssertionHandler\n */"
    },
    "SDL_SetBooleanProperty": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "value",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 259,
        "column": 29
      },
      "comment": "/**\n * Set a boolean property on a set of properties\n *\n * \\param props the properties to modify\n * \\param name the name of the property to modify\n * \\param value the new value of the property\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetBooleanProperty\n */"
    },
    "SDL_SetClipboardData": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "callback",
          "type": {
            "name": "SDL_ClipboardDataCallback",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_clipboard.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
              "line": 153,
              "column": 31
            },
            "inner_type": {
              "name": "const void *(void *, const char *, size_t *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_clipboard.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
            "line": 153,
            "column": 31
          }
        },
        {
          "name": "cleanup",
          "type": {
            "name": "SDL_ClipboardCleanupCallback",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_clipboard.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
              "line": 164,
              "column": 24
            },
            "inner_type": {
              "name": "void (void *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_clipboard.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
            "line": 164,
            "column": 24
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "mime_types",
          "type": {
            "name": "const char **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "const char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "num_mime_types",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_clipboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
        "line": 194,
        "column": 29
      },
      "comment": "/**\n * Offer clipboard data to the OS\n *\n * Tell the operating system that the application is offering clipboard data\n * for each of the proivded mime-types. Once another application requests the\n * data the callback function will be called allowing it to generate and\n * respond with the data for the requested mime-type.\n *\n * The size of text data does not include any terminator, and the text does\n * not need to be null terminated (e.g. you can directly copy a portion of a\n * document)\n *\n * \\param callback A function pointer to the function that provides the\n *                 clipboard data\n * \\param cleanup A function pointer to the function that cleans up the\n *                clipboard data\n * \\param userdata An opaque pointer that will be forwarded to the callbacks\n * \\param mime_types A list of mime-types that are being offered\n * \\param num_mime_types The number of mime-types in the mime_types list\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ClearClipboardData\n * \\sa SDL_GetClipboardData\n * \\sa SDL_HasClipboardData\n */"
    },
    "SDL_SetClipboardText": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "text",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_clipboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
        "line": 53,
        "column": 29
      },
      "comment": "/**\n * Put UTF-8 text into the clipboard.\n *\n * \\param text the text to store in the clipboard\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetClipboardText\n * \\sa SDL_HasClipboardText\n */"
    },
    "SDL_SetCursor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "cursor",
          "type": {
            "name": "SDL_Cursor *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Cursor",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mouse.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
                "line": 43,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 426,
        "column": 29
      },
      "comment": "/**\n * Set the active cursor.\n *\n * This function sets the currently active cursor to the specified one. If the\n * cursor is currently visible, the change will be immediately represented on\n * the display. SDL_SetCursor(NULL) can be used to force cursor redraw, if\n * this is desired for any reason.\n *\n * \\param cursor a cursor to make active\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetCursor\n */"
    },
    "SDL_setenv": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "value",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "overwrite",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 506,
        "column": 29
      }
    },
    "SDL_SetError": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "fmt",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_error.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_error.h",
        "line": 66,
        "column": 29
      },
      "comment": "/**\n * Set the SDL error message for the current thread.\n *\n * Calling this function will replace any previous error message that was set.\n *\n * This function always returns -1, since SDL frequently uses -1 to signify an\n * failing result, leading to this idiom:\n *\n * \u0060\u0060\u0060c\n * if (error_code) {\n *     return SDL_SetError(\u0022This operation has failed: %d\u0022, error_code);\n * }\n * \u0060\u0060\u0060\n *\n * \\param fmt a printf()-style message format string\n * \\param ... additional parameters matching % tokens in the \u0060fmt\u0060 string, if\n *            any\n * \\returns always -1.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ClearError\n * \\sa SDL_GetError\n */"
    },
    "SDL_SetEventEnabled": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "type",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        },
        {
          "name": "enabled",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 1236,
        "column": 30
      },
      "comment": "/**\n * Set the state of processing events by type.\n *\n * \\param type the type of event; see SDL_EventType for details\n * \\param enabled whether to process the event or not\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_IsEventEnabled\n */"
    },
    "SDL_SetEventFilter": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "filter",
          "type": {
            "name": "SDL_EventFilter",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 1100,
              "column": 23
            },
            "inner_type": {
              "name": "int (void *, SDL_Event *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 1100,
            "column": 23
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 1144,
        "column": 30
      },
      "comment": "/**\n * Set up a filter to process all events before they change internal state and\n * are posted to the internal event queue.\n *\n * If the filter function returns 1 when called, then the event will be added\n * to the internal queue. If it returns 0, then the event will be dropped from\n * the queue, but the internal state will still be updated. This allows\n * selective filtering of dynamically arriving events.\n *\n * **WARNING**: Be very careful of what you do in the event filter function,\n * as it may run in a different thread!\n *\n * On platforms that support it, if the quit event is generated by an\n * interrupt signal (e.g. pressing Ctrl-C), it will be delivered to the\n * application at the next event poll.\n *\n * There is one caveat when dealing with the ::SDL_QuitEvent event type. The\n * event filter is only called when the window manager desires to close the\n * application window. If the event filter returns 1, then the window will be\n * closed, otherwise the window will remain open if possible.\n *\n * Note: Disabled events never make it to the event filter function; see\n * SDL_SetEventEnabled().\n *\n * Note: If you just want to inspect events without filtering, you should use\n * SDL_AddEventWatch() instead.\n *\n * Note: Events pushed onto the queue with SDL_PushEvent() get passed through\n * the event filter, but events pushed onto the queue with SDL_PeepEvents() do\n * not.\n *\n * \\param filter An SDL_EventFilter function to call when an event happens\n * \\param userdata a pointer that is passed to \u0060filter\u0060\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AddEventWatch\n * \\sa SDL_SetEventEnabled\n * \\sa SDL_GetEventFilter\n * \\sa SDL_PeepEvents\n * \\sa SDL_PushEvent\n */"
    },
    "SDL_SetFloatProperty": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "value",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 242,
        "column": 29
      },
      "comment": "/**\n * Set a floating point property on a set of properties\n *\n * \\param props the properties to modify\n * \\param name the name of the property to modify\n * \\param value the new value of the property\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetFloatProperty\n */"
    },
    "SDL_SetGamepadEventsEnabled": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "enabled",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 900,
        "column": 30
      },
      "comment": "/**\n * Set the state of gamepad event processing.\n *\n * If gamepad events are disabled, you must call SDL_UpdateGamepads() yourself\n * and check the state of the gamepad when you want gamepad information.\n *\n * \\param enabled whether to process gamepad events or not\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GamepadEventsEnabled\n * \\sa SDL_UpdateGamepads\n */"
    },
    "SDL_SetGamepadLED": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "red",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "green",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "blue",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1330,
        "column": 29
      },
      "comment": "/**\n * Update a gamepad\u0027s LED color.\n *\n * An example of a joystick LED is the light on the back of a PlayStation 4\u0027s\n * DualShock 4 controller.\n *\n * For gamepads with a single color LED, the maximum of the RGB values will be\n * used as the LED brightness.\n *\n * \\param gamepad The gamepad to update\n * \\param red The intensity of the red LED\n * \\param green The intensity of the green LED\n * \\param blue The intensity of the blue LED\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetGamepadMapping": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "instance_id",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 84,
            "column": 16
          }
        },
        {
          "name": "mapping",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 390,
        "column": 29
      },
      "comment": "/**\n * Set the current mapping of a joystick or gamepad.\n *\n * Details about mappings are discussed with SDL_AddGamepadMapping().\n *\n * \\param instance_id the joystick instance ID\n * \\param mapping the mapping to use for this device, or NULL to clear the\n *                mapping\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_AddGamepadMapping\n * \\sa SDL_GetGamepadMapping\n */"
    },
    "SDL_SetGamepadPlayerIndex": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "player_index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 763,
        "column": 29
      },
      "comment": "/**\n * Set the player index of an opened gamepad.\n *\n * \\param gamepad the gamepad object to adjust.\n * \\param player_index Player index to assign to this gamepad, or -1 to clear\n *                     the player index and turn off player LEDs.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetGamepadPlayerIndex\n */"
    },
    "SDL_SetGamepadSensorEnabled": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "gamepad",
          "type": {
            "name": "SDL_Gamepad *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Gamepad",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 59,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "type",
          "type": {
            "name": "SDL_SensorType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_sensor.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
              "line": 79,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_SensorType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_sensor.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
                "line": 69,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_sensor.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
            "line": 79,
            "column": 3
          }
        },
        {
          "name": "enabled",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 1220,
        "column": 29
      },
      "comment": "/**\n * Set whether data reporting for a gamepad sensor is enabled.\n *\n * \\param gamepad The gamepad to update\n * \\param type The type of sensor to enable/disable\n * \\param enabled Whether data reporting should be enabled\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GamepadHasSensor\n * \\sa SDL_GamepadSensorEnabled\n */"
    },
    "SDL_SetHapticAutocenter": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "autocenter",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1237,
        "column": 29
      },
      "comment": "/**\n * Set the global autocenter of the device.\n *\n * Autocenter should be between 0 and 100. Setting it to 0 will disable\n * autocentering.\n *\n * Device must support the SDL_HAPTIC_AUTOCENTER feature.\n *\n * \\param haptic the SDL_Haptic device to set autocentering on\n * \\param autocenter value to set autocenter to (0-100)\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetHapticFeatures\n */"
    },
    "SDL_SetHapticGain": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "gain",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1218,
        "column": 29
      },
      "comment": "/**\n * Set the global gain of the specified haptic device.\n *\n * Device must support the SDL_HAPTIC_GAIN feature.\n *\n * The user may specify the maximum gain by setting the environment variable\n * \u0060SDL_HAPTIC_GAIN_MAX\u0060 which should be between 0 and 100. All calls to\n * SDL_SetHapticGain() will scale linearly using \u0060SDL_HAPTIC_GAIN_MAX\u0060 as the\n * maximum.\n *\n * \\param haptic the SDL_Haptic device to set the gain on\n * \\param gain value to set the gain to, should be between 0 and 100 (0 - 100)\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetHapticFeatures\n */"
    },
    "SDL_SetHint": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "value",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2621,
        "column": 34
      },
      "comment": "/**\n * Set a hint with normal priority.\n *\n * Hints will not be set if there is an existing override hint or environment\n * variable that takes precedence. You can use SDL_SetHintWithPriority() to\n * set the hint with override priority instead.\n *\n * \\param name the hint to set\n * \\param value the value of the hint variable\n * \\returns SDL_TRUE if the hint was set, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetHint\n * \\sa SDL_ResetHint\n * \\sa SDL_SetHintWithPriority\n */"
    },
    "SDL_SetHintWithPriority": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "value",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "priority",
          "type": {
            "name": "SDL_HintPriority",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_hints.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
              "line": 2579,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_HintPriority",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_hints.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
                "line": 2574,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_hints.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
            "line": 2579,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2600,
        "column": 34
      },
      "comment": "/**\n * Set a hint with a specific priority.\n *\n * The priority controls the behavior when setting a hint that already has a\n * value. Hints will replace existing hints of their priority and lower.\n * Environment variables are considered to have override priority.\n *\n * \\param name the hint to set\n * \\param value the value of the hint variable\n * \\param priority the SDL_HintPriority level for the hint\n * \\returns SDL_TRUE if the hint was set, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetHint\n * \\sa SDL_ResetHint\n * \\sa SDL_SetHint\n */"
    },
    "SDL_SetJoystickEventsEnabled": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "enabled",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 847,
        "column": 30
      },
      "comment": "/**\n * Set the state of joystick event processing.\n *\n * If joystick events are disabled, you must call SDL_UpdateJoysticks()\n * yourself and check the state of the joystick when you want joystick\n * information.\n *\n * \\param enabled whether to process joystick events or not\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_JoystickEventsEnabled\n * \\sa SDL_UpdateJoysticks\n */"
    },
    "SDL_SetJoystickLED": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "red",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "green",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "blue",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 1058,
        "column": 29
      },
      "comment": "/**\n * Update a joystick\u0027s LED color.\n *\n * An example of a joystick LED is the light on the back of a PlayStation 4\u0027s\n * DualShock 4 controller.\n *\n * For joysticks with a single color LED, the maximum of the RGB values will\n * be used as the LED brightness.\n *\n * \\param joystick The joystick to update\n * \\param red The intensity of the red LED\n * \\param green The intensity of the green LED\n * \\param blue The intensity of the blue LED\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetJoystickPlayerIndex": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "player_index",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 584,
        "column": 29
      },
      "comment": "/**\n * Set the player index of an opened joystick.\n *\n * \\param joystick the SDL_Joystick obtained from SDL_OpenJoystick()\n * \\param player_index Player index to assign to this joystick, or -1 to clear\n *                     the player index and turn off player LEDs.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetJoystickPlayerIndex\n */"
    },
    "SDL_SetJoystickVirtualAxis": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "axis",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "value",
          "type": {
            "name": "Sint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 156,
              "column": 17
            },
            "inner_type": {
              "name": "int16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_int16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 156,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 457,
        "column": 29
      },
      "comment": "/**\n * Set values on an opened, virtual-joystick\u0027s axis.\n *\n * Please note that values set here will not be applied until the next call to\n * SDL_UpdateJoysticks, which can either be called directly, or can be called\n * indirectly through various other SDL APIs, including, but not limited to\n * the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,\n * SDL_WaitEvent.\n *\n * Note that when sending trigger axes, you should scale the value to the full\n * range of Sint16. For example, a trigger at rest would have the value of\n * \u0060SDL_JOYSTICK_AXIS_MIN\u0060.\n *\n * \\param joystick the virtual joystick on which to set state.\n * \\param axis the specific axis on the virtual joystick to set.\n * \\param value the new value for the specified axis.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetJoystickVirtualButton": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "button",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "value",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 476,
        "column": 29
      },
      "comment": "/**\n * Set values on an opened, virtual-joystick\u0027s button.\n *\n * Please note that values set here will not be applied until the next call to\n * SDL_UpdateJoysticks, which can either be called directly, or can be called\n * indirectly through various other SDL APIs, including, but not limited to\n * the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,\n * SDL_WaitEvent.\n *\n * \\param joystick the virtual joystick on which to set state.\n * \\param button the specific button on the virtual joystick to set.\n * \\param value the new value for the specified button.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetJoystickVirtualHat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "joystick",
          "type": {
            "name": "SDL_Joystick *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Joystick",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 71,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "hat",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "value",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 495,
        "column": 29
      },
      "comment": "/**\n * Set values on an opened, virtual-joystick\u0027s hat.\n *\n * Please note that values set here will not be applied until the next call to\n * SDL_UpdateJoysticks, which can either be called directly, or can be called\n * indirectly through various other SDL APIs, including, but not limited to\n * the following: SDL_PollEvent, SDL_PumpEvents, SDL_WaitEventTimeout,\n * SDL_WaitEvent.\n *\n * \\param joystick the virtual joystick on which to set state.\n * \\param hat the specific hat on the virtual joystick to set.\n * \\param value the new value for the specified hat.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetLogOutputFunction": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "callback",
          "type": {
            "name": "SDL_LogOutputFunction",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_log.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
              "line": 368,
              "column": 24
            },
            "inner_type": {
              "name": "void (void *, int, SDL_LogPriority, const char *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_log.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
            "line": 368,
            "column": 24
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 394,
        "column": 30
      },
      "comment": "/**\n * Replace the default log output function with one of your own.\n *\n * \\param callback an SDL_LogOutputFunction to call instead of the default\n * \\param userdata a pointer that is passed to \u0060callback\u0060\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetLogOutputFunction\n */"
    },
    "SDL_SetMemoryFunctions": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "malloc_func",
          "type": {
            "name": "SDL_malloc_func",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 414,
              "column": 25
            },
            "inner_type": {
              "name": "void *(size_t)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 414,
            "column": 25
          }
        },
        {
          "name": "calloc_func",
          "type": {
            "name": "SDL_calloc_func",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 415,
              "column": 25
            },
            "inner_type": {
              "name": "void *(size_t, size_t)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 415,
            "column": 25
          }
        },
        {
          "name": "realloc_func",
          "type": {
            "name": "SDL_realloc_func",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 416,
              "column": 25
            },
            "inner_type": {
              "name": "void *(void *, size_t)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 416,
            "column": 25
          }
        },
        {
          "name": "free_func",
          "type": {
            "name": "SDL_free_func",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 417,
              "column": 24
            },
            "inner_type": {
              "name": "void (void *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 417,
            "column": 24
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 461,
        "column": 29
      },
      "comment": "/**\n * Replace SDL\u0027s memory allocation functions with a custom set\n *\n * \\param malloc_func custom malloc function\n * \\param calloc_func custom calloc function\n * \\param realloc_func custom realloc function\n * \\param free_func custom free function\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetModState": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "modstate",
          "type": {
            "name": "SDL_Keymod",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_keycode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keycode.h",
              "line": 354,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_Keymod",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_keycode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keycode.h",
                "line": 332,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_keycode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keycode.h",
            "line": 354,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 186,
        "column": 30
      },
      "comment": "/**\n * Set the current key modifier state for the keyboard.\n *\n * The inverse of SDL_GetModState(), SDL_SetModState() allows you to impose\n * modifier key states on your application. Simply pass your desired modifier\n * states into \u0060modstate\u0060. This value may be a bitwise, OR\u0027d combination of\n * SDL_Keymod values.\n *\n * This does not change the keyboard state, only the key modifier flags that\n * SDL reports.\n *\n * \\param modstate the desired SDL_Keymod for the keyboard\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetModState\n */"
    },
    "SDL_SetNumberProperty": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "value",
          "type": {
            "name": "Sint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 181,
              "column": 17
            },
            "inner_type": {
              "name": "int64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_int64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 181,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 225,
        "column": 29
      },
      "comment": "/**\n * Set an integer property on a set of properties\n *\n * \\param props the properties to modify\n * \\param name the name of the property to modify\n * \\param value the new value of the property\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetNumberProperty\n */"
    },
    "SDL_SetPaletteColors": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "palette",
          "type": {
            "name": "SDL_Palette *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Palette",
              "kind": "typeAlias",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 695,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Palette",
                "kind": "struct",
                "size_of": 24,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 689,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "colors",
          "type": {
            "name": "const SDL_Color *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Color",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 1,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 673,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Color",
                "kind": "struct",
                "size_of": 4,
                "align_of": 1,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 667,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "firstcolor",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "ncolors",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 853,
        "column": 29
      },
      "comment": "/**\n * Set a range of colors in a palette.\n *\n * \\param palette the SDL_Palette structure to modify\n * \\param colors an array of SDL_Color structures to copy into the palette\n * \\param firstcolor the index of the first palette entry to modify\n * \\param ncolors the number of entries to modify\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetPixelFormatPalette": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "format",
          "type": {
            "name": "SDL_PixelFormat *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_PixelFormat",
              "kind": "typeAlias",
              "size_of": 56,
              "align_of": 8,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 721,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_PixelFormat",
                "kind": "struct",
                "size_of": 56,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 700,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "palette",
          "type": {
            "name": "SDL_Palette *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Palette",
              "kind": "typeAlias",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 695,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Palette",
                "kind": "struct",
                "size_of": 24,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 689,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 838,
        "column": 29
      },
      "comment": "/**\n * Set the palette for a pixel format structure.\n *\n * \\param format the SDL_PixelFormat structure that will use the palette\n * \\param palette the SDL_Palette structure that will be used\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetPrimarySelectionText": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "text",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_clipboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
        "line": 97,
        "column": 29
      },
      "comment": "/**\n * Put UTF-8 text into the primary selection.\n *\n * \\param text the text to store in the primary selection\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetPrimarySelectionText\n * \\sa SDL_HasPrimarySelectionText\n */"
    },
    "SDL_SetProperty": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "value",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 188,
        "column": 29
      },
      "comment": "/**\n * Set a property on a set of properties\n *\n * \\param props the properties to modify\n * \\param name the name of the property to modify\n * \\param value the new value of the property, or NULL to delete the property\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetProperty\n * \\sa SDL_HasProperty\n * \\sa SDL_SetBooleanProperty\n * \\sa SDL_SetFloatProperty\n * \\sa SDL_SetNumberProperty\n * \\sa SDL_SetPropertyWithCleanup\n * \\sa SDL_SetStringProperty\n */"
    },
    "SDL_SetPropertyWithCleanup": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "value",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "cleanup",
          "type": {
            "name": "void (void *, void *)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 165,
        "column": 29
      },
      "comment": "/**\n * Set a property on a set of properties with a cleanup function that is\n * called when the property is deleted\n *\n * The cleanup function is also called if setting the property fails for any\n * reason.\n *\n * \\param props the properties to modify\n * \\param name the name of the property to modify\n * \\param value the new value of the property, or NULL to delete the property\n * \\param cleanup the function to call when this property is deleted, or NULL\n *                if no cleanup is necessary\n * \\param userdata a pointer that is passed to the cleanup function\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetProperty\n * \\sa SDL_SetProperty\n */"
    },
    "SDL_SetRelativeMouseMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "enabled",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 271,
        "column": 29
      },
      "comment": "/**\n * Set relative mouse mode.\n *\n * While the mouse is in relative mode, the cursor is hidden, the mouse\n * position is constrained to the window, and SDL will report continuous\n * relative mouse motion even if the mouse is at the edge of the window.\n *\n * This function will flush any pending mouse motion.\n *\n * \\param enabled SDL_TRUE to enable relative mode, SDL_FALSE to disable.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRelativeMouseMode\n */"
    },
    "SDL_SetRenderClipRect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1440,
        "column": 29
      },
      "comment": "/**\n * Set the clip rectangle for rendering on the specified target.\n *\n * \\param renderer the rendering context\n * \\param rect an SDL_Rect structure representing the clip area, relative to\n *             the viewport, or NULL to disable clipping\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderClipRect\n * \\sa SDL_RenderClipEnabled\n */"
    },
    "SDL_SetRenderColorScale": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "scale",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1620,
        "column": 29
      },
      "comment": "/**\n * Set the color scale used for render operations.\n *\n * The color scale is an additional scale multiplied into the pixel color\n * value while rendering. This can be used to adjust the brightness of colors\n * during HDR rendering, or changing HDR video brightness when playing on an\n * SDR display.\n *\n * The color scale does not affect the alpha channel, only the color\n * brightness.\n *\n * \\param renderer the rendering context\n * \\param scale the color scale value\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderColorScale\n */"
    },
    "SDL_SetRenderDrawBlendMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "blendMode",
          "type": {
            "name": "SDL_BlendMode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_blendmode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
              "line": 60,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_BlendMode",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_blendmode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
                "line": 40,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_blendmode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
            "line": 60,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1650,
        "column": 29
      },
      "comment": "/**\n * Set the blend mode used for drawing operations (Fill and Line).\n *\n * If the blend mode is not supported, the closest supported mode is chosen.\n *\n * \\param renderer the rendering context\n * \\param blendMode the SDL_BlendMode to use for blending\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderDrawBlendMode\n */"
    },
    "SDL_SetRenderDrawColor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "r",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "g",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "b",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "a",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1531,
        "column": 29
      },
      "comment": "/**\n * Set the color used for drawing operations.\n *\n * Set the color for drawing or filling rectangles, lines, and points, and for\n * SDL_RenderClear().\n *\n * \\param renderer the rendering context\n * \\param r the red value used to draw on the rendering target\n * \\param g the green value used to draw on the rendering target\n * \\param b the blue value used to draw on the rendering target\n * \\param a the alpha value used to draw on the rendering target; usually\n *          \u0060SDL_ALPHA_OPAQUE\u0060 (255). Use SDL_SetRenderDrawBlendMode to\n *          specify how the alpha channel is used\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderDrawColor\n * \\sa SDL_SetRenderDrawColorFloat\n */"
    },
    "SDL_SetRenderDrawColorFloat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "r",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "g",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "b",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "a",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1554,
        "column": 29
      },
      "comment": "/**\n * Set the color used for drawing operations (Rect, Line and Clear).\n *\n * Set the color for drawing or filling rectangles, lines, and points, and for\n * SDL_RenderClear().\n *\n * \\param renderer the rendering context\n * \\param r the red value used to draw on the rendering target\n * \\param g the green value used to draw on the rendering target\n * \\param b the blue value used to draw on the rendering target\n * \\param a the alpha value used to draw on the rendering target. Use\n *          SDL_SetRenderDrawBlendMode to specify how the alpha channel is\n *          used\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderDrawColorFloat\n * \\sa SDL_SetRenderDrawColor\n */"
    },
    "SDL_SetRenderLogicalPresentation": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "mode",
          "type": {
            "name": "SDL_RendererLogicalPresentation",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_render.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
              "line": 118,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_RendererLogicalPresentation",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 111,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 118,
            "column": 3
          }
        },
        {
          "name": "scale_mode",
          "type": {
            "name": "SDL_ScaleMode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 76,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_ScaleMode",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 71,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 76,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1298,
        "column": 29
      },
      "comment": "/**\n * Set a device independent resolution and presentation mode for rendering.\n *\n * This function sets the width and height of the logical rendering output. A\n * render target is created at the specified size and used for rendering and\n * then copied to the output during presentation.\n *\n * You can disable logical coordinates by setting the mode to\n * SDL_LOGICAL_PRESENTATION_DISABLED, and in that case you get the full pixel\n * resolution of the output window.\n *\n * You can convert coordinates in an event into rendering coordinates using\n * SDL_ConvertEventToRenderCoordinates().\n *\n * \\param renderer the rendering context\n * \\param w the width of the logical resolution\n * \\param h the height of the logical resolution\n * \\param mode the presentation mode used\n * \\param scale_mode the scale mode used\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ConvertEventToRenderCoordinates\n * \\sa SDL_GetRenderLogicalPresentation\n */"
    },
    "SDL_SetRenderScale": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "scaleX",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "scaleY",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1493,
        "column": 29
      },
      "comment": "/**\n * Set the drawing scale for rendering on the current target.\n *\n * The drawing coordinates are scaled by the x/y scaling factors before they\n * are used by the renderer. This allows resolution independent drawing with a\n * single coordinate system.\n *\n * If this results in scaling or subpixel drawing by the rendering backend, it\n * will be handled using the appropriate quality hints. For best results use\n * integer scaling factors.\n *\n * \\param renderer the rendering context\n * \\param scaleX the horizontal scaling factor\n * \\param scaleY the vertical scaling factor\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderScale\n */"
    },
    "SDL_SetRenderTarget": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1254,
        "column": 29
      },
      "comment": "/**\n * Set a texture as the current rendering target.\n *\n * The default render target is the window for which the renderer was created.\n * To stop rendering to a texture and render to the window again, call this\n * function with a NULL \u0060texture\u0060.\n *\n * \\param renderer the rendering context\n * \\param texture the targeted texture, which must be created with the\n *                \u0060SDL_TEXTUREACCESS_TARGET\u0060 flag, or NULL to render to the\n *                window instead of a texture.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderTarget\n */"
    },
    "SDL_SetRenderViewport": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1391,
        "column": 29
      },
      "comment": "/**\n * Set the drawing area for rendering on the current target.\n *\n * \\param renderer the rendering context\n * \\param rect the SDL_Rect structure representing the drawing area, or NULL\n *             to set the viewport to the entire target\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderViewport\n * \\sa SDL_RenderViewportSet\n */"
    },
    "SDL_SetRenderVSync": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "renderer",
          "type": {
            "name": "SDL_Renderer *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Renderer",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 123,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "vsync",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 2143,
        "column": 29
      },
      "comment": "/**\n * Toggle VSync of the given renderer.\n *\n * \\param renderer The renderer to toggle\n * \\param vsync 1 for on, 0 for off. All other values are reserved\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetRenderVSync\n */"
    },
    "SDL_SetStringProperty": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "value",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 208,
        "column": 29
      },
      "comment": "/**\n * Set a string property on a set of properties\n *\n * This function makes a copy of the string; the caller does not have to\n * preserve the data after this call completes.\n *\n * \\param props the properties to modify\n * \\param name the name of the property to modify\n * \\param value the new value of the property, or NULL to delete the property\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetStringProperty\n */"
    },
    "SDL_SetSurfaceAlphaMod": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "alpha",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 554,
        "column": 29
      },
      "comment": "/**\n * Set an additional alpha value used in blit operations.\n *\n * When this surface is blitted, during the blit operation the source alpha\n * value is modulated by this alpha value according to the following formula:\n *\n * \u0060srcA = srcA * (alpha / 255)\u0060\n *\n * \\param surface the SDL_Surface structure to update\n * \\param alpha the alpha value multiplied into blit operations\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetSurfaceAlphaMod\n * \\sa SDL_SetSurfaceColorMod\n */"
    },
    "SDL_SetSurfaceBlendMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "blendMode",
          "type": {
            "name": "SDL_BlendMode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_blendmode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
              "line": 60,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_BlendMode",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_blendmode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
                "line": 40,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_blendmode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
            "line": 60,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 587,
        "column": 29
      },
      "comment": "/**\n * Set the blend mode used for blit operations.\n *\n * To copy a surface to another surface (or texture) without blending with the\n * existing data, the blendmode of the SOURCE surface should be set to\n * \u0060SDL_BLENDMODE_NONE\u0060.\n *\n * \\param surface the SDL_Surface structure to update\n * \\param blendMode the SDL_BlendMode to use for blit blending\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetSurfaceBlendMode\n */"
    },
    "SDL_SetSurfaceClipRect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 622,
        "column": 34
      },
      "comment": "/**\n * Set the clipping rectangle for a surface.\n *\n * When \u0060surface\u0060 is the destination of a blit, only the area within the clip\n * rectangle is drawn into.\n *\n * Note that blits are automatically clipped to the edges of the source and\n * destination surfaces.\n *\n * \\param surface the SDL_Surface structure to be clipped\n * \\param rect the SDL_Rect structure representing the clipping rectangle, or\n *             NULL to disable clipping\n * \\returns SDL_TRUE if the rectangle intersects the surface, otherwise\n *          SDL_FALSE and blits will be completely clipped.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetSurfaceClipRect\n */"
    },
    "SDL_SetSurfaceColorKey": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "flag",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "key",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 458,
        "column": 29
      },
      "comment": "/**\n * Set the color key (transparent pixel) in a surface.\n *\n * The color key defines a pixel value that will be treated as transparent in\n * a blit. For example, one can use this to specify that cyan pixels should be\n * considered transparent, and therefore not rendered.\n *\n * It is a pixel of the format used by the surface, as generated by\n * SDL_MapRGB().\n *\n * RLE acceleration can substantially speed up blitting of images with large\n * horizontal runs of transparent pixels. See SDL_SetSurfaceRLE() for details.\n *\n * \\param surface the SDL_Surface structure to update\n * \\param flag SDL_TRUE to enable color key, SDL_FALSE to disable color key\n * \\param key the transparent pixel\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetSurfaceColorKey\n * \\sa SDL_SurfaceHasColorKey\n */"
    },
    "SDL_SetSurfaceColorMod": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "r",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "g",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "b",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 516,
        "column": 29
      },
      "comment": "/**\n * Set an additional color value multiplied into blit operations.\n *\n * When this surface is blitted, during the blit operation each source color\n * channel is modulated by the appropriate color value according to the\n * following formula:\n *\n * \u0060srcC = srcC * (color / 255)\u0060\n *\n * \\param surface the SDL_Surface structure to update\n * \\param r the red color value multiplied into blit operations\n * \\param g the green color value multiplied into blit operations\n * \\param b the blue color value multiplied into blit operations\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetSurfaceColorMod\n * \\sa SDL_SetSurfaceAlphaMod\n */"
    },
    "SDL_SetSurfaceColorspace": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "colorspace",
          "type": {
            "name": "SDL_Colorspace",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 660,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_Colorspace",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 567,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 660,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 252,
        "column": 29
      },
      "comment": "/**\n * Set the colorspace used by a surface.\n *\n * Setting the colorspace doesn\u0027t change the pixels, only how they are\n * interpreted in color operations.\n *\n * \\param surface the SDL_Surface structure to update\n * \\param colorspace an SDL_ColorSpace value describing the surface colorspace\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetSurfacePalette": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "palette",
          "type": {
            "name": "SDL_Palette *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Palette",
              "kind": "typeAlias",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 695,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Palette",
                "kind": "struct",
                "size_of": 24,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 689,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 283,
        "column": 29
      },
      "comment": "/**\n * Set the palette used by a surface.\n *\n * A single palette can be shared with many surfaces.\n *\n * \\param surface the SDL_Surface structure to update\n * \\param palette the SDL_Palette structure to use\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetSurfaceRLE": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "flag",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 418,
        "column": 29
      },
      "comment": "/**\n * Set the RLE acceleration hint for a surface.\n *\n * If RLE is enabled, color key and alpha blending blits are much faster, but\n * the surface must be locked before directly accessing the pixels.\n *\n * \\param surface the SDL_Surface structure to optimize\n * \\param flag 0 to disable, non-zero to enable RLE acceleration\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_BlitSurface\n * \\sa SDL_LockSurface\n * \\sa SDL_UnlockSurface\n */"
    },
    "SDL_SetTextInputRect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "rect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 368,
        "column": 29
      },
      "comment": "/**\n * Set the rectangle used to type Unicode text inputs.\n *\n * Native input methods will place a window with word suggestions near it,\n * without covering the text being inputted.\n *\n * To start text input in a given location, this function is intended to be\n * called before SDL_StartTextInput, although some platforms support moving\n * the rectangle even while text input (and a composition) is active.\n *\n * Note: If you want to use the system native IME window, try setting hint\n * **SDL_HINT_IME_SHOW_UI** to **1**, otherwise this function won\u0027t give you\n * any feedback.\n *\n * \\param rect the SDL_Rect structure representing the rectangle to receive\n *             text (ignored if NULL)\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_StartTextInput\n */"
    },
    "SDL_SetTextureAlphaMod": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "alpha",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 933,
        "column": 29
      },
      "comment": "/**\n * Set an additional alpha value multiplied into render copy operations.\n *\n * When this texture is rendered, during the copy operation the source alpha\n * value is modulated by this alpha value according to the following formula:\n *\n * \u0060srcA = srcA * (alpha / 255)\u0060\n *\n * Alpha modulation is not always supported by the renderer; it will return -1\n * if alpha modulation is not supported.\n *\n * \\param texture the texture to update\n * \\param alpha the source alpha value multiplied into copy operations\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetTextureAlphaMod\n * \\sa SDL_SetTextureAlphaModFloat\n * \\sa SDL_SetTextureColorMod\n */"
    },
    "SDL_SetTextureAlphaModFloat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "alpha",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 957,
        "column": 29
      },
      "comment": "/**\n * Set an additional alpha value multiplied into render copy operations.\n *\n * When this texture is rendered, during the copy operation the source alpha\n * value is modulated by this alpha value according to the following formula:\n *\n * \u0060srcA = srcA * alpha\u0060\n *\n * Alpha modulation is not always supported by the renderer; it will return -1\n * if alpha modulation is not supported.\n *\n * \\param texture the texture to update\n * \\param alpha the source alpha value multiplied into copy operations\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetTextureAlphaModFloat\n * \\sa SDL_SetTextureAlphaMod\n * \\sa SDL_SetTextureColorModFloat\n */"
    },
    "SDL_SetTextureBlendMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "blendMode",
          "type": {
            "name": "SDL_BlendMode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_blendmode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
              "line": 60,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_BlendMode",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_blendmode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
                "line": 40,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_blendmode.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
            "line": 60,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1006,
        "column": 29
      },
      "comment": "/**\n * Set the blend mode for a texture, used by SDL_RenderTexture().\n *\n * If the blend mode is not supported, the closest supported mode is chosen\n * and this function returns -1.\n *\n * \\param texture the texture to update\n * \\param blendMode the SDL_BlendMode to use for texture blending\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetTextureBlendMode\n */"
    },
    "SDL_SetTextureColorMod": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "r",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "g",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        },
        {
          "name": "b",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 150,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 844,
        "column": 29
      },
      "comment": "/**\n * Set an additional color value multiplied into render copy operations.\n *\n * When this texture is rendered, during the copy operation each source color\n * channel is modulated by the appropriate color value according to the\n * following formula:\n *\n * \u0060srcC = srcC * (color / 255)\u0060\n *\n * Color modulation is not always supported by the renderer; it will return -1\n * if color modulation is not supported.\n *\n * \\param texture the texture to update\n * \\param r the red color value multiplied into copy operations\n * \\param g the green color value multiplied into copy operations\n * \\param b the blue color value multiplied into copy operations\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetTextureColorMod\n * \\sa SDL_SetTextureAlphaMod\n * \\sa SDL_SetTextureColorModFloat\n */"
    },
    "SDL_SetTextureColorModFloat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "r",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "g",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "b",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 872,
        "column": 29
      },
      "comment": "/**\n * Set an additional color value multiplied into render copy operations.\n *\n * When this texture is rendered, during the copy operation each source color\n * channel is modulated by the appropriate color value according to the\n * following formula:\n *\n * \u0060srcC = srcC * color\u0060\n *\n * Color modulation is not always supported by the renderer; it will return -1\n * if color modulation is not supported.\n *\n * \\param texture the texture to update\n * \\param r the red color value multiplied into copy operations\n * \\param g the green color value multiplied into copy operations\n * \\param b the blue color value multiplied into copy operations\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetTextureColorModFloat\n * \\sa SDL_SetTextureAlphaModFloat\n * \\sa SDL_SetTextureColorMod\n */"
    },
    "SDL_SetTextureScaleMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "scaleMode",
          "type": {
            "name": "SDL_ScaleMode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 76,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_ScaleMode",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 71,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 76,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1038,
        "column": 29
      },
      "comment": "/**\n * Set the scale mode used for texture scale operations.\n *\n * The default texture scale mode is SDL_SCALEMODE_LINEAR.\n *\n * If the scale mode is not supported, the closest supported mode is chosen.\n *\n * \\param texture The texture to update.\n * \\param scaleMode the SDL_ScaleMode to use for texture scaling.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetTextureScaleMode\n */"
    },
    "SDL_SetThreadPriority": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "priority",
          "type": {
            "name": "SDL_ThreadPriority",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_thread.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
              "line": 73,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_ThreadPriority",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_thread.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
                "line": 68,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_thread.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
            "line": 73,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 301,
        "column": 29
      },
      "comment": "/**\n * Set the priority for the current thread.\n *\n * Note that some platforms will not let you alter the priority (or at least,\n * promote the thread to a higher priority) at all, and some require you to be\n * an administrator account. Be prepared for this to fail.\n *\n * \\param priority the SDL_ThreadPriority to set\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetTLS": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "id",
          "type": {
            "name": "SDL_TLSID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_thread.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
              "line": 56,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_thread.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
            "line": 56,
            "column": 16
          }
        },
        {
          "name": "value",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "destructor",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 424,
        "column": 29
      },
      "comment": "/**\n * Set the current thread\u0027s value associated with a thread local storage ID.\n *\n * The function prototype for \u0060destructor\u0060 is:\n *\n * \u0060\u0060\u0060c\n * void destructor(void *value)\n * \u0060\u0060\u0060\n *\n * where its parameter \u0060value\u0060 is what was passed as \u0060value\u0060 to SDL_SetTLS().\n *\n * \\param id the thread local storage ID\n * \\param value the value to associate with the ID for the current thread\n * \\param destructor a function called when the thread exits, to free the\n *                   value\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetTLS\n */"
    },
    "SDL_SetWindowAlwaysOnTop": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "on_top",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1500,
        "column": 29
      },
      "comment": "/**\n * Set the window to always be above the others.\n *\n * This will add or remove the window\u0027s \u0060SDL_WINDOW_ALWAYS_ON_TOP\u0060 flag. This\n * will bring the window to the front and keep the window above the rest.\n *\n * \\param window The window of which to change the always on top state\n * \\param on_top SDL_TRUE to set the window always on top, SDL_FALSE to\n *               disable\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowFlags\n */"
    },
    "SDL_SetWindowBordered": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "bordered",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1462,
        "column": 29
      },
      "comment": "/**\n * Set the border state of a window.\n *\n * This will add or remove the window\u0027s \u0060SDL_WINDOW_BORDERLESS\u0060 flag and add\n * or remove the border from the actual window. This is a no-op if the\n * window\u0027s border already matches the requested state.\n *\n * You can\u0027t change the border state of a fullscreen window.\n *\n * \\param window the window of which to change the border state\n * \\param bordered SDL_FALSE to remove border, SDL_TRUE to add border\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowFlags\n */"
    },
    "SDL_SetWindowFocusable": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "focusable",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1975,
        "column": 29
      },
      "comment": "/**\n * Set whether the window may have input focus.\n *\n * \\param window the window to set focusable state\n * \\param focusable SDL_TRUE to allow input focus, SDL_FALSE to not allow\n *                  input focus\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetWindowFullscreen": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "fullscreen",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1648,
        "column": 29
      },
      "comment": "/**\n * Request that the window\u0027s fullscreen state be changed.\n *\n * By default a window in fullscreen state uses borderless fullscreen desktop\n * mode, but a specific exclusive display mode can be set using\n * SDL_SetWindowFullscreenMode().\n *\n * On some windowing systems this request is asynchronous and the new\n * fullscreen state may not have have been applied immediately upon the return\n * of this function. If an immediate change is required, call SDL_SyncWindow()\n * to block until the changes have taken effect.\n *\n * When the window state changes, an SDL_EVENT_WINDOW_ENTER_FULLSCREEN or\n * SDL_EVENT_WINDOW_LEAVE_FULLSCREEN event will be emitted. Note that, as this\n * is just a request, it can be denied by the windowing system.\n *\n * \\param window the window to change\n * \\param fullscreen SDL_TRUE for fullscreen mode, SDL_FALSE for windowed mode\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowFullscreenMode\n * \\sa SDL_SetWindowFullscreenMode\n * \\sa SDL_SyncWindow\n */"
    },
    "SDL_SetWindowFullscreenMode": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "mode",
          "type": {
            "name": "const SDL_DisplayMode *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_DisplayMode",
              "kind": "typeAlias",
              "size_of": 32,
              "align_of": 8,
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 91,
                "column": 3
              },
              "inner_type": {
                "name": "SDL_DisplayMode",
                "kind": "struct",
                "size_of": 32,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_video.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                  "line": 82,
                  "column": 9
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 661,
        "column": 29
      },
      "comment": "/**\n * Set the display mode to use when a window is visible and fullscreen.\n *\n * This only affects the display mode used when the window is fullscreen. To\n * change the window size when the window is not fullscreen, use\n * SDL_SetWindowSize().\n *\n * If the window is currently in the fullscreen state, this request is\n * asynchronous on some windowing systems and the new mode dimensions may not\n * be applied immediately upon the return of this function. If an immediate\n * change is required, call SDL_SyncWindow() to block until the changes have\n * taken effect.\n *\n * When the new mode takes effect, an SDL_EVENT_WINDOW_RESIZED and/or an\n * SDL_EVENT_WINDOOW_PIXEL_SIZE_CHANGED event will be emitted with the new\n * mode dimensions.\n *\n * \\param window the window to affect\n * \\param mode a pointer to the display mode to use, which can be NULL for\n *             borderless fullscreen desktop mode, or one of the fullscreen\n *             modes returned by SDL_GetFullscreenDisplayModes() to set an\n *             exclusive fullscreen mode.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowFullscreenMode\n * \\sa SDL_SetWindowFullscreen\n * \\sa SDL_SyncWindow\n */"
    },
    "SDL_SetWindowHitTest": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "callback",
          "type": {
            "name": "SDL_HitTest",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 2030,
              "column": 37
            },
            "inner_type": {
              "name": "SDL_HitTestResult (SDL_Window *, const SDL_Point *, void *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 2030,
            "column": 37
          }
        },
        {
          "name": "callback_data",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2074,
        "column": 29
      },
      "comment": "/**\n * Provide a callback that decides if a window region has special properties.\n *\n * Normally windows are dragged and resized by decorations provided by the\n * system window manager (a title bar, borders, etc), but for some apps, it\n * makes sense to drag them from somewhere else inside the window itself; for\n * example, one might have a borderless window that wants to be draggable from\n * any part, or simulate its own title bar, etc.\n *\n * This function lets the app provide a callback that designates pieces of a\n * given window as special. This callback is run during event processing if we\n * need to tell the OS to treat a region of the window specially; the use of\n * this callback is known as \u0022hit testing.\u0022\n *\n * Mouse input may not be delivered to your application if it is within a\n * special area; the OS will often apply that input to moving the window or\n * resizing the window and not deliver it to the application.\n *\n * Specifying NULL for a callback disables hit-testing. Hit-testing is\n * disabled by default.\n *\n * Platforms that don\u0027t support this functionality will return -1\n * unconditionally, even if you\u0027re attempting to disable hit-testing.\n *\n * Your callback may fire at any time, and its firing does not indicate any\n * specific behavior (for example, on Windows, this certainly might fire when\n * the OS is deciding whether to drag your window, but it fires for lots of\n * other reasons, too, some unrelated to anything you probably care about _and\n * when the mouse isn\u0027t actually at the location it is testing_). Since this\n * can fire at any time, you should try to keep your callback efficient,\n * devoid of allocations, etc.\n *\n * \\param window the window to set hit-testing on\n * \\param callback the function to call when doing a hit-test\n * \\param callback_data an app-defined void pointer passed to **callback**\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetWindowIcon": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "icon",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1199,
        "column": 29
      },
      "comment": "/**\n * Set the icon for a window.\n *\n * \\param window the window to change\n * \\param icon an SDL_Surface structure containing the icon for the window\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetWindowInputFocus": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1962,
        "column": 29
      },
      "comment": "/**\n * Explicitly set input focus to the window.\n *\n * You almost certainly want SDL_RaiseWindow() instead of this function. Use\n * this with caution, as you might give focus to a window that is completely\n * obscured by other windows.\n *\n * \\param window the window that should get the input focus\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RaiseWindow\n */"
    },
    "SDL_SetWindowKeyboardGrab": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "grabbed",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1808,
        "column": 29
      },
      "comment": "/**\n * Set a window\u0027s keyboard grab mode.\n *\n * Keyboard grab enables capture of system keyboard shortcuts like Alt\u002BTab or\n * the Meta/Super key. Note that not all system keyboard shortcuts can be\n * captured by applications (one example is Ctrl\u002BAlt\u002BDel on Windows).\n *\n * This is primarily intended for specialized applications such as VNC clients\n * or VM frontends. Normal games should not use keyboard grab.\n *\n * When keyboard grab is enabled, SDL will continue to handle Alt\u002BTab when the\n * window is full-screen to ensure the user is not trapped in your\n * application. If you have a custom keyboard shortcut to exit fullscreen\n * mode, you may suppress this behavior with\n * \u0060SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED\u0060.\n *\n * If the caller enables a grab while another window is currently grabbed, the\n * other window loses its grab in favor of the caller\u0027s window.\n *\n * \\param window The window for which the keyboard grab mode should be set.\n * \\param grabbed This is SDL_TRUE to grab keyboard, and SDL_FALSE to release.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowKeyboardGrab\n * \\sa SDL_SetWindowMouseGrab\n */"
    },
    "SDL_SetWindowMaximumSize": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "max_w",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "max_h",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1424,
        "column": 29
      },
      "comment": "/**\n * Set the maximum size of a window\u0027s client area.\n *\n * \\param window the window to change\n * \\param max_w the maximum width of the window, or 0 for no limit\n * \\param max_h the maximum height of the window, or 0 for no limit\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowMaximumSize\n * \\sa SDL_SetWindowMinimumSize\n */"
    },
    "SDL_SetWindowMinimumSize": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "min_w",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "min_h",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1390,
        "column": 29
      },
      "comment": "/**\n * Set the minimum size of a window\u0027s client area.\n *\n * \\param window the window to change\n * \\param min_w the minimum width of the window, or 0 for no limit\n * \\param min_h the minimum height of the window, or 0 for no limit\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowMinimumSize\n * \\sa SDL_SetWindowMaximumSize\n */"
    },
    "SDL_SetWindowModalFor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "modal_window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "parent_window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1945,
        "column": 29
      },
      "comment": "/**\n * Set the window as a modal for another window.\n *\n * \\param modal_window the window that should be set modal\n * \\param parent_window the parent window for the modal window\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetWindowMouseGrab": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "grabbed",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1825,
        "column": 29
      },
      "comment": "/**\n * Set a window\u0027s mouse grab mode.\n *\n * Mouse grab confines the mouse cursor to the window.\n *\n * \\param window The window for which the mouse grab mode should be set.\n * \\param grabbed This is SDL_TRUE to grab mouse, and SDL_FALSE to release.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowMouseGrab\n * \\sa SDL_SetWindowKeyboardGrab\n */"
    },
    "SDL_SetWindowMouseRect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1880,
        "column": 29
      },
      "comment": "/**\n * Confines the cursor to the specified area of a window.\n *\n * Note that this does NOT grab the cursor, it only defines the area a cursor\n * is restricted to when the window has mouse focus.\n *\n * \\param window The window that will be associated with the barrier.\n * \\param rect A rectangle area in window-relative coordinates. If NULL the\n *             barrier for the specified window will be destroyed.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowMouseRect\n * \\sa SDL_SetWindowMouseGrab\n */"
    },
    "SDL_SetWindowOpacity": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "opacity",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1912,
        "column": 29
      },
      "comment": "/**\n * Set the opacity for a window.\n *\n * The parameter \u0060opacity\u0060 will be clamped internally between 0.0f\n * (transparent) and 1.0f (opaque).\n *\n * This function also returns -1 if setting the opacity isn\u0027t supported.\n *\n * \\param window the window which will be made transparent or opaque\n * \\param opacity the opacity value (0.0f - transparent, 1.0f - opaque)\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowOpacity\n */"
    },
    "SDL_SetWindowPosition": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1239,
        "column": 29
      },
      "comment": "/**\n * Request that the window\u0027s position be set.\n *\n * If, at the time of this request, the window is in a fixed-size state such\n * as maximized, this request may be deferred until the window returns to a\n * resizable state.\n *\n * This can be used to reposition fullscreen-desktop windows onto a different\n * display, however, exclusive fullscreen windows are locked to a specific\n * display and can only be repositioned programmatically via\n * SDL_SetWindowFullscreenMode().\n *\n * On some windowing systems this request is asynchronous and the new\n * coordinates may not have have been applied immediately upon the return of\n * this function. If an immediate change is required, call SDL_SyncWindow() to\n * block until the changes have taken effect.\n *\n * When the window position changes, an SDL_EVENT_WINDOW_MOVED event will be\n * emitted with the window\u0027s new coordinates. Note that the new coordinates\n * may not match the exact coordinates requested, as some windowing systems\n * can restrict the position of the window in certain scenarios (e.g.\n * constraining the position so the window is always within desktop bounds).\n * Additionally, as this is just a request, it can be denied by the windowing\n * system.\n *\n * \\param window the window to reposition\n * \\param x the x coordinate of the window, or \u0060SDL_WINDOWPOS_CENTERED\u0060 or\n *          \u0060SDL_WINDOWPOS_UNDEFINED\u0060\n * \\param y the y coordinate of the window, or \u0060SDL_WINDOWPOS_CENTERED\u0060 or\n *          \u0060SDL_WINDOWPOS_UNDEFINED\u0060\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowPosition\n * \\sa SDL_SyncWindow\n */"
    },
    "SDL_SetWindowResizable": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "resizable",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1482,
        "column": 29
      },
      "comment": "/**\n * Set the user-resizable state of a window.\n *\n * This will add or remove the window\u0027s \u0060SDL_WINDOW_RESIZABLE\u0060 flag and\n * allow/disallow user resizing of the window. This is a no-op if the window\u0027s\n * resizable state already matches the requested state.\n *\n * You can\u0027t change the resizable state of a fullscreen window.\n *\n * \\param window the window of which to change the resizable state\n * \\param resizable SDL_TRUE to allow resizing, SDL_FALSE to disallow\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowFlags\n */"
    },
    "SDL_SetWindowShape": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "shape",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2098,
        "column": 29
      },
      "comment": "/**\n * Set the shape of a transparent window.\n *\n * This sets the alpha channel of a transparent window and any fully\n * transparent areas are also transparent to mouse clicks. If you are using\n * something besides the SDL render API, then you are responsible for setting\n * the alpha channel of the window yourself.\n *\n * The shape is copied inside this function, so you can free it afterwards. If\n * your shape surface changes, you should call SDL_SetWindowShape() again to\n * update the window.\n *\n * The window must have been created with the SDL_WINDOW_TRANSPARENT flag.\n *\n * \\param window the window\n * \\param shape the surface representing the shape of the window, or NULL to\n *              remove any current shape\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SetWindowSize": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1299,
        "column": 29
      },
      "comment": "/**\n * Request that the size of a window\u0027s client area be set.\n *\n * NULL can safely be passed as the \u0060w\u0060 or \u0060h\u0060 parameter if the width or\n * height value is not desired.\n *\n * If, at the time of this request, the window in a fixed-size state, such as\n * maximized or fullscreen, the request will be deferred until the window\n * exits this state and becomes resizable again.\n *\n * To change the fullscreen mode of a window, use\n * SDL_SetWindowFullscreenMode()\n *\n * On some windowing systems, this request is asynchronous and the new window\n * size may not have have been applied immediately upon the return of this\n * function. If an immediate change is required, call SDL_SyncWindow() to\n * block until the changes have taken effect.\n *\n * When the window size changes, an SDL_EVENT_WINDOW_RESIZED event will be\n * emitted with the new window dimensions. Note that the new dimensions may\n * not match the exact size requested, as some windowing systems can restrict\n * the window size in certain scenarios (e.g. constraining the size of the\n * content area to remain within the usable desktop bounds). Additionally, as\n * this is just a request, it can be denied by the windowing system.\n *\n * \\param window the window to change\n * \\param w the width of the window, must be \u003E 0\n * \\param h the height of the window, must be \u003E 0\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowSize\n * \\sa SDL_SetWindowFullscreenMode\n * \\sa SDL_SyncWindow\n */"
    },
    "SDL_SetWindowTitle": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "title",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1174,
        "column": 29
      },
      "comment": "/**\n * Set the title of a window.\n *\n * This string is expected to be in UTF-8 encoding.\n *\n * \\param window the window to change\n * \\param title the desired window title in UTF-8 format\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowTitle\n */"
    },
    "SDL_SetX11EventHook": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "callback",
          "type": {
            "name": "SDL_X11EventHook",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_system.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_system.h",
              "line": 111,
              "column": 28
            },
            "inner_type": {
              "name": "SDL_bool (void *, XEvent *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_system.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_system.h",
            "line": 111,
            "column": 28
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_system.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_system.h",
        "line": 125,
        "column": 30
      },
      "comment": "/**\n * Set a callback for every X11 event\n *\n * The callback may modify the event, and should return SDL_TRUE if the event\n * should continue to be processed, or SDL_FALSE to prevent further\n * processing.\n *\n * \\param callback The SDL_X11EventHook function to call.\n * \\param userdata a pointer to pass to every iteration of \u0060callback\u0060\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_ShowCursor": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 481,
        "column": 29
      },
      "comment": "/**\n * Show the cursor.\n *\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CursorVisible\n * \\sa SDL_HideCursor\n */"
    },
    "SDL_ShowMessageBox": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "messageboxdata",
          "type": {
            "name": "const SDL_MessageBoxData *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_MessageBoxData",
              "kind": "typeAlias",
              "size_of": 56,
              "align_of": 8,
              "location": {
                "fileName": "SDL_messagebox.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
                "line": 105,
                "column": 3
              },
              "inner_type": {
                "name": "SDL_MessageBoxData",
                "kind": "struct",
                "size_of": 56,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_messagebox.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
                  "line": 94,
                  "column": 9
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "buttonid",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_messagebox.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
        "line": 140,
        "column": 29
      },
      "comment": "/**\n * Create a modal message box.\n *\n * If your needs aren\u0027t complex, it might be easier to use\n * SDL_ShowSimpleMessageBox.\n *\n * This function should be called on the thread that created the parent\n * window, or on the main thread if the messagebox has no parent. It will\n * block execution of that thread until the user clicks a button or closes the\n * messagebox.\n *\n * This function may be called at any time, even before SDL_Init(). This makes\n * it useful for reporting errors like a failure to create a renderer or\n * OpenGL context.\n *\n * On X11, SDL rolls its own dialog box with X11 primitives instead of a\n * formal toolkit like GTK\u002B or Qt.\n *\n * Note that if SDL_Init() would fail because there isn\u0027t any available video\n * target, this function is likely to fail for the same reasons. If this is a\n * concern, check the return value from this function and fall back to writing\n * to stderr if you can.\n *\n * \\param messageboxdata the SDL_MessageBoxData structure with title, text and\n *                       other options\n * \\param buttonid the pointer to which user id of hit button should be copied\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ShowSimpleMessageBox\n */"
    },
    "SDL_ShowOpenFileDialog": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "callback",
          "type": {
            "name": "SDL_DialogFileCallback",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_dialog.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
              "line": 77,
              "column": 23
            },
            "inner_type": {
              "name": "void (void *, const char *const *, int)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_dialog.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
            "line": 77,
            "column": 23
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "filters",
          "type": {
            "name": "const SDL_DialogFileFilter *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_DialogFileFilter",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 8,
              "location": {
                "fileName": "SDL_dialog.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
                "line": 50,
                "column": 3
              },
              "inner_type": {
                "name": "SDL_DialogFileFilter",
                "kind": "struct",
                "size_of": 16,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_dialog.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
                  "line": 46,
                  "column": 9
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "default_location",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "allow_many",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_dialog.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
        "line": 122,
        "column": 30
      },
      "comment": "/**\n * Displays a dialog that lets the user select a file on their filesystem.\n *\n * This function should only be invoked from the main thread.\n *\n * This is an asynchronous function; it will return immediately, and the\n * result will be passed to the callback.\n *\n * The callback will be invoked with a null-terminated list of files the user\n * chose. The list will be empty if the user canceled the dialog, and it will\n * be NULL if an error occured.\n *\n * Note that the callback may be called from a different thread than the one\n * the function was invoked on.\n *\n * Depending on the platform, the user may be allowed to input paths that\n * don\u0027t yet exist.\n *\n * \\param callback The function to be invoked when the user selects a file and\n *                 accepts, or the user cancels the dialog, or an error\n *                 occurs. The first argument is a null-terminated list of C\n *                 strings, representing the paths chosen by the user. The\n *                 list will be empty if the user canceled the dialog, and it\n *                 will be NULL if an error occured. If an error occured, it\n *                 can be fetched with SDL_GetError(). The second argument is\n *                 the userdata pointer passed to the function.\n * \\param userdata An optional pointer to pass extra data to the callback when\n *                 it will be invoked.\n * \\param window The window that the dialog should be modal for. May be NULL.\n *               Not all platforms support this option.\n * \\param filters A null-terminated list of SDL_DialogFileFilter\u0027s. May be\n *                NULL. Not all platforms support this option, and platforms\n *                that do support it may allow the user to ignore the filters.\n * \\param default_location The default folder or file to start the dialog at.\n *                         May be NULL. Not all platforms support this option.\n * \\param allow_many If non-zero, the user will be allowed to select multiple\n *                   entries. Not all platforms support this option.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ShowSaveFileDialog\n * \\sa SDL_ShowOpenFolderDialog\n */"
    },
    "SDL_ShowOpenFolderDialog": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "callback",
          "type": {
            "name": "SDL_DialogFileCallback",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_dialog.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
              "line": 77,
              "column": 23
            },
            "inner_type": {
              "name": "void (void *, const char *const *, int)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_dialog.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
            "line": 77,
            "column": 23
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "default_location",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "allow_many",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_dialog.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
        "line": 205,
        "column": 30
      },
      "comment": "/**\n * Displays a dialog that lets the user select a folder on their filesystem.\n *\n * This function should only be invoked from the main thread.\n *\n * This is an asynchronous function; it will return immediately, and the\n * result will be passed to the callback.\n *\n * The callback will be invoked with a null-terminated list of files the user\n * chose. The list will be empty if the user canceled the dialog, and it will\n * be NULL if an error occured.\n *\n * Note that the callback may be called from a different thread than the one\n * the function was invoked on.\n *\n * Depending on the platform, the user may be allowed to input paths that\n * don\u0027t yet exist.\n *\n * \\param callback The function to be invoked when the user selects a folder\n *                 and accepts, or the user cancels the dialog, or an error\n *                 occurs. The first argument is a null-terminated list of C\n *                 strings, representing the paths chosen by the user. The\n *                 list will be empty if the user canceled the dialog, and it\n *                 will be NULL if an error occured. If an error occured, it\n *                 can be fetched with SDL_GetError(). The second argument is\n *                 the userdata pointer passed to the function.\n * \\param userdata An optional pointer to pass extra data to the callback when\n *                 it will be invoked.\n * \\param window The window that the dialog should be modal for. May be NULL.\n *               Not all platforms support this option.\n * \\param default_location The default folder or file to start the dialog at.\n *                         May be NULL. Not all platforms support this option.\n * \\param allow_many If non-zero, the user will be allowed to select multiple\n *                   entries. Not all platforms support this option.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ShowOpenFileDialog\n */"
    },
    "SDL_ShowSaveFileDialog": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "callback",
          "type": {
            "name": "SDL_DialogFileCallback",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_dialog.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
              "line": 77,
              "column": 23
            },
            "inner_type": {
              "name": "void (void *, const char *const *, int)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_dialog.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
            "line": 77,
            "column": 23
          }
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "filters",
          "type": {
            "name": "const SDL_DialogFileFilter *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_DialogFileFilter",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 8,
              "location": {
                "fileName": "SDL_dialog.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
                "line": 50,
                "column": 3
              },
              "inner_type": {
                "name": "SDL_DialogFileFilter",
                "kind": "struct",
                "size_of": 16,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_dialog.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
                  "line": 46,
                  "column": 9
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "default_location",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_dialog.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
        "line": 164,
        "column": 30
      },
      "comment": "/**\n * Displays a dialog that lets the user choose a new or existing file on their\n * filesystem.\n *\n * This function should only be invoked from the main thread.\n *\n * This is an asynchronous function; it will return immediately, and the\n * result will be passed to the callback.\n *\n * The callback will be invoked with a null-terminated list of files the user\n * chose. The list will be empty if the user canceled the dialog, and it will\n * be NULL if an error occured.\n *\n * Note that the callback may be called from a different thread than the one\n * the function was invoked on.\n *\n * The chosen file may or may not already exist.\n *\n * \\param callback The function to be invoked when the user selects a file and\n *                 accepts, or the user cancels the dialog, or an error\n *                 occurs. The first argument is a null-terminated list of C\n *                 strings, representing the paths chosen by the user. The\n *                 list will be empty if the user canceled the dialog, and it\n *                 will be NULL if an error occured. If an error occured, it\n *                 can be fetched with SDL_GetError(). The second argument is\n *                 the userdata pointer passed to the function.\n * \\param userdata An optional pointer to pass extra data to the callback when\n *                 it will be invoked.\n * \\param window The window that the dialog should be modal for. May be NULL.\n *               Not all platforms support this option.\n * \\param filters A null-terminated list of SDL_DialogFileFilter\u0027s. May be\n *                NULL. Not all platforms support this option, and platforms\n *                that do support it may allow the user to ignore the filters.\n * \\param default_location The default folder or file to start the dialog at.\n *                         May be NULL. Not all platforms support this option.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ShowOpenFileDialog\n */"
    },
    "SDL_ShowSimpleMessageBox": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "flags",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        },
        {
          "name": "title",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "message",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_messagebox.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
        "line": 182,
        "column": 29
      },
      "comment": "/**\n * Display a simple modal message box.\n *\n * If your needs aren\u0027t complex, this function is preferred over\n * SDL_ShowMessageBox.\n *\n * \u0060flags\u0060 may be any of the following:\n *\n * - \u0060SDL_MESSAGEBOX_ERROR\u0060: error dialog\n * - \u0060SDL_MESSAGEBOX_WARNING\u0060: warning dialog\n * - \u0060SDL_MESSAGEBOX_INFORMATION\u0060: informational dialog\n *\n * This function should be called on the thread that created the parent\n * window, or on the main thread if the messagebox has no parent. It will\n * block execution of that thread until the user clicks a button or closes the\n * messagebox.\n *\n * This function may be called at any time, even before SDL_Init(). This makes\n * it useful for reporting errors like a failure to create a renderer or\n * OpenGL context.\n *\n * On X11, SDL rolls its own dialog box with X11 primitives instead of a\n * formal toolkit like GTK\u002B or Qt.\n *\n * Note that if SDL_Init() would fail because there isn\u0027t any available video\n * target, this function is likely to fail for the same reasons. If this is a\n * concern, check the return value from this function and fall back to writing\n * to stderr if you can.\n *\n * \\param flags an SDL_MessageBoxFlags value\n * \\param title UTF-8 title text\n * \\param message UTF-8 message text\n * \\param window the parent window, or NULL for no parent\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_ShowMessageBox\n */"
    },
    "SDL_ShowWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1514,
        "column": 29
      },
      "comment": "/**\n * Show a window.\n *\n * \\param window the window to show\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_HideWindow\n * \\sa SDL_RaiseWindow\n */"
    },
    "SDL_ShowWindowSystemMenu": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1999,
        "column": 29
      },
      "comment": "/**\n * Display the system-level window menu.\n *\n * This default window menu is provided by the system and on some platforms\n * provides functionality for setting or changing privileged state on the\n * window, such as moving it between workspaces or displays, or toggling the\n * always-on-top property.\n *\n * On platforms or desktops where this is unsupported, this function does\n * nothing.\n *\n * \\param window the window for which the menu will be displayed\n * \\param x the x coordinate of the menu, relative to the origin (top-left) of\n *          the client area\n * \\param y the y coordinate of the menu, relative to the origin (top-left) of\n *          the client area\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_SignalCondition": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "cond",
          "type": {
            "name": "SDL_Condition *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Condition",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 622,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 665,
        "column": 29
      },
      "comment": "/**\n * Restart one of the threads that are waiting on the condition variable.\n *\n * \\param cond the condition variable to signal\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_BroadcastCondition\n * \\sa SDL_WaitCondition\n * \\sa SDL_WaitConditionTimeout\n */"
    },
    "SDL_SIMDGetAlignment": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_size_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
          "line": 31,
          "column": 32,
          "isSystem": true
        },
        "inner_type": {
          "name": "__darwin_size_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_types.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
            "line": 70,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_cpuinfo.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_cpuinfo.h",
        "line": 295,
        "column": 32
      },
      "comment": "/**\n * Report the alignment this system needs for SIMD allocations.\n *\n * This will return the minimum number of bytes to which a pointer must be\n * aligned to be compatible with SIMD instructions on the current machine. For\n * example, if the machine supports SSE only, it will return 16, but if it\n * supports AVX-512F, it\u0027ll return 64 (etc). This only reports values for\n * instruction sets SDL knows about, so if your SDL build doesn\u0027t have\n * SDL_HasAVX512F(), then it might return 16 for the SSE support it sees and\n * not 64 for the AVX-512 instructions that exist but SDL doesn\u0027t know about.\n * Plan accordingly.\n *\n * \\returns the alignment in bytes needed for available, known SIMD\n *          instructions.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_aligned_alloc\n * \\sa SDL_aligned_free\n */"
    },
    "SDL_sin": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1193,
        "column": 32
      }
    },
    "SDL_sinf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1194,
        "column": 31
      }
    },
    "SDL_SoftStretch": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "src",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "srcrect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dst",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dstrect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "scaleMode",
          "type": {
            "name": "SDL_ScaleMode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_surface.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
              "line": 76,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_ScaleMode",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 71,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 76,
            "column": 3
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 969,
        "column": 29
      },
      "comment": "/**\n * Perform stretch blit between two surfaces of the same format.\n *\n * Using SDL_SCALEMODE_NEAREST: fast, low quality. Using SDL_SCALEMODE_LINEAR:\n * bilinear scaling, slower, better quality, only 32BPP.\n *\n * \\param src the SDL_Surface structure to be copied from\n * \\param srcrect the SDL_Rect structure representing the rectangle to be\n *                copied\n * \\param dst the SDL_Surface structure that is the blit target\n * \\param dstrect the SDL_Rect structure representing the target rectangle in\n *                the destination surface\n * \\param scaleMode scale algorithm to be used\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_BlitSurfaceScaled\n */"
    },
    "SDL_sqrt": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1195,
        "column": 32
      }
    },
    "SDL_sqrtf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1196,
        "column": 31
      }
    },
    "SDL_StartTextInput": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 311,
        "column": 30
      },
      "comment": "/**\n * Start accepting Unicode text input events.\n *\n * This function will start accepting Unicode text input events in the focused\n * SDL window, and start emitting SDL_TextInputEvent (SDL_EVENT_TEXT_INPUT)\n * and SDL_TextEditingEvent (SDL_EVENT_TEXT_EDITING) events. Please use this\n * function in pair with SDL_StopTextInput().\n *\n * Text input events are received by default.\n *\n * On some platforms using this function activates the screen keyboard.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetTextInputRect\n * \\sa SDL_StopTextInput\n */"
    },
    "SDL_StopHapticEffect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "effect",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1168,
        "column": 29
      },
      "comment": "/**\n * Stop the haptic effect on its associated haptic device.\n *\n * *\n *\n * \\param haptic the SDL_Haptic device to stop the effect on\n * \\param effect the ID of the haptic effect to stop\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RunHapticEffect\n * \\sa SDL_StopHapticEffects\n */"
    },
    "SDL_StopHapticEffects": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1285,
        "column": 29
      },
      "comment": "/**\n * Stop all the currently playing effects on a haptic device.\n *\n * \\param haptic the SDL_Haptic device to stop\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_RunHapticEffect\n * \\sa SDL_StopHapticEffects\n */"
    },
    "SDL_StopHapticRumble": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1341,
        "column": 29
      },
      "comment": "/**\n * Stop the simple rumble on a haptic device.\n *\n * \\param haptic the haptic device to stop the rumble effect on\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_PlayHapticRumble\n */"
    },
    "SDL_StopTextInput": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 333,
        "column": 30
      },
      "comment": "/**\n * Stop receiving any text input events.\n *\n * Text input events are received by default.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_StartTextInput\n */"
    },
    "SDL_StorageReady": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "storage",
          "type": {
            "name": "SDL_Storage *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Storage",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_storage.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
                "line": 78,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 201,
        "column": 34
      },
      "comment": "/**\n * Checks if the storage container is ready to use.\n *\n * This function should be called in regular intervals until it returns\n * SDL_TRUE - however, it is not recommended to spinwait on this call, as the\n * backend may depend on a synchronous message loop.\n *\n * \\param storage a storage container to query\n * \\returns SDL_TRUE if the container is ready, SDL_FALSE otherwise\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_strcasecmp": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "str1",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "str2",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1081,
        "column": 29
      },
      "comment": "/**\n * Compare two null-terminated UTF-8 strings, case-insensitively.\n *\n * This will work with Unicode strings, using a technique called\n * \u0022case-folding\u0022 to handle the vast majority of case-sensitive human\n * languages regardless of system locale. It can deal with expanding values: a\n * German Eszett character can compare against two ASCII \u0027s\u0027 chars and be\n * considered a match, for example. A notable exception: it does not handle\n * the Turkish \u0027i\u0027 character; human language is complicated!\n *\n * Since this handles Unicode, it expects the string to be well-formed UTF-8\n * and not a null-terminated string of arbitrary bytes. Bytes that are not\n * valid UTF-8 are treated as Unicode character U\u002BFFFD (REPLACEMENT\n * CHARACTER), which is to say two strings of random bits may turn out to\n * match if they convert to the same amount of replacement characters.\n *\n * \\param str1 The first string to compare. NULL is not permitted!\n * \\param str2 The second string to compare. NULL is not permitted!\n * \\returns less than zero if str1 is \u0022less than\u0022 str2, greater than zero if\n *          str1 is \u0022greater than\u0022 str2, and zero if the strings match\n *          exactly.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_strcasestr": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "haystack",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "needle",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 985,
        "column": 31
      }
    },
    "SDL_strchr": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "c",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 981,
        "column": 31
      }
    },
    "SDL_strcmp": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "str1",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "str2",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1023,
        "column": 29
      },
      "comment": "/**\n * Compare two null-terminated UTF-8 strings.\n *\n * Due to the nature of UTF-8 encoding, this will work with Unicode strings,\n * since effectively this function just compares bytes until it hits a\n * null-terminating character. Also due to the nature of UTF-8, this can be\n * used with SDL_qsort() to put strings in (roughly) alphabetical order.\n *\n * \\param str1 The first string to compare. NULL is not permitted!\n * \\param str2 The second string to compare. NULL is not permitted!\n * \\returns less than zero if str1 is \u0022less than\u0022 str2, greater than zero if\n *          str1 is \u0022greater than\u0022 str2, and zero if the strings match\n *          exactly.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_strdup": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 938,
        "column": 42
      }
    },
    "SDL_strlcat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_size_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
          "line": 31,
          "column": 32,
          "isSystem": true
        },
        "inner_type": {
          "name": "__darwin_size_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_types.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
            "line": 70,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "src",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 937,
        "column": 32
      }
    },
    "SDL_strlcpy": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_size_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
          "line": 31,
          "column": 32,
          "isSystem": true
        },
        "inner_type": {
          "name": "__darwin_size_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_types.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
            "line": 70,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "src",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 935,
        "column": 32
      }
    },
    "SDL_strlen": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_size_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
          "line": 31,
          "column": 32,
          "isSystem": true
        },
        "inner_type": {
          "name": "__darwin_size_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_types.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
            "line": 70,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 933,
        "column": 32
      }
    },
    "SDL_strlwr": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 979,
        "column": 31
      },
      "comment": "/**\n * Convert a string to lowercase.\n *\n * **WARNING**: Regardless of system locale, this will only convert ASCII\n * values \u0027A\u0027 through \u0027Z\u0027 to lowercase.\n *\n * This function operates on a null-terminated string of bytes--even if it is\n * malformed UTF-8!--and converts ASCII characters \u0027A\u0027 through \u0027Z\u0027 to their\n * lowercase equivalents in-place, returning the original \u0060str\u0060 pointer.\n *\n * \\param str The string to convert in-place.\n * \\returns The \u0060str\u0060 pointer passed into this function.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_strupr\n */"
    },
    "SDL_strncasecmp": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "str1",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "str2",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1121,
        "column": 29
      },
      "comment": "/**\n * Compare two UTF-8 strings, case-insensitively, up to a number of bytes.\n *\n * This will work with Unicode strings, using a technique called\n * \u0022case-folding\u0022 to handle the vast majority of case-sensitive human\n * languages regardless of system locale. It can deal with expanding values: a\n * German Eszett character can compare against two ASCII \u0027s\u0027 chars and be\n * considered a match, for example. A notable exception: it does not handle\n * the Turkish \u0027i\u0027 character; human language is complicated!\n *\n * Since this handles Unicode, it expects the string to be well-formed UTF-8\n * and not a null-terminated string of arbitrary bytes. Bytes that are not\n * valid UTF-8 are treated as Unicode character U\u002BFFFD (REPLACEMENT\n * CHARACTER), which is to say two strings of random bits may turn out to\n * match if they convert to the same amount of replacement characters.\n *\n * Note that while this function is intended to be used with UTF-8, \u0060maxlen\u0060\n * specifies a _byte_ limit! If the limit lands in the middle of a multi-byte\n * UTF-8 sequence, it may convert a portion of the final character to one or\n * more Unicode character U\u002BFFFD (REPLACEMENT CHARACTER) so as not to overflow\n * a buffer.\n *\n * \u0060maxlen\u0060 specifies a maximum number of bytes to compare; if the strings\n * match to this number of bytes (or both have matched to a null-terminator\n * character before this number of bytes), they will be considered equal.\n *\n * \\param str1 The first string to compare. NULL is not permitted!\n * \\param str2 The second string to compare. NULL is not permitted!\n * \\param maxlen The maximum number of bytes to compare.\n * \\returns less than zero if str1 is \u0022less than\u0022 str2, greater than zero if\n *          str1 is \u0022greater than\u0022 str2, and zero if the strings match\n *          exactly.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_strncmp": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "str1",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "str2",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1053,
        "column": 29
      },
      "comment": "/**\n * Compare two UTF-8 strings up to a number of bytes.\n *\n * Due to the nature of UTF-8 encoding, this will work with Unicode strings,\n * since effectively this function just compares bytes until it hits a\n * null-terminating character. Also due to the nature of UTF-8, this can be\n * used with SDL_qsort() to put strings in (roughly) alphabetical order.\n *\n * Note that while this function is intended to be used with UTF-8, it is\n * doing a bytewise comparison, and \u0060maxlen\u0060 specifies a _byte_ limit! If the\n * limit lands in the middle of a multi-byte UTF-8 sequence, it will only\n * compare a portion of the final character.\n *\n * \u0060maxlen\u0060 specifies a maximum number of bytes to compare; if the strings\n * match to this number of bytes (or both have matched to a null-terminator\n * character before this number of bytes), they will be considered equal.\n *\n * \\param str1 The first string to compare. NULL is not permitted!\n * \\param str2 The second string to compare. NULL is not permitted!\n * \\param maxlen The maximum number of _bytes_ to compare.\n * \\returns less than zero if str1 is \u0022less than\u0022 str2, greater than zero if\n *          str1 is \u0022greater than\u0022 str2, and zero if the strings match\n *          exactly.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_strndup": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 939,
        "column": 42
      }
    },
    "SDL_strnlen": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_size_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
          "line": 31,
          "column": 32,
          "isSystem": true
        },
        "inner_type": {
          "name": "__darwin_size_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_types.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
            "line": 70,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 934,
        "column": 32
      }
    },
    "SDL_strnstr": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "haystack",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "needle",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 984,
        "column": 31
      }
    },
    "SDL_strrchr": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "c",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 982,
        "column": 31
      }
    },
    "SDL_strrev": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 940,
        "column": 31
      }
    },
    "SDL_strstr": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "haystack",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "needle",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 983,
        "column": 31
      }
    },
    "SDL_strtod": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "endp",
          "type": {
            "name": "char **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1003,
        "column": 32
      }
    },
    "SDL_strtok_r": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "s1",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "s2",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "saveptr",
          "type": {
            "name": "char **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 986,
        "column": 31
      }
    },
    "SDL_strtol": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "long",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "endp",
          "type": {
            "name": "char **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "base",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 999,
        "column": 30
      }
    },
    "SDL_strtoll": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Sint64",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 181,
          "column": 17
        },
        "inner_type": {
          "name": "int64_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_int64_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
            "line": 30,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "long long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "endp",
          "type": {
            "name": "char **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "base",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1001,
        "column": 32
      }
    },
    "SDL_strtoul": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "unsigned long",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "endp",
          "type": {
            "name": "char **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "base",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1000,
        "column": 39
      }
    },
    "SDL_strtoull": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint64",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 187,
          "column": 18
        },
        "inner_type": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_uint64_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
            "line": 31,
            "column": 28,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "endp",
          "type": {
            "name": "char **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "base",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1002,
        "column": 32
      }
    },
    "SDL_strupr": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 958,
        "column": 31
      },
      "comment": "/**\n * Convert a string to uppercase.\n *\n * **WARNING**: Regardless of system locale, this will only convert ASCII\n * values \u0027A\u0027 through \u0027Z\u0027 to uppercase.\n *\n * This function operates on a null-terminated string of bytes--even if it is\n * malformed UTF-8!--and converts ASCII characters \u0027a\u0027 through \u0027z\u0027 to their\n * uppercase equivalents in-place, returning the original \u0060str\u0060 pointer.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_strlwr\n */"
    },
    "SDL_SurfaceHasColorKey": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 473,
        "column": 34
      },
      "comment": "/**\n * Returns whether the surface has a color key\n *\n * It is safe to pass a NULL \u0060surface\u0060 here; it will return SDL_FALSE.\n *\n * \\param surface the SDL_Surface structure to query\n * \\returns SDL_TRUE if the surface has a color key, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetSurfaceColorKey\n * \\sa SDL_GetSurfaceColorKey\n */"
    },
    "SDL_SurfaceHasRLE": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 432,
        "column": 34
      },
      "comment": "/**\n * Returns whether the surface is RLE enabled\n *\n * It is safe to pass a NULL \u0060surface\u0060 here; it will return SDL_FALSE.\n *\n * \\param surface the SDL_Surface structure to query\n * \\returns SDL_TRUE if the surface is RLE enabled, SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetSurfaceRLE\n */"
    },
    "SDL_SyncWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1677,
        "column": 29
      },
      "comment": "/**\n * Block until any pending window state is finalized.\n *\n * On asynchronous windowing systems, this acts as a synchronization barrier\n * for pending window state. It will attempt to wait until any pending window\n * state has been applied and is guaranteed to return within finite time. Note\n * that for how long it can potentially block depends on the underlying window\n * system, as window state changes may involve somewhat lengthy animations\n * that must complete before the window is in its final requested state.\n *\n * On windowing systems where changes are immediate, this does nothing.\n *\n * \\param window the window for which to wait for the pending state to be\n *               applied\n * \\returns 0 on success, a positive value if the operation timed out before\n *          the window was in the requested state, or a negative error code on\n *          failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetWindowSize\n * \\sa SDL_SetWindowPosition\n * \\sa SDL_SetWindowFullscreen\n * \\sa SDL_MinimizeWindow\n * \\sa SDL_MaximizeWindow\n * \\sa SDL_RestoreWindow\n */"
    },
    "SDL_tan": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1197,
        "column": 32
      }
    },
    "SDL_tanf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1198,
        "column": 31
      }
    },
    "SDL_TextInputActive": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 322,
        "column": 34
      },
      "comment": "/**\n * Check whether or not Unicode text input events are enabled.\n *\n * \\returns SDL_TRUE if text input events are enabled else SDL_FALSE.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_StartTextInput\n */"
    },
    "SDL_TimeFromWindows": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_Time",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 197,
          "column": 16
        },
        "inner_type": {
          "name": "Sint64",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 181,
            "column": 17
          },
          "inner_type": {
            "name": "int64_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_int64_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
              "line": 30,
              "column": 33,
              "isSystem": true
            },
            "inner_type": {
              "name": "long long",
              "kind": "primitive",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "dwLowDateTime",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        },
        {
          "name": "dwHighDateTime",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_time.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
        "line": 162,
        "column": 34
      },
      "comment": "/**\n * Converts a Windows FILETIME (100-nanosecond intervals since January 1,\n * 1601) to an SDL time\n *\n * This function takes the two 32-bit values of the FILETIME structure as\n * parameters.\n *\n * \\param dwLowDateTime the low portion of the Windows FILETIME value\n * \\param dwHighDateTime the high portion of the Windows FILETIME value\n * \\returns the converted SDL time\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_TimeToDateTime": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "ticks",
          "type": {
            "name": "SDL_Time",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 197,
              "column": 16
            },
            "inner_type": {
              "name": "Sint64",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 181,
                "column": 17
              },
              "inner_type": {
                "name": "int64_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_int64_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
                  "line": 30,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "long long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 197,
            "column": 16
          }
        },
        {
          "name": "dt",
          "type": {
            "name": "SDL_DateTime *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_DateTime",
              "kind": "typeAlias",
              "size_of": 36,
              "align_of": 4,
              "location": {
                "fileName": "SDL_time.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
                "line": 54,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_DateTime",
                "kind": "struct",
                "size_of": 36,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_time.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
                  "line": 43,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "localTime",
          "type": {
            "name": "SDL_bool",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 137,
              "column": 13
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 137,
            "column": 13
          }
        }
      ],
      "location": {
        "fileName": "SDL_time.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
        "line": 116,
        "column": 29
      },
      "comment": "/**\n * Converts an SDL_Time in nanoseconds since the epoch to a calendar time in\n * the SDL_DateTime format.\n *\n * \\param ticks the SDL_Time to be converted\n * \\param dt the resulting SDL_DateTime\n * \\param localTime the resulting SDL_DateTime will be expressed in local time\n *                  if true, otherwise it will be in Universal Coordinated\n *                  Time (UTC)\n * \\returns 0 on success or -1 on error; call SDL_GetError() for more\n *          information.\n *\n * \\since This function is available since SDL 3.0.0\n */"
    },
    "SDL_TimeToWindows": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "ticks",
          "type": {
            "name": "SDL_Time",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 197,
              "column": 16
            },
            "inner_type": {
              "name": "Sint64",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 181,
                "column": 17
              },
              "inner_type": {
                "name": "int64_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_int64_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
                  "line": 30,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "long long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 197,
            "column": 16
          }
        },
        {
          "name": "dwLowDateTime",
          "type": {
            "name": "Uint32 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dwHighDateTime",
          "type": {
            "name": "Uint32 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_time.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
        "line": 147,
        "column": 30
      },
      "comment": "/**\n * Converts an SDL time into a Windows FILETIME (100-nanosecond intervals\n * since January 1, 1601).\n *\n * This function fills in the two 32-bit values of the FILETIME structure.\n *\n * \\param ticks the time to convert\n * \\param dwLowDateTime a pointer filled in with the low portion of the\n *                      Windows FILETIME value\n * \\param dwHighDateTime a pointer filled in with the high portion of the\n *                       Windows FILETIME value\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_tolower": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 755,
        "column": 29
      },
      "comment": "/**\n * Convert low-ASCII English letters to lowercase.\n *\n * **WARNING**: Regardless of system locale, this will only convert ASCII\n * values \u0027A\u0027 through \u0027Z\u0027 to lowercase.\n *\n * This function returns the lowercase equivalent of \u0060x\u0060. If a character\n * cannot be converted, or is already lowercase, this function returns \u0060x\u0060.\n *\n * \\param x character value to check.\n * \\returns Lowercase version of x, or x if no conversion available.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_toupper": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 737,
        "column": 29
      },
      "comment": "/**\n * Convert low-ASCII English letters to uppercase.\n *\n * **WARNING**: Regardless of system locale, this will only convert ASCII\n * values \u0027a\u0027 through \u0027z\u0027 to uppercase.\n *\n * This function returns the uppercase equivalent of \u0060x\u0060. If a character\n * cannot be converted, or is already uppercase, this function returns \u0060x\u0060.\n *\n * \\param x character value to check.\n * \\returns Capitalized version of x, or x if no conversion available.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_trunc": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "double",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "double",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1175,
        "column": 32
      }
    },
    "SDL_truncf": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "float",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1176,
        "column": 31
      }
    },
    "SDL_TryLockMutex": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "mutex",
          "type": {
            "name": "SDL_Mutex *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Mutex",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 131,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 202,
        "column": 29
      },
      "comment": "/**\n * Try to lock a mutex without blocking.\n *\n * This works just like SDL_LockMutex(), but if the mutex is not available,\n * this function returns \u0060SDL_MUTEX_TIMEDOUT\u0060 immediately.\n *\n * This technique is useful if you need exclusive access to a resource but\n * don\u0027t want to wait for it, and will return to it to try again later.\n *\n * This function does not fail; if mutex is NULL, it will return 0 immediately\n * having locked nothing. If the mutex is valid, this function will always\n * either lock the mutex and return 0, or return SDL_MUTEX_TIMEOUT and lock\n * nothing.\n *\n * \\param mutex the mutex to try to lock\n * \\returns 0 or \u0060SDL_MUTEX_TIMEDOUT\u0060\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LockMutex\n * \\sa SDL_UnlockMutex\n */"
    },
    "SDL_TryLockRWLockForReading": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "rwlock",
          "type": {
            "name": "SDL_RWLock *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_RWLock",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 249,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 395,
        "column": 29
      },
      "comment": "/**\n * Try to lock a read/write lock _for reading_ without blocking.\n *\n * This works just like SDL_LockRWLockForReading(), but if the rwlock is not\n * available, then this function returns \u0060SDL_RWLOCK_TIMEDOUT\u0060 immediately.\n *\n * This technique is useful if you need access to a resource but don\u0027t want to\n * wait for it, and will return to it to try again later.\n *\n * Trying to lock for read-only access can succeed if other threads are\n * holding read-only locks, as this won\u0027t prevent access.\n *\n * This function does not fail; if rwlock is NULL, it will return 0\n * immediately having locked nothing. If rwlock is valid, this function will\n * always either lock the rwlock and return 0, or return SDL_RWLOCK_TIMEOUT\n * and lock nothing.\n *\n * \\param rwlock the rwlock to try to lock\n * \\returns 0 or \u0060SDL_RWLOCK_TIMEDOUT\u0060\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LockRWLockForReading\n * \\sa SDL_TryLockRWLockForWriting\n * \\sa SDL_UnlockRWLock\n */"
    },
    "SDL_TryLockRWLockForWriting": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "rwlock",
          "type": {
            "name": "SDL_RWLock *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_RWLock",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 249,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 428,
        "column": 29
      },
      "comment": "/**\n * Try to lock a read/write lock _for writing_ without blocking.\n *\n * This works just like SDL_LockRWLockForWriting(), but if the rwlock is not\n * available, this function returns \u0060SDL_RWLOCK_TIMEDOUT\u0060 immediately.\n *\n * This technique is useful if you need exclusive access to a resource but\n * don\u0027t want to wait for it, and will return to it to try again later.\n *\n * It is illegal for the owning thread to lock an already-locked rwlock for\n * writing (read-only may be locked recursively, writing can not). Doing so\n * results in undefined behavior.\n *\n * It is illegal to request a write lock from a thread that already holds a\n * read-only lock. Doing so results in undefined behavior. Unlock the\n * read-only lock before requesting a write lock.\n *\n * This function does not fail; if rwlock is NULL, it will return 0\n * immediately having locked nothing. If rwlock is valid, this function will\n * always either lock the rwlock and return 0, or return SDL_RWLOCK_TIMEOUT\n * and lock nothing.\n *\n * \\param rwlock the rwlock to try to lock\n * \\returns 0 or \u0060SDL_RWLOCK_TIMEDOUT\u0060\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LockRWLockForWriting\n * \\sa SDL_TryLockRWLockForReading\n * \\sa SDL_UnlockRWLock\n */"
    },
    "SDL_TryLockSpinlock": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "lock",
          "type": {
            "name": "SDL_SpinLock *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_SpinLock",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_atomic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
                "line": 94,
                "column": 13
              },
              "inner_type": {
                "name": "int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_atomic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
        "line": 111,
        "column": 34
      },
      "comment": "/**\n * Try to lock a spin lock by setting it to a non-zero value.\n *\n * ***Please note that spinlocks are dangerous if you don\u0027t know what you\u0027re\n * doing. Please be careful using any sort of spinlock!***\n *\n * \\param lock a pointer to a lock variable\n * \\returns SDL_TRUE if the lock succeeded, SDL_FALSE if the lock is already\n *          held.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LockSpinlock\n * \\sa SDL_UnlockSpinlock\n */"
    },
    "SDL_TryWaitSemaphore": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "sem",
          "type": {
            "name": "SDL_Semaphore *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Semaphore",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 481,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 564,
        "column": 29
      },
      "comment": "/**\n * See if a semaphore has a positive value and decrement it if it does.\n *\n * This function checks to see if the semaphore pointed to by \u0060sem\u0060 has a\n * positive value and atomically decrements the semaphore value if it does. If\n * the semaphore doesn\u0027t have a positive value, the function immediately\n * returns SDL_MUTEX_TIMEDOUT.\n *\n * \\param sem the semaphore to wait on\n * \\returns 0 if the wait succeeds, \u0060SDL_MUTEX_TIMEDOUT\u0060 if the wait would\n *          block, or a negative error code on failure; call SDL_GetError()\n *          for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_PostSemaphore\n * \\sa SDL_WaitSemaphore\n * \\sa SDL_WaitSemaphoreTimeout\n */"
    },
    "SDL_uitoa": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "value",
          "type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "str",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "radix",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 991,
        "column": 31
      }
    },
    "SDL_ulltoa": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "value",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 187,
            "column": 18
          }
        },
        {
          "name": "str",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "radix",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 995,
        "column": 31
      }
    },
    "SDL_ultoa": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "char *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "value",
          "type": {
            "name": "unsigned long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "str",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "radix",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 993,
        "column": 31
      }
    },
    "SDL_UnloadObject": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "handle",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_loadso.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_loadso.h",
        "line": 102,
        "column": 30
      },
      "comment": "/**\n * Unload a shared object from memory.\n *\n * \\param handle a valid shared object handle returned by SDL_LoadObject()\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LoadObject\n */"
    },
    "SDL_UnlockJoysticks": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 138,
        "column": 30
      },
      "comment": "/**\n * Unlocking for atomic access to the joystick API\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_UnlockMutex": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "mutex",
          "type": {
            "name": "SDL_Mutex *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Mutex",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 131,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 221,
        "column": 30
      },
      "comment": "/**\n * Unlock the mutex.\n *\n * It is legal for the owning thread to lock an already-locked mutex. It must\n * unlock it the same number of times before it is actually made available for\n * other threads in the system (this is known as a \u0022recursive mutex\u0022).\n *\n * It is illegal to unlock a mutex that has not been locked by the current\n * thread, and doing so results in undefined behavior.\n *\n * \\param mutex the mutex to unlock.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LockMutex\n * \\sa SDL_TryLockMutex\n */"
    },
    "SDL_UnlockProperties": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "props",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_properties.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
            "line": 42,
            "column": 16
          }
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 140,
        "column": 30
      },
      "comment": "/**\n * Unlock a set of properties\n *\n * \\param props the properties to unlock\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LockProperties\n */"
    },
    "SDL_UnlockRWLock": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "rwlock",
          "type": {
            "name": "SDL_RWLock *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_RWLock",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 249,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 453,
        "column": 30
      },
      "comment": "/**\n * Unlock the read/write lock.\n *\n * Use this function to unlock the rwlock, whether it was locked for read-only\n * or write operations.\n *\n * It is legal for the owning thread to lock an already-locked read-only lock.\n * It must unlock it the same number of times before it is actually made\n * available for other threads in the system (this is known as a \u0022recursive\n * rwlock\u0022).\n *\n * It is illegal to unlock a rwlock that has not been locked by the current\n * thread, and doing so results in undefined behavior.\n *\n * \\param rwlock the rwlock to unlock.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LockRWLockForReading\n * \\sa SDL_LockRWLockForWriting\n * \\sa SDL_TryLockRWLockForReading\n * \\sa SDL_TryLockRWLockForWriting\n */"
    },
    "SDL_UnlockSpinlock": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "lock",
          "type": {
            "name": "SDL_SpinLock *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_SpinLock",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_atomic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
                "line": 94,
                "column": 13
              },
              "inner_type": {
                "name": "int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_atomic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
        "line": 143,
        "column": 30
      },
      "comment": "/**\n * Unlock a spin lock by setting it to 0.\n *\n * Always returns immediately.\n *\n * ***Please note that spinlocks are dangerous if you don\u0027t know what you\u0027re\n * doing. Please be careful using any sort of spinlock!***\n *\n * \\param lock a pointer to a lock variable\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LockSpinlock\n * \\sa SDL_TryLockSpinlock\n */"
    },
    "SDL_UnlockSurface": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "surface",
          "type": {
            "name": "SDL_Surface *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Surface",
              "kind": "typeAlias",
              "size_of": 96,
              "align_of": 8,
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 131,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Surface",
                "kind": "struct",
                "size_of": 96,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_surface.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                  "line": 107,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 317,
        "column": 30
      },
      "comment": "/**\n * Release a surface after directly accessing the pixels.\n *\n * \\param surface the SDL_Surface structure to be unlocked\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LockSurface\n */"
    },
    "SDL_UnlockTexture": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1234,
        "column": 30
      },
      "comment": "/**\n * Unlock a texture, uploading the changes to video memory, if needed.\n *\n * **Warning**: Please note that SDL_LockTexture() is intended to be\n * write-only; it will not guarantee the previous contents of the texture will\n * be provided. You must fully initialize any area of a texture that you lock\n * before unlocking it, as the pixels might otherwise be uninitialized memory.\n *\n * Which is to say: locking and immediately unlocking a texture can result in\n * corrupted textures, depending on the renderer in use.\n *\n * \\param texture a texture locked by SDL_LockTexture()\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LockTexture\n */"
    },
    "SDL_UpdateGamepads": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 939,
        "column": 30
      },
      "comment": "/**\n * Manually pump gamepad updates if not using the loop.\n *\n * This function is called automatically by the event loop if events are\n * enabled. Under such circumstances, it will not be necessary to call this\n * function.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_UpdateHapticEffect": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "haptic",
          "type": {
            "name": "SDL_Haptic *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Haptic",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 146,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "effect",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "data",
          "type": {
            "name": "const SDL_HapticEffect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_HapticEffect",
              "kind": "typeAlias",
              "size_of": 72,
              "align_of": 8,
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 838,
                "column": 3
              },
              "inner_type": {
                "name": "union SDL_HapticEffect",
                "kind": "union",
                "size_of": 72,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_haptic.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                  "line": 828,
                  "column": 15
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 1127,
        "column": 29
      },
      "comment": "/**\n * Update the properties of an effect.\n *\n * Can be used dynamically, although behavior when dynamically changing\n * direction may be strange. Specifically the effect may re-upload itself and\n * start playing from the start. You also cannot change the type either when\n * running SDL_UpdateHapticEffect().\n *\n * \\param haptic the SDL_Haptic device that has the effect\n * \\param effect the identifier of the effect to update\n * \\param data an SDL_HapticEffect structure containing the new effect\n *             properties to use\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateHapticEffect\n * \\sa SDL_RunHapticEffect\n */"
    },
    "SDL_UpdateJoysticks": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 873,
        "column": 30
      },
      "comment": "/**\n * Update the current state of the open joysticks.\n *\n * This is called automatically by the event loop if any joystick events are\n * enabled.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_UpdateNVTexture": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Yplane",
          "type": {
            "name": "const Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Ypitch",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "UVplane",
          "type": {
            "name": "const Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "UVpitch",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1144,
        "column": 29
      },
      "comment": "/**\n * Update a rectangle within a planar NV12 or NV21 texture with new pixels.\n *\n * You can use SDL_UpdateTexture() as long as your pixel data is a contiguous\n * block of NV12/21 planes in the proper order, but this function is available\n * if your pixel data is not contiguous.\n *\n * \\param texture the texture to update\n * \\param rect a pointer to the rectangle of pixels to update, or NULL to\n *             update the entire texture.\n * \\param Yplane the raw pixel data for the Y plane.\n * \\param Ypitch the number of bytes between rows of pixel data for the Y\n *               plane.\n * \\param UVplane the raw pixel data for the UV plane.\n * \\param UVpitch the number of bytes between rows of pixel data for the UV\n *                plane.\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_UpdateTexture\n * \\sa SDL_UpdateYUVTexture\n */"
    },
    "SDL_UpdateSensors": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 283,
        "column": 30
      },
      "comment": "/**\n * Update the current state of the open sensors.\n *\n * This is called automatically by the event loop if sensor events are\n * enabled.\n *\n * This needs to be called from the thread that initialized the sensor\n * subsystem.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_UpdateTexture": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "pixels",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "pitch",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1084,
        "column": 29
      },
      "comment": "/**\n * Update the given texture rectangle with new pixel data.\n *\n * The pixel data must be in the pixel format of the texture. Use\n * SDL_QueryTexture() to query the pixel format of the texture.\n *\n * This is a fairly slow function, intended for use with static textures that\n * do not change often.\n *\n * If the texture is intended to be updated often, it is preferred to create\n * the texture as streaming and use the locking functions referenced below.\n * While this function will work with streaming textures, for optimization\n * reasons you may not get the pixels back if you lock the texture afterward.\n *\n * \\param texture the texture to update\n * \\param rect an SDL_Rect structure representing the area to update, or NULL\n *             to update the entire texture\n * \\param pixels the raw pixel data in the format of the texture\n * \\param pitch the number of bytes in a row of pixel data, including padding\n *              between lines\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_LockTexture\n * \\sa SDL_UnlockTexture\n * \\sa SDL_UpdateNVTexture\n * \\sa SDL_UpdateYUVTexture\n */"
    },
    "SDL_UpdateWindowSurface": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1736,
        "column": 29
      },
      "comment": "/**\n * Copy the window surface to the screen.\n *\n * This is the function you use to reflect any changes to the surface on the\n * screen.\n *\n * This function is equivalent to the SDL 1.2 API SDL_Flip().\n *\n * \\param window the window to update\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowSurface\n * \\sa SDL_UpdateWindowSurfaceRects\n */"
    },
    "SDL_UpdateWindowSurfaceRects": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rects",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "numrects",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1763,
        "column": 29
      },
      "comment": "/**\n * Copy areas of the window surface to the screen.\n *\n * This is the function you use to reflect changes to portions of the surface\n * on the screen.\n *\n * This function is equivalent to the SDL 1.2 API SDL_UpdateRects().\n *\n * Note that this function will update _at least_ the rectangles specified,\n * but this is only intended as an optimization; in practice, this might\n * update more of the screen (or all of the screen!), depending on what method\n * SDL uses to send pixels to the system.\n *\n * \\param window the window to update\n * \\param rects an array of SDL_Rect structures representing areas of the\n *              surface to copy, in pixels\n * \\param numrects the number of rectangles\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowSurface\n * \\sa SDL_UpdateWindowSurface\n */"
    },
    "SDL_UpdateYUVTexture": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "texture",
          "type": {
            "name": "SDL_Texture *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Texture",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_render.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
                "line": 129,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "rect",
          "type": {
            "name": "const SDL_Rect *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Rect",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 80,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Rect",
                "kind": "struct",
                "size_of": 16,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 76,
                  "column": 16
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Yplane",
          "type": {
            "name": "const Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Ypitch",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Uplane",
          "type": {
            "name": "const Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Upitch",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Vplane",
          "type": {
            "name": "const Uint8 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "Vpitch",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 1114,
        "column": 29
      },
      "comment": "/**\n * Update a rectangle within a planar YV12 or IYUV texture with new pixel\n * data.\n *\n * You can use SDL_UpdateTexture() as long as your pixel data is a contiguous\n * block of Y and U/V planes in the proper order, but this function is\n * available if your pixel data is not contiguous.\n *\n * \\param texture the texture to update\n * \\param rect a pointer to the rectangle of pixels to update, or NULL to\n *             update the entire texture\n * \\param Yplane the raw pixel data for the Y plane\n * \\param Ypitch the number of bytes between rows of pixel data for the Y\n *               plane\n * \\param Uplane the raw pixel data for the U plane\n * \\param Upitch the number of bytes between rows of pixel data for the U\n *               plane\n * \\param Vplane the raw pixel data for the V plane\n * \\param Vpitch the number of bytes between rows of pixel data for the V\n *               plane\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_UpdateNVTexture\n * \\sa SDL_UpdateTexture\n */"
    },
    "SDL_utf8strlcpy": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_size_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
          "line": 31,
          "column": 32,
          "isSystem": true
        },
        "inner_type": {
          "name": "__darwin_size_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_types.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
            "line": 70,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "src",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "dst_bytes",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 936,
        "column": 32
      }
    },
    "SDL_utf8strlen": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_size_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
          "line": 31,
          "column": 32,
          "isSystem": true
        },
        "inner_type": {
          "name": "__darwin_size_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_types.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
            "line": 70,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 987,
        "column": 32
      }
    },
    "SDL_utf8strnlen": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_size_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
          "line": 31,
          "column": 32,
          "isSystem": true
        },
        "inner_type": {
          "name": "__darwin_size_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_types.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
            "line": 70,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "bytes",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 988,
        "column": 32
      }
    },
    "SDL_WaitCondition": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "cond",
          "type": {
            "name": "SDL_Condition *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Condition",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 622,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "mutex",
          "type": {
            "name": "SDL_Mutex *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Mutex",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 131,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 708,
        "column": 29
      },
      "comment": "/**\n * Wait until a condition variable is signaled.\n *\n * This function unlocks the specified \u0060mutex\u0060 and waits for another thread to\n * call SDL_SignalCondition() or SDL_BroadcastCondition() on the condition\n * variable \u0060cond\u0060. Once the condition variable is signaled, the mutex is\n * re-locked and the function returns.\n *\n * The mutex must be locked before calling this function. Locking the mutex\n * recursively (more than once) is not supported and leads to undefined\n * behavior.\n *\n * This function is the equivalent of calling SDL_WaitConditionTimeout() with\n * a time length of -1.\n *\n * \\param cond the condition variable to wait on\n * \\param mutex the mutex used to coordinate thread access\n * \\returns 0 when it is signaled or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_BroadcastCondition\n * \\sa SDL_SignalCondition\n * \\sa SDL_WaitConditionTimeout\n */"
    },
    "SDL_WaitConditionTimeout": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "cond",
          "type": {
            "name": "SDL_Condition *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Condition",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 622,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "mutex",
          "type": {
            "name": "SDL_Mutex *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Mutex",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 131,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "timeoutMS",
          "type": {
            "name": "Sint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 168,
              "column": 17
            },
            "inner_type": {
              "name": "int32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_int32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 168,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 737,
        "column": 29
      },
      "comment": "/**\n * Wait until a condition variable is signaled or a certain time has passed.\n *\n * This function unlocks the specified \u0060mutex\u0060 and waits for another thread to\n * call SDL_SignalCondition() or SDL_BroadcastCondition() on the condition\n * variable \u0060cond\u0060, or for the specified time to elapse. Once the condition\n * variable is signaled or the time elapsed, the mutex is re-locked and the\n * function returns.\n *\n * The mutex must be locked before calling this function. Locking the mutex\n * recursively (more than once) is not supported and leads to undefined\n * behavior.\n *\n * \\param cond the condition variable to wait on\n * \\param mutex the mutex used to coordinate thread access\n * \\param timeoutMS the maximum time to wait, in milliseconds, or -1 to wait\n *                  indefinitely\n * \\returns 0 if the condition variable is signaled, \u0060SDL_MUTEX_TIMEDOUT\u0060 if\n *          the condition is not signaled in the allotted time, or a negative\n *          error code on failure; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_BroadcastCondition\n * \\sa SDL_SignalCondition\n * \\sa SDL_WaitCondition\n */"
    },
    "SDL_WaitEvent": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "event",
          "type": {
            "name": "SDL_Event *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Event",
              "kind": "typeAlias",
              "size_of": 128,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 792,
                "column": 3
              },
              "inner_type": {
                "name": "union SDL_Event",
                "kind": "union",
                "size_of": 128,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_events.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                  "line": 741,
                  "column": 15
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 1024,
        "column": 34
      },
      "comment": "/**\n * Wait indefinitely for the next available event.\n *\n * If \u0060event\u0060 is not NULL, the next event is removed from the queue and stored\n * in the SDL_Event structure pointed to by \u0060event\u0060.\n *\n * As this function may implicitly call SDL_PumpEvents(), you can only call\n * this function in the thread that initialized the video subsystem.\n *\n * \\param event the SDL_Event structure to be filled in with the next event\n *              from the queue, or NULL\n * \\returns SDL_TRUE on success or SDL_FALSE if there was an error while\n *          waiting for events; call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_PollEvent\n * \\sa SDL_PushEvent\n * \\sa SDL_WaitEventTimeout\n */"
    },
    "SDL_WaitEventTimeout": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "event",
          "type": {
            "name": "SDL_Event *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Event",
              "kind": "typeAlias",
              "size_of": 128,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 792,
                "column": 3
              },
              "inner_type": {
                "name": "union SDL_Event",
                "kind": "union",
                "size_of": 128,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_events.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                  "line": 741,
                  "column": 15
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "timeoutMS",
          "type": {
            "name": "Sint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 168,
              "column": 17
            },
            "inner_type": {
              "name": "int32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_int32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 168,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 1052,
        "column": 34
      },
      "comment": "/**\n * Wait until the specified timeout (in milliseconds) for the next available\n * event.\n *\n * If \u0060event\u0060 is not NULL, the next event is removed from the queue and stored\n * in the SDL_Event structure pointed to by \u0060event\u0060.\n *\n * As this function may implicitly call SDL_PumpEvents(), you can only call\n * this function in the thread that initialized the video subsystem.\n *\n * The timeout is not guaranteed, the actual wait time could be longer due to\n * system scheduling.\n *\n * \\param event the SDL_Event structure to be filled in with the next event\n *              from the queue, or NULL\n * \\param timeoutMS the maximum number of milliseconds to wait for the next\n *                  available event\n * \\returns SDL_TRUE if this got an event or SDL_FALSE if the timeout elapsed\n *          without any events available.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_PollEvent\n * \\sa SDL_PushEvent\n * \\sa SDL_WaitEvent\n */"
    },
    "SDL_WaitSemaphore": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "sem",
          "type": {
            "name": "SDL_Semaphore *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Semaphore",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 481,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 543,
        "column": 29
      },
      "comment": "/**\n * Wait until a semaphore has a positive value and then decrements it.\n *\n * This function suspends the calling thread until either the semaphore\n * pointed to by \u0060sem\u0060 has a positive value or the call is interrupted by a\n * signal or error. If the call is successful it will atomically decrement the\n * semaphore value.\n *\n * This function is the equivalent of calling SDL_WaitSemaphoreTimeout() with\n * a time length of -1.\n *\n * \\param sem the semaphore wait on\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_PostSemaphore\n * \\sa SDL_TryWaitSemaphore\n * \\sa SDL_WaitSemaphoreTimeout\n */"
    },
    "SDL_WaitSemaphoreTimeout": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "sem",
          "type": {
            "name": "SDL_Semaphore *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Semaphore",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_mutex.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
                "line": 481,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "timeoutMS",
          "type": {
            "name": "Sint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 168,
              "column": 17
            },
            "inner_type": {
              "name": "int32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_int32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 168,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 586,
        "column": 29
      },
      "comment": "/**\n * Wait until a semaphore has a positive value and then decrements it.\n *\n * This function suspends the calling thread until either the semaphore\n * pointed to by \u0060sem\u0060 has a positive value, the call is interrupted by a\n * signal or error, or the specified time has elapsed. If the call is\n * successful it will atomically decrement the semaphore value.\n *\n * \\param sem the semaphore to wait on\n * \\param timeoutMS the length of the timeout, in milliseconds\n * \\returns 0 if the wait succeeds, \u0060SDL_MUTEX_TIMEDOUT\u0060 if the wait does not\n *          succeed in the allotted time, or a negative error code on failure;\n *          call SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_PostSemaphore\n * \\sa SDL_TryWaitSemaphore\n * \\sa SDL_WaitSemaphore\n */"
    },
    "SDL_WaitThread": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "thread",
          "type": {
            "name": "SDL_Thread *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Thread",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_thread.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
                "line": 49,
                "column": 8
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "status",
          "type": {
            "name": "int *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 336,
        "column": 30
      },
      "comment": "/**\n * Wait for a thread to finish.\n *\n * Threads that haven\u0027t been detached will remain (as a \u0022zombie\u0022) until this\n * function cleans them up. Not doing so is a resource leak.\n *\n * Once a thread has been cleaned up through this function, the SDL_Thread\n * that references it becomes invalid and should not be referenced again. As\n * such, only one thread may call SDL_WaitThread() on another.\n *\n * The return code for the thread function is placed in the area pointed to by\n * \u0060status\u0060, if \u0060status\u0060 is not NULL.\n *\n * You may not wait on a thread that has been used in a call to\n * SDL_DetachThread(). Use either that function or this one, but not both, or\n * behavior is undefined.\n *\n * It is safe to pass a NULL thread to this function; it is a no-op.\n *\n * Note that the thread pointer is freed by this function and is not valid\n * afterward.\n *\n * \\param thread the SDL_Thread pointer that was returned from the\n *               SDL_CreateThread() call that started this thread\n * \\param status pointer to an integer that will receive the value returned\n *               from the thread function by its \u0027return\u0027, or NULL to not\n *               receive such value back.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_CreateThread\n * \\sa SDL_DetachThread\n */"
    },
    "SDL_WarpMouseGlobal": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 252,
        "column": 29
      },
      "comment": "/**\n * Move the mouse to the given position in global screen space.\n *\n * This function generates a mouse motion event.\n *\n * A failure of this function usually means that it is unsupported by a\n * platform.\n *\n * Note that this function will appear to succeed, but not actually move the\n * mouse when used over Microsoft Remote Desktop.\n *\n * \\param x the x coordinate\n * \\param y the y coordinate\n * \\returns 0 on success or a negative error code on failure; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_WarpMouseInWindow\n */"
    },
    "SDL_WarpMouseInWindow": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 229,
        "column": 30
      },
      "comment": "/**\n * Move the mouse cursor to the given position within the window.\n *\n * This function generates a mouse motion event if relative mode is not\n * enabled. If relative mode is enabled, you can force mouse events for the\n * warp by setting the SDL_HINT_MOUSE_RELATIVE_WARP_MOTION hint.\n *\n * Note that this function will appear to succeed, but not actually move the\n * mouse when used over Microsoft Remote Desktop.\n *\n * \\param window the window to move the mouse into, or NULL for the current\n *               mouse focus\n * \\param x the x coordinate within the window\n * \\param y the y coordinate within the window\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_WarpMouseGlobal\n */"
    },
    "SDL_WasInit": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "flags",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 174,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_init.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_init.h",
        "line": 158,
        "column": 32
      },
      "comment": "/**\n * Get a mask of the specified subsystems which are currently initialized.\n *\n * \\param flags any of the flags used by SDL_Init(); see SDL_Init for details.\n * \\returns a mask of all initialized subsystems if \u0060flags\u0060 is 0, otherwise it\n *          returns the initialization status of the specified subsystems.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_Init\n * \\sa SDL_InitSubSystem\n */"
    },
    "SDL_wcscasecmp": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "str1",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "str2",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 887,
        "column": 29
      },
      "comment": "/**\n * Compare two null-terminated wide strings, case-insensitively.\n *\n * This will work with Unicode strings, using a technique called\n * \u0022case-folding\u0022 to handle the vast majority of case-sensitive human\n * languages regardless of system locale. It can deal with expanding values: a\n * German Eszett character can compare against two ASCII \u0027s\u0027 chars and be\n * considered a match, for example. A notable exception: it does not handle\n * the Turkish \u0027i\u0027 character; human language is complicated!\n *\n * Depending on your platform, \u0022wchar_t\u0022 might be 2 bytes, and expected to be\n * UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this\n * handles Unicode, it expects the string to be well-formed and not a\n * null-terminated string of arbitrary bytes. Characters that are not valid\n * UTF-16 (or UTF-32) are treated as Unicode character U\u002BFFFD (REPLACEMENT\n * CHARACTER), which is to say two strings of random bits may turn out to\n * match if they convert to the same amount of replacement characters.\n *\n * \\param str1 The first string to compare. NULL is not permitted!\n * \\param str2 The second string to compare. NULL is not permitted!\n * \\returns less than zero if str1 is \u0022less than\u0022 str2, greater than zero if\n *          str1 is \u0022greater than\u0022 str2, and zero if the strings match\n *          exactly.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_wcscmp": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "str1",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "str2",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 826,
        "column": 29
      },
      "comment": "/**\n * Compare two null-terminated wide strings.\n *\n * This only compares wchar_t values until it hits a null-terminating\n * character; it does not care if the string is well-formed UTF-16 (or UTF-32,\n * depending on your platform\u0027s wchar_t size), or uses valid Unicode values.\n *\n * \\param str1 The first string to compare. NULL is not permitted!\n * \\param str2 The second string to compare. NULL is not permitted!\n * \\returns less than zero if str1 is \u0022less than\u0022 str2, greater than zero if\n *          str1 is \u0022greater than\u0022 str2, and zero if the strings match\n *          exactly.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_wcsdup": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "wchar_t *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "wchar_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_wchar_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
            "line": 34,
            "column": 26,
            "isSystem": true
          },
          "inner_type": {
            "name": "__darwin_wchar_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_types.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
              "line": 82,
              "column": 33,
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "wstr",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 805,
        "column": 34
      }
    },
    "SDL_wcslcat": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_size_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
          "line": 31,
          "column": 32,
          "isSystem": true
        },
        "inner_type": {
          "name": "__darwin_size_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_types.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
            "line": 70,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "src",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 804,
        "column": 32
      }
    },
    "SDL_wcslcpy": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_size_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
          "line": 31,
          "column": 32,
          "isSystem": true
        },
        "inner_type": {
          "name": "__darwin_size_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_types.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
            "line": 70,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "dst",
          "type": {
            "name": "wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "src",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 803,
        "column": 32
      }
    },
    "SDL_wcslen": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_size_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
          "line": 31,
          "column": 32,
          "isSystem": true
        },
        "inner_type": {
          "name": "__darwin_size_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_types.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
            "line": 70,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "wstr",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 801,
        "column": 32
      }
    },
    "SDL_wcsncasecmp": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "str1",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "str2",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 929,
        "column": 29
      },
      "comment": "/**\n * Compare two wide strings, case-insensitively, up to a number of wchar_t.\n *\n * This will work with Unicode strings, using a technique called\n * \u0022case-folding\u0022 to handle the vast majority of case-sensitive human\n * languages regardless of system locale. It can deal with expanding values: a\n * German Eszett character can compare against two ASCII \u0027s\u0027 chars and be\n * considered a match, for example. A notable exception: it does not handle\n * the Turkish \u0027i\u0027 character; human language is complicated!\n *\n * Depending on your platform, \u0022wchar_t\u0022 might be 2 bytes, and expected to be\n * UTF-16 encoded (like Windows), or 4 bytes in UTF-32 format. Since this\n * handles Unicode, it expects the string to be well-formed and not a\n * null-terminated string of arbitrary bytes. Characters that are not valid\n * UTF-16 (or UTF-32) are treated as Unicode character U\u002BFFFD (REPLACEMENT\n * CHARACTER), which is to say two strings of random bits may turn out to\n * match if they convert to the same amount of replacement characters.\n *\n * Note that while this function might deal with variable-sized characters,\n * \u0060maxlen\u0060 specifies a _wchar_ limit! If the limit lands in the middle of a\n * multi-byte UTF-16 sequence, it may convert a portion of the final character\n * to one or more Unicode character U\u002BFFFD (REPLACEMENT CHARACTER) so as not\n * to overflow a buffer.\n *\n * \u0060maxlen\u0060 specifies a maximum number of wchar_t values to compare; if the\n * strings match to this number of wchar_t (or both have matched to a\n * null-terminator character before this number of bytes), they will be\n * considered equal.\n *\n * \\param str1 The first string to compare. NULL is not permitted!\n * \\param str2 The second string to compare. NULL is not permitted!\n * \\param maxlen The maximum number of wchar_t values to compare.\n * \\returns less than zero if str1 is \u0022less than\u0022 str2, greater than zero if\n *          str1 is \u0022greater than\u0022 str2, and zero if the strings match\n *          exactly.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_wcsncmp": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "str1",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "str2",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 857,
        "column": 29
      },
      "comment": "/**\n * Compare two wide strings up to a number of wchar_t values.\n *\n * This only compares wchar_t values; it does not care if the string is\n * well-formed UTF-16 (or UTF-32, depending on your platform\u0027s wchar_t size),\n * or uses valid Unicode values.\n *\n * Note that while this function is intended to be used with UTF-16 (or\n * UTF-32, depending on your platform\u0027s definition of wchar_t), it is\n * comparing raw wchar_t values and not Unicode codepoints: \u0060maxlen\u0060 specifies\n * a wchar_t limit! If the limit lands in the middle of a multi-wchar UTF-16\n * sequence, it will only compare a portion of the final character.\n *\n * \u0060maxlen\u0060 specifies a maximum number of wchar_t to compare; if the strings\n * match to this number of wide chars (or both have matched to a\n * null-terminator character before this count), they will be considered\n * equal.\n *\n * \\param str1 The first string to compare. NULL is not permitted!\n * \\param str2 The second string to compare. NULL is not permitted!\n * \\param maxlen The maximum number of wchar_t to compare.\n * \\returns less than zero if str1 is \u0022less than\u0022 str2, greater than zero if\n *          str1 is \u0022greater than\u0022 str2, and zero if the strings match\n *          exactly.\n *\n * \\threadsafety It is safe to call this function from any thread.\n *\n * \\since This function is available since SDL 3.0.0.\n */"
    },
    "SDL_wcsnlen": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "size_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_size_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
          "line": 31,
          "column": 32,
          "isSystem": true
        },
        "inner_type": {
          "name": "__darwin_size_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_types.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
            "line": 70,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "wstr",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 802,
        "column": 32
      }
    },
    "SDL_wcsnstr": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "wchar_t *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "wchar_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_wchar_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
            "line": 34,
            "column": 26,
            "isSystem": true
          },
          "inner_type": {
            "name": "__darwin_wchar_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_types.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
              "line": 82,
              "column": 33,
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "haystack",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "needle",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "maxlen",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "_size_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
            "line": 31,
            "column": 32,
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 807,
        "column": 34
      }
    },
    "SDL_wcsstr": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "wchar_t *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "wchar_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_wchar_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
            "line": 34,
            "column": 26,
            "isSystem": true
          },
          "inner_type": {
            "name": "__darwin_wchar_t",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "_types.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
              "line": 82,
              "column": 33,
              "isSystem": true
            },
            "inner_type": {
              "name": "int",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "haystack",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "needle",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 806,
        "column": 34
      }
    },
    "SDL_wcstol": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "long",
        "kind": "primitive",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "const wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "endp",
          "type": {
            "name": "wchar_t **",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t *",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_wchar_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                  "line": 34,
                  "column": 26,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "__darwin_wchar_t",
                  "kind": "typeAlias",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "_types.h",
                    "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                    "line": 82,
                    "column": 33,
                    "isSystem": true
                  },
                  "inner_type": {
                    "name": "int",
                    "kind": "primitive",
                    "size_of": 4,
                    "align_of": 4,
                    "location": {
                      "fileName": "",
                      "filePath": "",
                      "isSystem": true
                    }
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "base",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 931,
        "column": 30
      }
    },
    "SDL_WindowHasSurface": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 1690,
        "column": 34
      },
      "comment": "/**\n * Return whether the window has a surface associated with it.\n *\n * \\param window the window to query\n * \\returns SDL_TRUE if there is a surface associated with the window, or\n *          SDL_FALSE otherwise.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetWindowSurface\n */"
    },
    "SDL_WriteStorageFile": {
      "calling_convention": "cdecl",
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "storage",
          "type": {
            "name": "SDL_Storage *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Storage",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_storage.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
                "line": 78,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "path",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "source",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        },
        {
          "name": "length",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 187,
            "column": 18
          }
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 254,
        "column": 21
      },
      "comment": "/**\n * Synchronously write a file from client memory into a storage container.\n *\n * \\param storage a storage container to write to\n * \\param path the relative path of the file to write\n * \\param source a client-provided buffer to write from\n * \\param length the length of the source buffer\n * \\returns 0 if the file was written, a negative value otherwise; call\n *          SDL_GetError() for more information.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_GetStorageSpaceRemaining\n * \\sa SDL_ReadStorageFile\n * \\sa SDL_StorageReady\n */"
    }
  },
  "records": {
    "SDL_DialogFileFilter": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_dialog.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
            "line": 48,
            "column": 17
          }
        },
        {
          "name": "pattern",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_dialog.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
            "line": 49,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_dialog.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
        "line": 46,
        "column": 9
      },
      "comment": "/**\n * An entry for filters for file dialogs.\n *\n * \u0060name\u0060 is a user-readable label for the filter (for example, \u0022Office document\u0022).\n *\n * \u0060pattern\u0060 is a semicolon-separated list of file extensions (for example,\n * \u0022doc;docx\u0022).\n *\n * \\sa SDL_DialogFileCallback\n * \\sa SDL_ShowOpenFileDialog\n * \\sa SDL_ShowSaveFileDialog\n * \\sa SDL_ShowOpenFolderDialog\n */"
    },
    "SDL_DisplayMode": {
      "size_of": 32,
      "align_of": 8,
      "fields": [
        {
          "name": "displayID",
          "type": {
            "name": "SDL_DisplayID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 44,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 84,
            "column": 19
          },
          "comment": "/**\u003C the display this mode is associated with */"
        },
        {
          "name": "format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 85,
            "column": 25
          },
          "comment": "/**\u003C pixel format */"
        },
        {
          "name": "w",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 86,
            "column": 9
          },
          "comment": "/**\u003C width */"
        },
        {
          "name": "h",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 12,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 87,
            "column": 9
          },
          "comment": "/**\u003C height */"
        },
        {
          "name": "pixel_density",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 88,
            "column": 11
          },
          "comment": "/**\u003C scale converting size to pixels (e.g. a 1920x1080 mode with 2.0 scale would have 3840x2160 pixels) */"
        },
        {
          "name": "refresh_rate",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 89,
            "column": 11
          },
          "comment": "/**\u003C refresh rate (or zero for unspecified) */"
        },
        {
          "name": "driverdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 90,
            "column": 11
          },
          "comment": "/**\u003C driver-specific data, initialize to 0 */"
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 82,
        "column": 9
      },
      "comment": "/**\n *  The structure that defines a display mode\n *\n *  \\sa SDL_GetFullscreenDisplayModes()\n *  \\sa SDL_GetDesktopDisplayMode()\n *  \\sa SDL_GetCurrentDisplayMode()\n *  \\sa SDL_SetWindowFullscreenMode()\n *  \\sa SDL_GetWindowFullscreenMode()\n */"
    },
    "SDL_MessageBoxButtonData": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "flags",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_messagebox.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
            "line": 60,
            "column": 12
          },
          "comment": "/**\u003C ::SDL_MessageBoxButtonFlags */"
        },
        {
          "name": "buttonID",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_messagebox.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
            "line": 61,
            "column": 9
          },
          "comment": "/**\u003C User defined button id (value returned via SDL_ShowMessageBox) */"
        },
        {
          "name": "text",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_messagebox.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
            "line": 62,
            "column": 17
          },
          "comment": "/**\u003C The UTF-8 button text */"
        }
      ],
      "location": {
        "fileName": "SDL_messagebox.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
        "line": 58,
        "column": 9
      },
      "comment": "/**\n * Individual button data.\n */"
    },
    "SDL_MessageBoxColor": {
      "size_of": 3,
      "align_of": 1,
      "fields": [
        {
          "name": "r",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_messagebox.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
            "line": 70,
            "column": 11
          }
        },
        {
          "name": "g",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 1,
          "location": {
            "fileName": "SDL_messagebox.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
            "line": 70,
            "column": 14
          }
        },
        {
          "name": "b",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 2,
          "location": {
            "fileName": "SDL_messagebox.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
            "line": 70,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_messagebox.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
        "line": 68,
        "column": 9
      },
      "comment": "/**\n * RGB value used in a message box color scheme\n */"
    },
    "SDL_MessageBoxColorScheme": {
      "size_of": 15,
      "align_of": 1,
      "fields": [
        {
          "name": "colors",
          "type": {
            "name": "SDL_MessageBoxColor[5]",
            "kind": "array",
            "size_of": 15,
            "align_of": 8,
            "size_of_element": 3,
            "array_size": 5,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_MessageBoxColor",
              "kind": "typeAlias",
              "size_of": 3,
              "align_of": 1,
              "location": {
                "fileName": "SDL_messagebox.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
                "line": 71,
                "column": 3
              },
              "inner_type": {
                "name": "SDL_MessageBoxColor",
                "kind": "struct",
                "size_of": 3,
                "align_of": 1,
                "location": {
                  "fileName": "SDL_messagebox.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
                  "line": 68,
                  "column": 9
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_messagebox.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
            "line": 88,
            "column": 25
          }
        }
      ],
      "location": {
        "fileName": "SDL_messagebox.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
        "line": 86,
        "column": 9
      },
      "comment": "/**\n * A set of colors to use for message box dialogs\n */"
    },
    "SDL_MessageBoxData": {
      "size_of": 56,
      "align_of": 8,
      "fields": [
        {
          "name": "flags",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_messagebox.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
            "line": 96,
            "column": 12
          },
          "comment": "/**\u003C ::SDL_MessageBoxFlags */"
        },
        {
          "name": "window",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_messagebox.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
            "line": 97,
            "column": 17
          },
          "comment": "/**\u003C Parent window, can be NULL */"
        },
        {
          "name": "title",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_messagebox.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
            "line": 98,
            "column": 17
          },
          "comment": "/**\u003C UTF-8 title */"
        },
        {
          "name": "message",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_messagebox.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
            "line": 99,
            "column": 17
          },
          "comment": "/**\u003C UTF-8 message text */"
        },
        {
          "name": "numbuttons",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_messagebox.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
            "line": 101,
            "column": 9
          }
        },
        {
          "name": "buttons",
          "type": {
            "name": "const SDL_MessageBoxButtonData *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_MessageBoxButtonData",
              "kind": "typeAlias",
              "size_of": 16,
              "align_of": 8,
              "location": {
                "fileName": "SDL_messagebox.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
                "line": 63,
                "column": 3
              },
              "inner_type": {
                "name": "SDL_MessageBoxButtonData",
                "kind": "struct",
                "size_of": 16,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_messagebox.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
                  "line": 58,
                  "column": 9
                }
              }
            }
          },
          "offset_of": 40,
          "location": {
            "fileName": "SDL_messagebox.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
            "line": 102,
            "column": 37
          }
        },
        {
          "name": "colorScheme",
          "type": {
            "name": "const SDL_MessageBoxColorScheme *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_MessageBoxColorScheme",
              "kind": "typeAlias",
              "size_of": 15,
              "align_of": 1,
              "location": {
                "fileName": "SDL_messagebox.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
                "line": 89,
                "column": 3
              },
              "inner_type": {
                "name": "SDL_MessageBoxColorScheme",
                "kind": "struct",
                "size_of": 15,
                "align_of": 1,
                "location": {
                  "fileName": "SDL_messagebox.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
                  "line": 86,
                  "column": 9
                }
              }
            }
          },
          "offset_of": 48,
          "location": {
            "fileName": "SDL_messagebox.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
            "line": 104,
            "column": 38
          },
          "comment": "/**\u003C ::SDL_MessageBoxColorScheme, can be NULL to use system settings */"
        }
      ],
      "location": {
        "fileName": "SDL_messagebox.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_messagebox.h",
        "line": 94,
        "column": 9
      },
      "comment": "/**\n * MessageBox structure containing title, text, window, etc.\n */"
    },
    "struct SDL_AssertData": {
      "size_of": 48,
      "align_of": 8,
      "fields": [
        {
          "name": "always_ignore",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "SDL_assert.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
            "line": 130,
            "column": 9
          }
        },
        {
          "name": "trigger_count",
          "type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_assert.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
            "line": 131,
            "column": 18
          }
        },
        {
          "name": "condition",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_assert.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
            "line": 132,
            "column": 17
          }
        },
        {
          "name": "filename",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_assert.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
            "line": 133,
            "column": 17
          }
        },
        {
          "name": "linenum",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_assert.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
            "line": 134,
            "column": 9
          }
        },
        {
          "name": "function",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_assert.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
            "line": 135,
            "column": 17
          }
        },
        {
          "name": "next",
          "type": {
            "name": "const struct SDL_AssertData *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_AssertData",
              "kind": "struct",
              "size_of": 48,
              "align_of": 8,
              "location": {
                "fileName": "SDL_assert.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
                "line": 128,
                "column": 16
              }
            }
          },
          "offset_of": 40,
          "location": {
            "fileName": "SDL_assert.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
            "line": 136,
            "column": 34
          }
        }
      ],
      "location": {
        "fileName": "SDL_assert.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
        "line": 128,
        "column": 16
      }
    },
    "struct SDL_AtomicInt": {
      "size_of": 4,
      "align_of": 4,
      "fields": [
        {
          "name": "value",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "SDL_atomic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
            "line": 270,
            "column": 36
          }
        }
      ],
      "location": {
        "fileName": "SDL_atomic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
        "line": 270,
        "column": 16
      },
      "comment": "/**\n * A type representing an atomic integer value.\n *\n * It is a struct so people don\u0027t accidentally use numeric operations on it.\n */"
    },
    "struct SDL_AudioDeviceEvent": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 574,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_AUDIO_DEVICE_ADDED, or ::SDL_EVENT_AUDIO_DEVICE_REMOVED, or ::SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 575,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 576,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_AudioDeviceID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_audio.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_audio.h",
              "line": 144,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 577,
            "column": 23
          },
          "comment": "/**\u003C SDL_AudioDeviceID for the device being added or removed or changing */"
        },
        {
          "name": "iscapture",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 578,
            "column": 11
          },
          "comment": "/**\u003C zero if an output device, non-zero if a capture device. */"
        },
        {
          "name": "padding1",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 21,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 579,
            "column": 11
          }
        },
        {
          "name": "padding2",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 22,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 580,
            "column": 11
          }
        },
        {
          "name": "padding3",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 23,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 581,
            "column": 11
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 572,
        "column": 16
      },
      "comment": "/**\n *  Audio device event structure (event.adevice.*)\n */"
    },
    "struct SDL_CameraDeviceEvent": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 589,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_CAMERA_DEVICE_ADDED, ::SDL_EVENT_CAMERA_DEVICE_REMOVED, ::SDL_EVENT_CAMERA_DEVICE_APPROVED, ::SDL_EVENT_CAMERA_DEVICE_DENIED */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 590,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 591,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_CameraDeviceID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_camera.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
              "line": 48,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 592,
            "column": 24
          },
          "comment": "/**\u003C SDL_CameraDeviceID for the device being added or removed or changing */"
        },
        {
          "name": "padding1",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 593,
            "column": 11
          }
        },
        {
          "name": "padding2",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 21,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 594,
            "column": 11
          }
        },
        {
          "name": "padding3",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 22,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 595,
            "column": 11
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 587,
        "column": 16
      },
      "comment": "/**\n *  Camera device event structure (event.cdevice.*)\n */"
    },
    "struct SDL_CameraSpec": {
      "size_of": 20,
      "align_of": 4,
      "fields": [
        {
          "name": "format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_camera.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
            "line": 66,
            "column": 25
          },
          "comment": "/**\u003C Frame format */"
        },
        {
          "name": "width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_camera.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
            "line": 67,
            "column": 9
          },
          "comment": "/**\u003C Frame width */"
        },
        {
          "name": "height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_camera.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
            "line": 68,
            "column": 9
          },
          "comment": "/**\u003C Frame height */"
        },
        {
          "name": "interval_numerator",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 12,
          "location": {
            "fileName": "SDL_camera.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
            "line": 69,
            "column": 9
          },
          "comment": "/**\u003C Frame rate numerator ((dom / num) == fps, (num / dom) == duration) */"
        },
        {
          "name": "interval_denominator",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_camera.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
            "line": 70,
            "column": 9
          },
          "comment": "/**\u003C Frame rate demoninator ((dom / num) == fps, (num / dom) == duration) */"
        }
      ],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 64,
        "column": 16
      },
      "comment": "/**\n *  SDL_CameraSpec structure\n *\n * \\sa SDL_GetCameraDeviceSupportedFormats\n * \\sa SDL_GetCameraFormat\n *\n */"
    },
    "struct SDL_ClipboardEvent": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 695,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_CLIPBOARD_UPDATE */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 696,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 697,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 693,
        "column": 16
      },
      "comment": "/**\n * An event triggered when the clipboard contents have changed (event.clipboard.*)\n */"
    },
    "struct SDL_Color": {
      "size_of": 4,
      "align_of": 1,
      "fields": [
        {
          "name": "r",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 669,
            "column": 11
          }
        },
        {
          "name": "g",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 1,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 670,
            "column": 11
          }
        },
        {
          "name": "b",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 2,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 671,
            "column": 11
          }
        },
        {
          "name": "a",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 3,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 672,
            "column": 11
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 667,
        "column": 16
      },
      "comment": "/**\n * The bits of this structure can be directly reinterpreted as an integer-packed\n * color which uses the SDL_PIXELFORMAT_RGBA32 format (SDL_PIXELFORMAT_ABGR8888\n * on little-endian systems and SDL_PIXELFORMAT_RGBA8888 on big-endian systems).\n */"
    },
    "struct SDL_CommonEvent": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 247,
            "column": 12
          },
          "comment": "/**\u003C Event type, shared with all events, Uint32 to cover user events which are not in the SDL_EventType enumeration */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 248,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 249,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 245,
        "column": 16
      },
      "comment": "/**\n *  Fields shared by every event\n */"
    },
    "struct SDL_DateTime": {
      "size_of": 36,
      "align_of": 4,
      "fields": [
        {
          "name": "year",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "SDL_time.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
            "line": 45,
            "column": 9
          },
          "comment": "/**\u003C Year */"
        },
        {
          "name": "month",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_time.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
            "line": 46,
            "column": 9
          },
          "comment": "/**\u003C Month [01-12] */"
        },
        {
          "name": "day",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_time.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
            "line": 47,
            "column": 9
          },
          "comment": "/**\u003C Day of the month [01-31] */"
        },
        {
          "name": "hour",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 12,
          "location": {
            "fileName": "SDL_time.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
            "line": 48,
            "column": 9
          },
          "comment": "/**\u003C Hour [0-23] */"
        },
        {
          "name": "minute",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_time.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
            "line": 49,
            "column": 9
          },
          "comment": "/**\u003C Minute [0-59] */"
        },
        {
          "name": "second",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_time.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
            "line": 50,
            "column": 9
          },
          "comment": "/**\u003C Seconds [0-60] */"
        },
        {
          "name": "nanosecond",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_time.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
            "line": 51,
            "column": 9
          },
          "comment": "/**\u003C Nanoseconds [0-999999999] */"
        },
        {
          "name": "day_of_week",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 28,
          "location": {
            "fileName": "SDL_time.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
            "line": 52,
            "column": 9
          },
          "comment": "/**\u003C Day of the week [0-6] (0 being Sunday) */"
        },
        {
          "name": "utc_offset",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_time.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
            "line": 53,
            "column": 9
          },
          "comment": "/**\u003C Seconds east of UTC */"
        }
      ],
      "location": {
        "fileName": "SDL_time.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
        "line": 43,
        "column": 16
      },
      "comment": "/**\n * A structure holding a calendar date and time broken down into its components.\n */"
    },
    "struct SDL_DisplayEvent": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 257,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_DISPLAYEVENT_* */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 258,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 259,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "displayID",
          "type": {
            "name": "SDL_DisplayID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 44,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 260,
            "column": 19
          },
          "comment": "/**\u003C The associated display */"
        },
        {
          "name": "data1",
          "type": {
            "name": "Sint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 168,
              "column": 17
            },
            "inner_type": {
              "name": "int32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_int32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 261,
            "column": 12
          },
          "comment": "/**\u003C event dependent data */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 255,
        "column": 16
      },
      "comment": "/**\n *  Display state change event data (event.display.*)\n */"
    },
    "struct SDL_DropEvent": {
      "size_of": 48,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 680,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_DROP_BEGIN or ::SDL_EVENT_DROP_FILE or ::SDL_EVENT_DROP_TEXT or ::SDL_EVENT_DROP_COMPLETE or ::SDL_EVENT_DROP_POSITION */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 681,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 682,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "windowID",
          "type": {
            "name": "SDL_WindowID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 683,
            "column": 18
          },
          "comment": "/**\u003C The window that was dropped on, if any */"
        },
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 684,
            "column": 11
          },
          "comment": "/**\u003C X coordinate, relative to window (not on begin) */"
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 685,
            "column": 11
          },
          "comment": "/**\u003C Y coordinate, relative to window (not on begin) */"
        },
        {
          "name": "source",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 686,
            "column": 11
          },
          "comment": "/**\u003C The source app that sent this drop event, or NULL if that isn\u0027t available */"
        },
        {
          "name": "data",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 40,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 687,
            "column": 11
          },
          "comment": "/**\u003C The text for SDL_EVENT_DROP_TEXT and the file name for SDL_EVENT_DROP_FILE, NULL for other events */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 678,
        "column": 16
      },
      "comment": "/**\n *  An event used to drop text or request a file open by the system (event.drop.*)\n *\n *  The \u0060data\u0060 is owned by SDL and should be copied if the application\n *  wants to hold onto it beyond the scope of handling this event.\n */"
    },
    "struct SDL_FColor": {
      "size_of": 16,
      "align_of": 4,
      "fields": [
        {
          "name": "r",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 682,
            "column": 11
          }
        },
        {
          "name": "g",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 683,
            "column": 11
          }
        },
        {
          "name": "b",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 684,
            "column": 11
          }
        },
        {
          "name": "a",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 12,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 685,
            "column": 11
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 680,
        "column": 16
      },
      "comment": "/**\n * The bits of this structure can be directly reinterpreted as a float-packed\n * color which uses the SDL_PIXELFORMAT_RGBA128_FLOAT format\n */"
    },
    "struct SDL_Finger": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "id",
          "type": {
            "name": "SDL_FingerID",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_touch.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint64",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 187,
                "column": 18
              },
              "inner_type": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_uint64_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                  "line": 31,
                  "column": 28,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_touch.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
            "line": 54,
            "column": 18
          }
        },
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_touch.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
            "line": 55,
            "column": 11
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 12,
          "location": {
            "fileName": "SDL_touch.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
            "line": 56,
            "column": 11
          }
        },
        {
          "name": "pressure",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_touch.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
            "line": 57,
            "column": 11
          }
        }
      ],
      "location": {
        "fileName": "SDL_touch.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
        "line": 52,
        "column": 16
      }
    },
    "struct SDL_FPoint": {
      "size_of": 8,
      "align_of": 4,
      "fields": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "SDL_rect.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
            "line": 60,
            "column": 11
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_rect.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
            "line": 61,
            "column": 11
          }
        }
      ],
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 58,
        "column": 16
      },
      "comment": "/**\n * The structure that defines a point (floating point)\n *\n * \\sa SDL_GetRectEnclosingPointsFloat\n * \\sa SDL_PointInRectFloat\n */"
    },
    "struct SDL_FRect": {
      "size_of": 16,
      "align_of": 4,
      "fields": [
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "SDL_rect.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
            "line": 98,
            "column": 11
          }
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_rect.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
            "line": 99,
            "column": 11
          }
        },
        {
          "name": "w",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_rect.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
            "line": 100,
            "column": 11
          }
        },
        {
          "name": "h",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 12,
          "location": {
            "fileName": "SDL_rect.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
            "line": 101,
            "column": 11
          }
        }
      ],
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 96,
        "column": 16
      },
      "comment": "/**\n * A rectangle, with the origin at the upper left (floating point).\n *\n * \\sa SDL_RectEmptyFloat\n * \\sa SDL_RectsEqualFloat\n * \\sa SDL_RectsEqualEpsilon\n * \\sa SDL_HasRectIntersectionFloat\n * \\sa SDL_GetRectIntersectionFloat\n * \\sa SDL_GetRectAndLineIntersectionFloat\n * \\sa SDL_GetRectUnionFloat\n * \\sa SDL_GetRectEnclosingPointsFloat\n * \\sa SDL_PointInRectFloat\n */"
    },
    "struct SDL_GamepadAxisEvent": {
      "size_of": 32,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 499,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_GAMEPAD_AXIS_MOTION */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 500,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 501,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 502,
            "column": 20
          },
          "comment": "/**\u003C The joystick instance id */"
        },
        {
          "name": "axis",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 503,
            "column": 11
          },
          "comment": "/**\u003C The gamepad axis (SDL_GamepadAxis) */"
        },
        {
          "name": "padding1",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 21,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 504,
            "column": 11
          }
        },
        {
          "name": "padding2",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 22,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 505,
            "column": 11
          }
        },
        {
          "name": "padding3",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 23,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 506,
            "column": 11
          }
        },
        {
          "name": "value",
          "type": {
            "name": "Sint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 156,
              "column": 17
            },
            "inner_type": {
              "name": "int16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_int16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 507,
            "column": 12
          },
          "comment": "/**\u003C The axis value (range: -32768 to 32767) */"
        },
        {
          "name": "padding4",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 26,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 508,
            "column": 12
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 497,
        "column": 16
      },
      "comment": "/**\n *  Gamepad axis motion event structure (event.gaxis.*)\n */"
    },
    "struct SDL_GamepadBinding": {
      "size_of": 32,
      "align_of": 4,
      "fields": [
        {
          "name": "input_type",
          "type": {
            "name": "SDL_GamepadBindingType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 179,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadBindingType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 173,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 183,
            "column": 28
          }
        },
        {
          "name": "input",
          "type": {
            "name": "union SDL_GamepadBinding::(unnamed at /Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h:184:5)",
            "kind": "union",
            "size_of": 12,
            "align_of": 4,
            "is_snonymous": true,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 184,
              "column": 5
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 201,
            "column": 7
          }
        },
        {
          "name": "output_type",
          "type": {
            "name": "SDL_GamepadBindingType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 179,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadBindingType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 173,
                "column": 9
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 203,
            "column": 28
          }
        },
        {
          "name": "output",
          "type": {
            "name": "union SDL_GamepadBinding::(unnamed at /Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h:204:5)",
            "kind": "union",
            "size_of": 12,
            "align_of": 4,
            "is_snonymous": true,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 204,
              "column": 5
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 215,
            "column": 7
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 181,
        "column": 16
      }
    },
    "struct SDL_GamepadBinding::(unnamed at /Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h:188:9)": {
      "size_of": 12,
      "align_of": 4,
      "fields": [
        {
          "name": "axis",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 190,
            "column": 17
          }
        },
        {
          "name": "axis_min",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 191,
            "column": 17
          }
        },
        {
          "name": "axis_max",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 192,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 188,
        "column": 9
      }
    },
    "struct SDL_GamepadBinding::(unnamed at /Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h:195:9)": {
      "size_of": 8,
      "align_of": 4,
      "fields": [
        {
          "name": "hat",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 197,
            "column": 17
          }
        },
        {
          "name": "hat_mask",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 198,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 195,
        "column": 9
      }
    },
    "struct SDL_GamepadBinding::(unnamed at /Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h:208:9)": {
      "size_of": 12,
      "align_of": 4,
      "fields": [
        {
          "name": "axis",
          "type": {
            "name": "SDL_GamepadAxis",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 171,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadAxis",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 161,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 210,
            "column": 29
          }
        },
        {
          "name": "axis_min",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 211,
            "column": 17
          }
        },
        {
          "name": "axis_max",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 212,
            "column": 17
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 208,
        "column": 9
      }
    },
    "struct SDL_GamepadButtonEvent": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 517,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_GAMEPAD_BUTTON_DOWN or ::SDL_EVENT_GAMEPAD_BUTTON_UP */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 518,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 519,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 520,
            "column": 20
          },
          "comment": "/**\u003C The joystick instance id */"
        },
        {
          "name": "button",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 521,
            "column": 11
          },
          "comment": "/**\u003C The gamepad button (SDL_GamepadButton) */"
        },
        {
          "name": "state",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 21,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 522,
            "column": 11
          },
          "comment": "/**\u003C ::SDL_PRESSED or ::SDL_RELEASED */"
        },
        {
          "name": "padding1",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 22,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 523,
            "column": 11
          }
        },
        {
          "name": "padding2",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 23,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 524,
            "column": 11
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 515,
        "column": 16
      },
      "comment": "/**\n *  Gamepad button event structure (event.gbutton.*)\n */"
    },
    "struct SDL_GamepadDeviceEvent": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 533,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_GAMEPAD_ADDED, ::SDL_EVENT_GAMEPAD_REMOVED, or ::SDL_EVENT_GAMEPAD_REMAPPED, ::SDL_EVENT_GAMEPAD_UPDATE_COMPLETE or ::SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 534,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 535,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 536,
            "column": 20
          },
          "comment": "/**\u003C The joystick instance id */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 531,
        "column": 16
      },
      "comment": "/**\n *  Gamepad device event structure (event.gdevice.*)\n */"
    },
    "struct SDL_GamepadSensorEvent": {
      "size_of": 48,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 560,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_GAMEPAD_SENSOR_UPDATE */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 561,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 562,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 563,
            "column": 20
          },
          "comment": "/**\u003C The joystick instance id */"
        },
        {
          "name": "sensor",
          "type": {
            "name": "Sint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 168,
              "column": 17
            },
            "inner_type": {
              "name": "int32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_int32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 564,
            "column": 12
          },
          "comment": "/**\u003C The type of the sensor, one of the values of ::SDL_SensorType */"
        },
        {
          "name": "data",
          "type": {
            "name": "float[3]",
            "kind": "array",
            "size_of": 12,
            "align_of": 8,
            "size_of_element": 4,
            "array_size": 3,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 565,
            "column": 11
          },
          "comment": "/**\u003C Up to 3 values from the sensor, as defined in SDL_sensor.h */"
        },
        {
          "name": "sensor_timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 40,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 566,
            "column": 12
          },
          "comment": "/**\u003C The timestamp of the sensor reading in nanoseconds, not necessarily synchronized with the system clock */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 558,
        "column": 16
      },
      "comment": "/**\n *  Gamepad sensor event structure (event.gsensor.*)\n */"
    },
    "struct SDL_GamepadTouchpadEvent": {
      "size_of": 40,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 544,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN or ::SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION or ::SDL_EVENT_GAMEPAD_TOUCHPAD_UP */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 545,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 546,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 547,
            "column": 20
          },
          "comment": "/**\u003C The joystick instance id */"
        },
        {
          "name": "touchpad",
          "type": {
            "name": "Sint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 168,
              "column": 17
            },
            "inner_type": {
              "name": "int32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_int32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 548,
            "column": 12
          },
          "comment": "/**\u003C The index of the touchpad */"
        },
        {
          "name": "finger",
          "type": {
            "name": "Sint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 168,
              "column": 17
            },
            "inner_type": {
              "name": "int32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_int32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 549,
            "column": 12
          },
          "comment": "/**\u003C The index of the finger on the touchpad */"
        },
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 28,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 550,
            "column": 11
          },
          "comment": "/**\u003C Normalized in the range 0...1 with 0 being on the left */"
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 551,
            "column": 11
          },
          "comment": "/**\u003C Normalized in the range 0...1 with 0 being at the top */"
        },
        {
          "name": "pressure",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 36,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 552,
            "column": 11
          },
          "comment": "/**\u003C Normalized in the range 0...1 */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 542,
        "column": 16
      },
      "comment": "/**\n *  Gamepad touchpad event structure (event.gtouchpad.*)\n */"
    },
    "struct SDL_GUID": {
      "size_of": 16,
      "align_of": 1,
      "fields": [
        {
          "name": "data",
          "type": {
            "name": "Uint8[16]",
            "kind": "array",
            "size_of": 16,
            "align_of": 8,
            "size_of_element": 1,
            "array_size": 16,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_guid.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
            "line": 56,
            "column": 11
          }
        }
      ],
      "location": {
        "fileName": "SDL_guid.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
        "line": 55,
        "column": 16
      },
      "comment": "/**\n * An SDL_GUID is a 128-bit identifier for an input device that\n *   identifies that device across runs of SDL programs on the same\n *   platform.  If the device is detached and then re-attached to a\n *   different port, or if the base system is rebooted, the device\n *   should still report the same GUID.\n *\n * GUIDs are as precise as possible but are not guaranteed to\n *   distinguish physically distinct but equivalent devices.  For\n *   example, two game controllers from the same vendor with the same\n *   product ID and revision may have the same GUID.\n *\n * GUIDs may be platform-dependent (i.e., the same device may report\n *   different GUIDs on different operating systems).\n */"
    },
    "struct SDL_HapticCondition": {
      "size_of": 68,
      "align_of": 4,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 633,
            "column": 12
          },
          "comment": "/**\u003C ::SDL_HAPTIC_SPRING, ::SDL_HAPTIC_DAMPER,\n                                 ::SDL_HAPTIC_INERTIA or ::SDL_HAPTIC_FRICTION */"
        },
        {
          "name": "direction",
          "type": {
            "name": "SDL_HapticDirection",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 4,
            "location": {
              "fileName": "SDL_haptic.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
              "line": 482,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_HapticDirection",
              "kind": "struct",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 478,
                "column": 16
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 635,
            "column": 25
          },
          "comment": "/**\u003C Direction of the effect - Not used ATM. */"
        },
        {
          "name": "length",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 638,
            "column": 12
          },
          "comment": "/**\u003C Duration of the effect. */"
        },
        {
          "name": "delay",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 639,
            "column": 12
          },
          "comment": "/**\u003C Delay before starting the effect. */"
        },
        {
          "name": "button",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 26,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 642,
            "column": 12
          },
          "comment": "/**\u003C Button that triggers the effect. */"
        },
        {
          "name": "interval",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 28,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 643,
            "column": 12
          },
          "comment": "/**\u003C How soon it can be triggered again after button. */"
        },
        {
          "name": "right_sat",
          "type": {
            "name": "Uint16[3]",
            "kind": "array",
            "size_of": 6,
            "align_of": 8,
            "size_of_element": 2,
            "array_size": 3,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint16",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 162,
                "column": 18
              },
              "inner_type": {
                "name": "uint16_t",
                "kind": "typeAlias",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "_uint16_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                  "line": 31,
                  "column": 24,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned short",
                  "kind": "primitive",
                  "size_of": 2,
                  "align_of": 2,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 30,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 646,
            "column": 12
          },
          "comment": "/**\u003C Level when joystick is to the positive side; max 0xFFFF. */"
        },
        {
          "name": "left_sat",
          "type": {
            "name": "Uint16[3]",
            "kind": "array",
            "size_of": 6,
            "align_of": 8,
            "size_of_element": 2,
            "array_size": 3,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint16",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 162,
                "column": 18
              },
              "inner_type": {
                "name": "uint16_t",
                "kind": "typeAlias",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "_uint16_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                  "line": 31,
                  "column": 24,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned short",
                  "kind": "primitive",
                  "size_of": 2,
                  "align_of": 2,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 36,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 647,
            "column": 12
          },
          "comment": "/**\u003C Level when joystick is to the negative side; max 0xFFFF. */"
        },
        {
          "name": "right_coeff",
          "type": {
            "name": "Sint16[3]",
            "kind": "array",
            "size_of": 6,
            "align_of": 8,
            "size_of_element": 2,
            "array_size": 3,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Sint16",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 156,
                "column": 17
              },
              "inner_type": {
                "name": "int16_t",
                "kind": "typeAlias",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "_int16_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
                  "line": 30,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "short",
                  "kind": "primitive",
                  "size_of": 2,
                  "align_of": 2,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 42,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 648,
            "column": 12
          },
          "comment": "/**\u003C How fast to increase the force towards the positive side. */"
        },
        {
          "name": "left_coeff",
          "type": {
            "name": "Sint16[3]",
            "kind": "array",
            "size_of": 6,
            "align_of": 8,
            "size_of_element": 2,
            "array_size": 3,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Sint16",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 156,
                "column": 17
              },
              "inner_type": {
                "name": "int16_t",
                "kind": "typeAlias",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "_int16_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
                  "line": 30,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "short",
                  "kind": "primitive",
                  "size_of": 2,
                  "align_of": 2,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 48,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 649,
            "column": 12
          },
          "comment": "/**\u003C How fast to increase the force towards the negative side. */"
        },
        {
          "name": "deadband",
          "type": {
            "name": "Uint16[3]",
            "kind": "array",
            "size_of": 6,
            "align_of": 8,
            "size_of_element": 2,
            "array_size": 3,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint16",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 162,
                "column": 18
              },
              "inner_type": {
                "name": "uint16_t",
                "kind": "typeAlias",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "_uint16_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                  "line": 31,
                  "column": 24,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned short",
                  "kind": "primitive",
                  "size_of": 2,
                  "align_of": 2,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 54,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 650,
            "column": 12
          },
          "comment": "/**\u003C Size of the dead zone; max 0xFFFF: whole axis-range when 0-centered. */"
        },
        {
          "name": "center",
          "type": {
            "name": "Sint16[3]",
            "kind": "array",
            "size_of": 6,
            "align_of": 8,
            "size_of_element": 2,
            "array_size": 3,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Sint16",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 156,
                "column": 17
              },
              "inner_type": {
                "name": "int16_t",
                "kind": "typeAlias",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "_int16_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
                  "line": 30,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "short",
                  "kind": "primitive",
                  "size_of": 2,
                  "align_of": 2,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 60,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 651,
            "column": 12
          },
          "comment": "/**\u003C Position of the dead zone. */"
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 630,
        "column": 16
      },
      "comment": "/**\n *  A structure containing a template for a Condition effect.\n *\n *  The struct handles the following effects:\n *   - ::SDL_HAPTIC_SPRING: Effect based on axes position.\n *   - ::SDL_HAPTIC_DAMPER: Effect based on axes velocity.\n *   - ::SDL_HAPTIC_INERTIA: Effect based on axes acceleration.\n *   - ::SDL_HAPTIC_FRICTION: Effect based on axes movement.\n *\n *  Direction is handled by condition internals instead of a direction member.\n *  The condition effect specific members have three parameters.  The first\n *  refers to the X axis, the second refers to the Y axis and the third\n *  refers to the Z axis.  The right terms refer to the positive side of the\n *  axis and the left terms refer to the negative side of the axis.  Please\n *  refer to the ::SDL_HapticDirection diagram for which side is positive and\n *  which is negative.\n *\n *  \\sa SDL_HapticDirection\n *  \\sa SDL_HAPTIC_SPRING\n *  \\sa SDL_HAPTIC_DAMPER\n *  \\sa SDL_HAPTIC_INERTIA\n *  \\sa SDL_HAPTIC_FRICTION\n *  \\sa SDL_HapticEffect\n */"
    },
    "struct SDL_HapticConstant": {
      "size_of": 40,
      "align_of": 4,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 499,
            "column": 12
          },
          "comment": "/**\u003C ::SDL_HAPTIC_CONSTANT */"
        },
        {
          "name": "direction",
          "type": {
            "name": "SDL_HapticDirection",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 4,
            "location": {
              "fileName": "SDL_haptic.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
              "line": 482,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_HapticDirection",
              "kind": "struct",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 478,
                "column": 16
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 500,
            "column": 25
          },
          "comment": "/**\u003C Direction of the effect. */"
        },
        {
          "name": "length",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 503,
            "column": 12
          },
          "comment": "/**\u003C Duration of the effect. */"
        },
        {
          "name": "delay",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 504,
            "column": 12
          },
          "comment": "/**\u003C Delay before starting the effect. */"
        },
        {
          "name": "button",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 26,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 507,
            "column": 12
          },
          "comment": "/**\u003C Button that triggers the effect. */"
        },
        {
          "name": "interval",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 28,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 508,
            "column": 12
          },
          "comment": "/**\u003C How soon it can be triggered again after button. */"
        },
        {
          "name": "level",
          "type": {
            "name": "Sint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 156,
              "column": 17
            },
            "inner_type": {
              "name": "int16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_int16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 30,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 511,
            "column": 12
          },
          "comment": "/**\u003C Strength of the constant effect. */"
        },
        {
          "name": "attack_length",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 514,
            "column": 12
          },
          "comment": "/**\u003C Duration of the attack. */"
        },
        {
          "name": "attack_level",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 34,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 515,
            "column": 12
          },
          "comment": "/**\u003C Level at the start of the attack. */"
        },
        {
          "name": "fade_length",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 36,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 516,
            "column": 12
          },
          "comment": "/**\u003C Duration of the fade. */"
        },
        {
          "name": "fade_level",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 38,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 517,
            "column": 12
          },
          "comment": "/**\u003C Level at the end of the fade. */"
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 496,
        "column": 16
      },
      "comment": "/**\n *  A structure containing a template for a Constant effect.\n *\n *  This struct is exclusively for the ::SDL_HAPTIC_CONSTANT effect.\n *\n *  A constant effect applies a constant force in the specified direction\n *  to the joystick.\n *\n *  \\sa SDL_HAPTIC_CONSTANT\n *  \\sa SDL_HapticEffect\n */"
    },
    "struct SDL_HapticCustom": {
      "size_of": 56,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 735,
            "column": 12
          },
          "comment": "/**\u003C ::SDL_HAPTIC_CUSTOM */"
        },
        {
          "name": "direction",
          "type": {
            "name": "SDL_HapticDirection",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 4,
            "location": {
              "fileName": "SDL_haptic.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
              "line": 482,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_HapticDirection",
              "kind": "struct",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 478,
                "column": 16
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 736,
            "column": 25
          },
          "comment": "/**\u003C Direction of the effect. */"
        },
        {
          "name": "length",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 739,
            "column": 12
          },
          "comment": "/**\u003C Duration of the effect. */"
        },
        {
          "name": "delay",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 740,
            "column": 12
          },
          "comment": "/**\u003C Delay before starting the effect. */"
        },
        {
          "name": "button",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 26,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 743,
            "column": 12
          },
          "comment": "/**\u003C Button that triggers the effect. */"
        },
        {
          "name": "interval",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 28,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 744,
            "column": 12
          },
          "comment": "/**\u003C How soon it can be triggered again after button. */"
        },
        {
          "name": "channels",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 30,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 747,
            "column": 11
          },
          "comment": "/**\u003C Axes to use, minimum of one. */"
        },
        {
          "name": "period",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 748,
            "column": 12
          },
          "comment": "/**\u003C Sample periods. */"
        },
        {
          "name": "samples",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 34,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 749,
            "column": 12
          },
          "comment": "/**\u003C Amount of samples. */"
        },
        {
          "name": "data",
          "type": {
            "name": "Uint16 *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint16",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 162,
                "column": 18
              },
              "inner_type": {
                "name": "uint16_t",
                "kind": "typeAlias",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "_uint16_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                  "line": 31,
                  "column": 24,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned short",
                  "kind": "primitive",
                  "size_of": 2,
                  "align_of": 2,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 40,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 750,
            "column": 13
          },
          "comment": "/**\u003C Should contain channels*samples items. */"
        },
        {
          "name": "attack_length",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 48,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 753,
            "column": 12
          },
          "comment": "/**\u003C Duration of the attack. */"
        },
        {
          "name": "attack_level",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 50,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 754,
            "column": 12
          },
          "comment": "/**\u003C Level at the start of the attack. */"
        },
        {
          "name": "fade_length",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 52,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 755,
            "column": 12
          },
          "comment": "/**\u003C Duration of the fade. */"
        },
        {
          "name": "fade_level",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 54,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 756,
            "column": 12
          },
          "comment": "/**\u003C Level at the end of the fade. */"
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 732,
        "column": 16
      },
      "comment": "/**\n *  A structure containing a template for the ::SDL_HAPTIC_CUSTOM effect.\n *\n *  This struct is exclusively for the ::SDL_HAPTIC_CUSTOM effect.\n *\n *  A custom force feedback effect is much like a periodic effect, where the\n *  application can define its exact shape.  You will have to allocate the\n *  data yourself.  Data should consist of channels * samples Uint16 samples.\n *\n *  If channels is one, the effect is rotated using the defined direction.\n *  Otherwise it uses the samples in data for the different axes.\n *\n *  \\sa SDL_HAPTIC_CUSTOM\n *  \\sa SDL_HapticEffect\n */"
    },
    "struct SDL_HapticDirection": {
      "size_of": 16,
      "align_of": 4,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 480,
            "column": 11
          },
          "comment": "/**\u003C The type of encoding. */"
        },
        {
          "name": "dir",
          "type": {
            "name": "Sint32[3]",
            "kind": "array",
            "size_of": 12,
            "align_of": 8,
            "size_of_element": 4,
            "array_size": 3,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Sint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 168,
                "column": 17
              },
              "inner_type": {
                "name": "int32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_int32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                  "line": 30,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 481,
            "column": 12
          },
          "comment": "/**\u003C The encoded direction. */"
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 478,
        "column": 16
      },
      "comment": "/**\n *  Structure that represents a haptic direction.\n *\n *  This is the direction where the force comes from,\n *  instead of the direction in which the force is exerted.\n *\n *  Directions can be specified by:\n *   - ::SDL_HAPTIC_POLAR : Specified by polar coordinates.\n *   - ::SDL_HAPTIC_CARTESIAN : Specified by cartesian coordinates.\n *   - ::SDL_HAPTIC_SPHERICAL : Specified by spherical coordinates.\n *\n *  Cardinal directions of the haptic device are relative to the positioning\n *  of the device.  North is considered to be away from the user.\n *\n *  The following diagram represents the cardinal directions:\n *  \\verbatim\n                 .--.\n                 |__| .-------.\n                 |=.| |.-----.|\n                 |--| ||     ||\n                 |  | |\u0027-----\u0027|\n                 |__|~\u0027)_____(\u0027\n                   [ COMPUTER ]\n\n\n                     North (0,-1)\n                         ^\n                         |\n                         |\n   (-1,0)  West \u003C----[ HAPTIC ]----\u003E East (1,0)\n                         |\n                         |\n                         v\n                      South (0,1)\n\n\n                      [ USER ]\n                        \\|||/\n                        (o o)\n                  ---ooO-(_)-Ooo---\n    \\endverbatim\n *\n *  If type is ::SDL_HAPTIC_POLAR, direction is encoded by hundredths of a\n *  degree starting north and turning clockwise.  ::SDL_HAPTIC_POLAR only uses\n *  the first \\c dir parameter.  The cardinal directions would be:\n *   - North: 0 (0 degrees)\n *   - East: 9000 (90 degrees)\n *   - South: 18000 (180 degrees)\n *   - West: 27000 (270 degrees)\n *\n *  If type is ::SDL_HAPTIC_CARTESIAN, direction is encoded by three positions\n *  (X axis, Y axis and Z axis (with 3 axes)).  ::SDL_HAPTIC_CARTESIAN uses\n *  the first three \\c dir parameters.  The cardinal directions would be:\n *   - North:  0,-1, 0\n *   - East:   1, 0, 0\n *   - South:  0, 1, 0\n *   - West:  -1, 0, 0\n *\n *  The Z axis represents the height of the effect if supported, otherwise\n *  it\u0027s unused.  In cartesian encoding (1, 2) would be the same as (2, 4), you\n *  can use any multiple you want, only the direction matters.\n *\n *  If type is ::SDL_HAPTIC_SPHERICAL, direction is encoded by two rotations.\n *  The first two \\c dir parameters are used.  The \\c dir parameters are as\n *  follows (all values are in hundredths of degrees):\n *   - Degrees from (1, 0) rotated towards (0, 1).\n *   - Degrees towards (0, 0, 1) (device needs at least 3 axes).\n *\n *\n *  Example of force coming from the south with all encodings (force coming\n *  from the south means the user will have to pull the stick to counteract):\n *  \\code\n *  SDL_HapticDirection direction;\n *\n *  // Cartesian directions\n *  direction.type = SDL_HAPTIC_CARTESIAN; // Using cartesian direction encoding.\n *  direction.dir[0] = 0; // X position\n *  direction.dir[1] = 1; // Y position\n *  // Assuming the device has 2 axes, we don\u0027t need to specify third parameter.\n *\n *  // Polar directions\n *  direction.type = SDL_HAPTIC_POLAR; // We\u0027ll be using polar direction encoding.\n *  direction.dir[0] = 18000; // Polar only uses first parameter\n *\n *  // Spherical coordinates\n *  direction.type = SDL_HAPTIC_SPHERICAL; // Spherical encoding\n *  direction.dir[0] = 9000; // Since we only have two axes we don\u0027t need more parameters.\n *  \\endcode\n *\n *  \\sa SDL_HAPTIC_POLAR\n *  \\sa SDL_HAPTIC_CARTESIAN\n *  \\sa SDL_HAPTIC_SPHERICAL\n *  \\sa SDL_HAPTIC_STEERING_AXIS\n *  \\sa SDL_HapticEffect\n *  \\sa SDL_GetNumHapticAxes\n */"
    },
    "struct SDL_HapticLeftRight": {
      "size_of": 12,
      "align_of": 4,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 707,
            "column": 12
          },
          "comment": "/**\u003C ::SDL_HAPTIC_LEFTRIGHT */"
        },
        {
          "name": "length",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 710,
            "column": 12
          },
          "comment": "/**\u003C Duration of the effect in milliseconds. */"
        },
        {
          "name": "large_magnitude",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 713,
            "column": 12
          },
          "comment": "/**\u003C Control of the large controller motor. */"
        },
        {
          "name": "small_magnitude",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 10,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 714,
            "column": 12
          },
          "comment": "/**\u003C Control of the small controller motor. */"
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 704,
        "column": 16
      },
      "comment": "/**\n * A structure containing a template for a Left/Right effect.\n *\n * This struct is exclusively for the ::SDL_HAPTIC_LEFTRIGHT effect.\n *\n * The Left/Right effect is used to explicitly control the large and small\n * motors, commonly found in modern game controllers. The small (right) motor\n * is high frequency, and the large (left) motor is low frequency.\n *\n * \\sa SDL_HAPTIC_LEFTRIGHT\n * \\sa SDL_HapticEffect\n */"
    },
    "struct SDL_HapticPeriodic": {
      "size_of": 48,
      "align_of": 4,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 580,
            "column": 12
          },
          "comment": "/**\u003C ::SDL_HAPTIC_SINE, ::SDL_HAPTIC_SQUARE\n                             ::SDL_HAPTIC_TRIANGLE, ::SDL_HAPTIC_SAWTOOTHUP or\n                             ::SDL_HAPTIC_SAWTOOTHDOWN */"
        },
        {
          "name": "direction",
          "type": {
            "name": "SDL_HapticDirection",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 4,
            "location": {
              "fileName": "SDL_haptic.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
              "line": 482,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_HapticDirection",
              "kind": "struct",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 478,
                "column": 16
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 583,
            "column": 25
          },
          "comment": "/**\u003C Direction of the effect. */"
        },
        {
          "name": "length",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 586,
            "column": 12
          },
          "comment": "/**\u003C Duration of the effect. */"
        },
        {
          "name": "delay",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 587,
            "column": 12
          },
          "comment": "/**\u003C Delay before starting the effect. */"
        },
        {
          "name": "button",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 26,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 590,
            "column": 12
          },
          "comment": "/**\u003C Button that triggers the effect. */"
        },
        {
          "name": "interval",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 28,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 591,
            "column": 12
          },
          "comment": "/**\u003C How soon it can be triggered again after button. */"
        },
        {
          "name": "period",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 30,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 594,
            "column": 12
          },
          "comment": "/**\u003C Period of the wave. */"
        },
        {
          "name": "magnitude",
          "type": {
            "name": "Sint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 156,
              "column": 17
            },
            "inner_type": {
              "name": "int16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_int16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 595,
            "column": 12
          },
          "comment": "/**\u003C Peak value; if negative, equivalent to 180 degrees extra phase shift. */"
        },
        {
          "name": "offset",
          "type": {
            "name": "Sint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 156,
              "column": 17
            },
            "inner_type": {
              "name": "int16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_int16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 34,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 596,
            "column": 12
          },
          "comment": "/**\u003C Mean value of the wave. */"
        },
        {
          "name": "phase",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 36,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 597,
            "column": 12
          },
          "comment": "/**\u003C Positive phase shift given by hundredth of a degree. */"
        },
        {
          "name": "attack_length",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 38,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 600,
            "column": 12
          },
          "comment": "/**\u003C Duration of the attack. */"
        },
        {
          "name": "attack_level",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 40,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 601,
            "column": 12
          },
          "comment": "/**\u003C Level at the start of the attack. */"
        },
        {
          "name": "fade_length",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 42,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 602,
            "column": 12
          },
          "comment": "/**\u003C Duration of the fade. */"
        },
        {
          "name": "fade_level",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 44,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 603,
            "column": 12
          },
          "comment": "/**\u003C Level at the end of the fade. */"
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 577,
        "column": 16
      },
      "comment": "/**\n *  A structure containing a template for a Periodic effect.\n *\n *  The struct handles the following effects:\n *   - ::SDL_HAPTIC_SINE\n *   - ::SDL_HAPTIC_SQUARE\n *   - ::SDL_HAPTIC_TRIANGLE\n *   - ::SDL_HAPTIC_SAWTOOTHUP\n *   - ::SDL_HAPTIC_SAWTOOTHDOWN\n *\n *  A periodic effect consists in a wave-shaped effect that repeats itself\n *  over time.  The type determines the shape of the wave and the parameters\n *  determine the dimensions of the wave.\n *\n *  Phase is given by hundredth of a degree meaning that giving the phase a value\n *  of 9000 will displace it 25% of its period.  Here are sample values:\n *   -     0: No phase displacement.\n *   -  9000: Displaced 25% of its period.\n *   - 18000: Displaced 50% of its period.\n *   - 27000: Displaced 75% of its period.\n *   - 36000: Displaced 100% of its period, same as 0, but 0 is preferred.\n *\n *  Examples:\n *  \\verbatim\n    SDL_HAPTIC_SINE\n      __      __      __      __\n     /  \\    /  \\    /  \\    /\n    /    \\__/    \\__/    \\__/\n\n    SDL_HAPTIC_SQUARE\n     __    __    __    __    __\n    |  |  |  |  |  |  |  |  |  |\n    |  |__|  |__|  |__|  |__|  |\n\n    SDL_HAPTIC_TRIANGLE\n      /\\    /\\    /\\    /\\    /\\\n     /  \\  /  \\  /  \\  /  \\  /\n    /    \\/    \\/    \\/    \\/\n\n    SDL_HAPTIC_SAWTOOTHUP\n      /|  /|  /|  /|  /|  /|  /|\n     / | / | / | / | / | / | / |\n    /  |/  |/  |/  |/  |/  |/  |\n\n    SDL_HAPTIC_SAWTOOTHDOWN\n    \\  |\\  |\\  |\\  |\\  |\\  |\\  |\n     \\ | \\ | \\ | \\ | \\ | \\ | \\ |\n      \\|  \\|  \\|  \\|  \\|  \\|  \\|\n    \\endverbatim\n *\n *  \\sa SDL_HAPTIC_SINE\n *  \\sa SDL_HAPTIC_SQUARE\n *  \\sa SDL_HAPTIC_TRIANGLE\n *  \\sa SDL_HAPTIC_SAWTOOTHUP\n *  \\sa SDL_HAPTIC_SAWTOOTHDOWN\n *  \\sa SDL_HapticEffect\n */"
    },
    "struct SDL_HapticRamp": {
      "size_of": 44,
      "align_of": 4,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 670,
            "column": 12
          },
          "comment": "/**\u003C ::SDL_HAPTIC_RAMP */"
        },
        {
          "name": "direction",
          "type": {
            "name": "SDL_HapticDirection",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 4,
            "location": {
              "fileName": "SDL_haptic.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
              "line": 482,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_HapticDirection",
              "kind": "struct",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 478,
                "column": 16
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 671,
            "column": 25
          },
          "comment": "/**\u003C Direction of the effect. */"
        },
        {
          "name": "length",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 674,
            "column": 12
          },
          "comment": "/**\u003C Duration of the effect. */"
        },
        {
          "name": "delay",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 675,
            "column": 12
          },
          "comment": "/**\u003C Delay before starting the effect. */"
        },
        {
          "name": "button",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 26,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 678,
            "column": 12
          },
          "comment": "/**\u003C Button that triggers the effect. */"
        },
        {
          "name": "interval",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 28,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 679,
            "column": 12
          },
          "comment": "/**\u003C How soon it can be triggered again after button. */"
        },
        {
          "name": "start",
          "type": {
            "name": "Sint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 156,
              "column": 17
            },
            "inner_type": {
              "name": "int16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_int16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 30,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 682,
            "column": 12
          },
          "comment": "/**\u003C Beginning strength level. */"
        },
        {
          "name": "end",
          "type": {
            "name": "Sint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 156,
              "column": 17
            },
            "inner_type": {
              "name": "int16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_int16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 683,
            "column": 12
          },
          "comment": "/**\u003C Ending strength level. */"
        },
        {
          "name": "attack_length",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 34,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 686,
            "column": 12
          },
          "comment": "/**\u003C Duration of the attack. */"
        },
        {
          "name": "attack_level",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 36,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 687,
            "column": 12
          },
          "comment": "/**\u003C Level at the start of the attack. */"
        },
        {
          "name": "fade_length",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 38,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 688,
            "column": 12
          },
          "comment": "/**\u003C Duration of the fade. */"
        },
        {
          "name": "fade_level",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 40,
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 689,
            "column": 12
          },
          "comment": "/**\u003C Level at the end of the fade. */"
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 667,
        "column": 16
      },
      "comment": "/**\n *  A structure containing a template for a Ramp effect.\n *\n *  This struct is exclusively for the ::SDL_HAPTIC_RAMP effect.\n *\n *  The ramp effect starts at start strength and ends at end strength.\n *  It augments in linear fashion.  If you use attack and fade with a ramp\n *  the effects get added to the ramp effect making the effect become\n *  quadratic instead of linear.\n *\n *  \\sa SDL_HAPTIC_RAMP\n *  \\sa SDL_HapticEffect\n */"
    },
    "struct SDL_hid_device_info": {
      "size_of": 80,
      "align_of": 8,
      "fields": [
        {
          "name": "path",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 117,
            "column": 11
          },
          "comment": "/** Platform-specific device path */"
        },
        {
          "name": "vendor_id",
          "type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 119,
            "column": 20
          },
          "comment": "/** Device Vendor ID */"
        },
        {
          "name": "product_id",
          "type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 10,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 121,
            "column": 20
          },
          "comment": "/** Device Product ID */"
        },
        {
          "name": "serial_number",
          "type": {
            "name": "wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 123,
            "column": 14
          },
          "comment": "/** Serial Number */"
        },
        {
          "name": "release_number",
          "type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 126,
            "column": 20
          },
          "comment": "/** Device Release Number in binary-coded decimal,\n        also known as Device Version Number */"
        },
        {
          "name": "manufacturer_string",
          "type": {
            "name": "wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 128,
            "column": 14
          },
          "comment": "/** Manufacturer String */"
        },
        {
          "name": "product_string",
          "type": {
            "name": "wchar_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "wchar_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_wchar_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_wchar_t.h",
                "line": 34,
                "column": 26,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_wchar_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 82,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 40,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 130,
            "column": 14
          },
          "comment": "/** Product string */"
        },
        {
          "name": "usage_page",
          "type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 48,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 133,
            "column": 20
          },
          "comment": "/** Usage Page for this Device/Interface\n        (Windows/Mac/hidraw only) */"
        },
        {
          "name": "usage",
          "type": {
            "name": "unsigned short",
            "kind": "primitive",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 50,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 136,
            "column": 20
          },
          "comment": "/** Usage for this Device/Interface\n        (Windows/Mac/hidraw only) */"
        },
        {
          "name": "interface_number",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 52,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 143,
            "column": 9
          },
          "comment": "/** The USB interface which this logical device\n        represents.\n\n        Valid only if the device is a USB HID device.\n        Set to -1 in all other cases.\n    */"
        },
        {
          "name": "interface_class",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 56,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 147,
            "column": 9
          },
          "comment": "/** Additional information about the USB interface.\n        Valid on libusb and Android implementations. */"
        },
        {
          "name": "interface_subclass",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 60,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 148,
            "column": 9
          }
        },
        {
          "name": "interface_protocol",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 64,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 149,
            "column": 9
          }
        },
        {
          "name": "bus_type",
          "type": {
            "name": "SDL_hid_bus_type",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_hidapi.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
              "line": 108,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_hid_bus_type",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 82,
                "column": 9
              }
            }
          },
          "offset_of": 68,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 152,
            "column": 22
          },
          "comment": "/** Underlying bus type */"
        },
        {
          "name": "next",
          "type": {
            "name": "struct SDL_hid_device_info *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_hid_device_info",
              "kind": "struct",
              "size_of": 80,
              "align_of": 8,
              "location": {
                "fileName": "SDL_hidapi.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
                "line": 114,
                "column": 16
              }
            }
          },
          "offset_of": 72,
          "location": {
            "fileName": "SDL_hidapi.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
            "line": 155,
            "column": 33
          },
          "comment": "/** Pointer to the next device */"
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 114,
        "column": 16
      },
      "comment": "/** hidapi info structure */\n/**\n *  Information about a connected HID device\n */"
    },
    "struct SDL_JoyAxisEvent": {
      "size_of": 32,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 406,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_JOYSTICK_AXIS_MOTION */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 407,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 408,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 409,
            "column": 20
          },
          "comment": "/**\u003C The joystick instance id */"
        },
        {
          "name": "axis",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 410,
            "column": 11
          },
          "comment": "/**\u003C The joystick axis index */"
        },
        {
          "name": "padding1",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 21,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 411,
            "column": 11
          }
        },
        {
          "name": "padding2",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 22,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 412,
            "column": 11
          }
        },
        {
          "name": "padding3",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 23,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 413,
            "column": 11
          }
        },
        {
          "name": "value",
          "type": {
            "name": "Sint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 156,
              "column": 17
            },
            "inner_type": {
              "name": "int16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_int16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 414,
            "column": 12
          },
          "comment": "/**\u003C The axis value (range: -32768 to 32767) */"
        },
        {
          "name": "padding4",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 26,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 415,
            "column": 12
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 404,
        "column": 16
      },
      "comment": "/**\n *  Joystick axis motion event structure (event.jaxis.*)\n */"
    },
    "struct SDL_JoyBallEvent": {
      "size_of": 32,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 423,
            "column": 12
          },
          "comment": "/**\u003C ::SDL_JOYBALLMOTION */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 424,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 425,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 426,
            "column": 20
          },
          "comment": "/**\u003C The joystick instance id */"
        },
        {
          "name": "ball",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 427,
            "column": 11
          },
          "comment": "/**\u003C The joystick trackball index */"
        },
        {
          "name": "padding1",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 21,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 428,
            "column": 11
          }
        },
        {
          "name": "padding2",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 22,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 429,
            "column": 11
          }
        },
        {
          "name": "padding3",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 23,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 430,
            "column": 11
          }
        },
        {
          "name": "xrel",
          "type": {
            "name": "Sint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 156,
              "column": 17
            },
            "inner_type": {
              "name": "int16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_int16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 431,
            "column": 12
          },
          "comment": "/**\u003C The relative motion in the X direction */"
        },
        {
          "name": "yrel",
          "type": {
            "name": "Sint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 156,
              "column": 17
            },
            "inner_type": {
              "name": "int16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_int16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 26,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 432,
            "column": 12
          },
          "comment": "/**\u003C The relative motion in the Y direction */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 421,
        "column": 16
      },
      "comment": "/**\n *  \\brief Joystick trackball motion event structure (event.jball.*)\n */"
    },
    "struct SDL_JoyBatteryEvent": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 487,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_JOYSTICK_BATTERY_UPDATED */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 488,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 489,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 490,
            "column": 20
          },
          "comment": "/**\u003C The joystick instance id */"
        },
        {
          "name": "level",
          "type": {
            "name": "SDL_JoystickPowerLevel",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 109,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_JoystickPowerLevel",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_joystick.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
                "line": 100,
                "column": 9
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 491,
            "column": 28
          },
          "comment": "/**\u003C The joystick battery level */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 485,
        "column": 16
      },
      "comment": "/**\n *  Joysick battery level change event structure (event.jbattery.*)\n */"
    },
    "struct SDL_JoyButtonEvent": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 461,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_JOYSTICK_BUTTON_DOWN or ::SDL_EVENT_JOYSTICK_BUTTON_UP */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 462,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 463,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 464,
            "column": 20
          },
          "comment": "/**\u003C The joystick instance id */"
        },
        {
          "name": "button",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 465,
            "column": 11
          },
          "comment": "/**\u003C The joystick button index */"
        },
        {
          "name": "state",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 21,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 466,
            "column": 11
          },
          "comment": "/**\u003C ::SDL_PRESSED or ::SDL_RELEASED */"
        },
        {
          "name": "padding1",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 22,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 467,
            "column": 11
          }
        },
        {
          "name": "padding2",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 23,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 468,
            "column": 11
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 459,
        "column": 16
      },
      "comment": "/**\n *  Joystick button event structure (event.jbutton.*)\n */"
    },
    "struct SDL_JoyDeviceEvent": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 476,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_JOYSTICK_ADDED or ::SDL_EVENT_JOYSTICK_REMOVED or ::SDL_EVENT_JOYSTICK_UPDATE_COMPLETE */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 477,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 478,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 479,
            "column": 20
          },
          "comment": "/**\u003C The joystick instance id */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 474,
        "column": 16
      },
      "comment": "/**\n *  Joystick device event structure (event.jdevice.*)\n */"
    },
    "struct SDL_JoyHatEvent": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 440,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_JOYSTICK_HAT_MOTION */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 441,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 442,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_JoystickID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_joystick.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
              "line": 84,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 443,
            "column": 20
          },
          "comment": "/**\u003C The joystick instance id */"
        },
        {
          "name": "hat",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 444,
            "column": 11
          },
          "comment": "/**\u003C The joystick hat index */"
        },
        {
          "name": "value",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 21,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 445,
            "column": 11
          },
          "comment": "/**\u003C The hat position value.\n                         *   \\sa ::SDL_HAT_LEFTUP ::SDL_HAT_UP ::SDL_HAT_RIGHTUP\n                         *   \\sa ::SDL_HAT_LEFT ::SDL_HAT_CENTERED ::SDL_HAT_RIGHT\n                         *   \\sa ::SDL_HAT_LEFTDOWN ::SDL_HAT_DOWN ::SDL_HAT_RIGHTDOWN\n                         *\n                         *   Note that zero means the POV is centered.\n                         */"
        },
        {
          "name": "padding1",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 22,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 452,
            "column": 11
          }
        },
        {
          "name": "padding2",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 23,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 453,
            "column": 11
          }
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 438,
        "column": 16
      },
      "comment": "/**\n *  Joystick hat position change event structure (event.jhat.*)\n */"
    },
    "struct SDL_KeyboardDeviceEvent": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 282,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_KEYBOARD_ADDED or ::SDL_EVENT_KEYBOARD_REMOVED */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 283,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 284,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_KeyboardID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_keyboard.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 285,
            "column": 20
          },
          "comment": "/**\u003C The keyboard instance id */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 280,
        "column": 16
      },
      "comment": "/**\n *  Keyboard device event structure (event.kdevice.*)\n */"
    },
    "struct SDL_KeyboardEvent": {
      "size_of": 48,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 293,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_KEY_DOWN or ::SDL_EVENT_KEY_UP */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 294,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 295,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "windowID",
          "type": {
            "name": "SDL_WindowID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 296,
            "column": 18
          },
          "comment": "/**\u003C The window with keyboard focus, if any */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_KeyboardID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_keyboard.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 297,
            "column": 20
          },
          "comment": "/**\u003C The keyboard instance id, or 0 if unknown or virtual */"
        },
        {
          "name": "state",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 298,
            "column": 11
          },
          "comment": "/**\u003C ::SDL_PRESSED or ::SDL_RELEASED */"
        },
        {
          "name": "repeat",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 25,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 299,
            "column": 11
          },
          "comment": "/**\u003C Non-zero if this is a key repeat */"
        },
        {
          "name": "padding2",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 26,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 300,
            "column": 11
          }
        },
        {
          "name": "padding3",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 27,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 301,
            "column": 11
          }
        },
        {
          "name": "keysym",
          "type": {
            "name": "SDL_Keysym",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 4,
            "location": {
              "fileName": "SDL_keyboard.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
              "line": 55,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_Keysym",
              "kind": "struct",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_keyboard.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
                "line": 49,
                "column": 16
              }
            }
          },
          "offset_of": 28,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 302,
            "column": 16
          },
          "comment": "/**\u003C The key that was pressed or released */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 291,
        "column": 16
      },
      "comment": "/**\n *  Keyboard button event structure (event.key.*)\n */"
    },
    "struct SDL_Keysym": {
      "size_of": 16,
      "align_of": 4,
      "fields": [
        {
          "name": "scancode",
          "type": {
            "name": "SDL_Scancode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_scancode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_scancode.h",
              "line": 437,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_Scancode",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_scancode.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_scancode.h",
                "line": 46,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_keyboard.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
            "line": 51,
            "column": 18
          },
          "comment": "/**\u003C SDL physical key code - see ::SDL_Scancode for details */"
        },
        {
          "name": "sym",
          "type": {
            "name": "SDL_Keycode",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_keycode.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keycode.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Sint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 168,
                "column": 17
              },
              "inner_type": {
                "name": "int32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_int32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                  "line": 30,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_keyboard.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
            "line": 52,
            "column": 17
          },
          "comment": "/**\u003C SDL virtual key code - see ::SDL_Keycode for details */"
        },
        {
          "name": "mod",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_keyboard.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
            "line": 53,
            "column": 12
          },
          "comment": "/**\u003C current key modifiers */"
        },
        {
          "name": "unused",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 12,
          "location": {
            "fileName": "SDL_keyboard.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
            "line": 54,
            "column": 12
          }
        }
      ],
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 49,
        "column": 16
      },
      "comment": "/**\n *  The SDL keysym structure, used in key events.\n *\n *  \\note  If you are looking for translated character input, see the ::SDL_EVENT_TEXT_INPUT event.\n */"
    },
    "struct SDL_Locale": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "language",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_locale.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_locale.h",
            "line": 45,
            "column": 17
          },
          "comment": "/**\u003C A language name, like \u0022en\u0022 for English. */"
        },
        {
          "name": "country",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_locale.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_locale.h",
            "line": 46,
            "column": 17
          },
          "comment": "/**\u003C A country, like \u0022US\u0022 for America. Can be NULL. */"
        }
      ],
      "location": {
        "fileName": "SDL_locale.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_locale.h",
        "line": 43,
        "column": 16
      }
    },
    "struct SDL_MouseButtonEvent": {
      "size_of": 40,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 371,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_MOUSE_BUTTON_DOWN or ::SDL_EVENT_MOUSE_BUTTON_UP */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 372,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 373,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "windowID",
          "type": {
            "name": "SDL_WindowID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 374,
            "column": 18
          },
          "comment": "/**\u003C The window with mouse focus, if any */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_MouseID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_mouse.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
              "line": 41,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 375,
            "column": 17
          },
          "comment": "/**\u003C The mouse instance id, SDL_TOUCH_MOUSEID, or SDL_PEN_MOUSEID */"
        },
        {
          "name": "button",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 376,
            "column": 11
          },
          "comment": "/**\u003C The mouse button index */"
        },
        {
          "name": "state",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 25,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 377,
            "column": 11
          },
          "comment": "/**\u003C ::SDL_PRESSED or ::SDL_RELEASED */"
        },
        {
          "name": "clicks",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 26,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 378,
            "column": 11
          },
          "comment": "/**\u003C 1 for single-click, 2 for double-click, etc. */"
        },
        {
          "name": "padding",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 27,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 379,
            "column": 11
          }
        },
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 28,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 380,
            "column": 11
          },
          "comment": "/**\u003C X coordinate, relative to window */"
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 381,
            "column": 11
          },
          "comment": "/**\u003C Y coordinate, relative to window */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 369,
        "column": 16
      },
      "comment": "/**\n *  Mouse button event structure (event.button.*)\n */"
    },
    "struct SDL_MouseDeviceEvent": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 343,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_MOUSE_ADDED or ::SDL_EVENT_MOUSE_REMOVED */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 344,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 345,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_MouseID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_mouse.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
              "line": 41,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 346,
            "column": 17
          },
          "comment": "/**\u003C The mouse instance id */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 341,
        "column": 16
      },
      "comment": "/**\n *  Mouse device event structure (event.mdevice.*)\n */"
    },
    "struct SDL_MouseMotionEvent": {
      "size_of": 48,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 354,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_MOUSE_MOTION */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 355,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 356,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "windowID",
          "type": {
            "name": "SDL_WindowID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 357,
            "column": 18
          },
          "comment": "/**\u003C The window with mouse focus, if any */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_MouseID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_mouse.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
              "line": 41,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 358,
            "column": 17
          },
          "comment": "/**\u003C The mouse instance id, SDL_TOUCH_MOUSEID, or SDL_PEN_MOUSEID */"
        },
        {
          "name": "state",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 359,
            "column": 12
          },
          "comment": "/**\u003C The current button state */"
        },
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 28,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 360,
            "column": 11
          },
          "comment": "/**\u003C X coordinate, relative to window */"
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 361,
            "column": 11
          },
          "comment": "/**\u003C Y coordinate, relative to window */"
        },
        {
          "name": "xrel",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 36,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 362,
            "column": 11
          },
          "comment": "/**\u003C The relative motion in the X direction */"
        },
        {
          "name": "yrel",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 40,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 363,
            "column": 11
          },
          "comment": "/**\u003C The relative motion in the Y direction */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 352,
        "column": 16
      },
      "comment": "/**\n *  Mouse motion event structure (event.motion.*)\n */"
    },
    "struct SDL_MouseWheelEvent": {
      "size_of": 48,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 389,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_MOUSE_WHEEL */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 390,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 391,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "windowID",
          "type": {
            "name": "SDL_WindowID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 392,
            "column": 18
          },
          "comment": "/**\u003C The window with mouse focus, if any */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_MouseID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_mouse.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
              "line": 41,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 393,
            "column": 17
          },
          "comment": "/**\u003C The mouse instance id, SDL_TOUCH_MOUSEID, or SDL_PEN_MOUSEID */"
        },
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 394,
            "column": 11
          },
          "comment": "/**\u003C The amount scrolled horizontally, positive to the right and negative to the left */"
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 28,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 395,
            "column": 11
          },
          "comment": "/**\u003C The amount scrolled vertically, positive away from the user and negative toward the user */"
        },
        {
          "name": "direction",
          "type": {
            "name": "SDL_MouseWheelDirection",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_mouse.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
              "line": 80,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_MouseWheelDirection",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_mouse.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
                "line": 76,
                "column": 9
              }
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 396,
            "column": 29
          },
          "comment": "/**\u003C Set to one of the SDL_MOUSEWHEEL_* defines. When FLIPPED the values in X and Y will be opposite. Multiply by -1 to change them back */"
        },
        {
          "name": "mouse_x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 36,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 397,
            "column": 11
          },
          "comment": "/**\u003C X coordinate, relative to window */"
        },
        {
          "name": "mouse_y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 40,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 398,
            "column": 11
          },
          "comment": "/**\u003C Y coordinate, relative to window */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 387,
        "column": 16
      },
      "comment": "/**\n *  Mouse wheel event structure (event.wheel.*)\n */"
    },
    "struct SDL_Palette": {
      "size_of": 24,
      "align_of": 8,
      "fields": [
        {
          "name": "ncolors",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 691,
            "column": 9
          }
        },
        {
          "name": "colors",
          "type": {
            "name": "SDL_Color *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Color",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 1,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 673,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Color",
                "kind": "struct",
                "size_of": 4,
                "align_of": 1,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 667,
                  "column": 16
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 692,
            "column": 16
          }
        },
        {
          "name": "version",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 693,
            "column": 12
          }
        },
        {
          "name": "refcount",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 694,
            "column": 9
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 689,
        "column": 16
      }
    },
    "struct SDL_PathInfo": {
      "size_of": 40,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_PathType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_filesystem.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
              "line": 246,
              "column": 3
            },
            "inner_type": {
              "name": "enum SDL_PathType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_filesystem.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
                "line": 240,
                "column": 14
              }
            }
          },
          "location": {
            "fileName": "SDL_filesystem.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
            "line": 250,
            "column": 18
          },
          "comment": "/* the path type */"
        },
        {
          "name": "size",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_filesystem.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
            "line": 251,
            "column": 12
          },
          "comment": "/* the file size in bytes */"
        },
        {
          "name": "create_time",
          "type": {
            "name": "SDL_Time",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 197,
              "column": 16
            },
            "inner_type": {
              "name": "Sint64",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 181,
                "column": 17
              },
              "inner_type": {
                "name": "int64_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_int64_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
                  "line": 30,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "long long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_filesystem.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
            "line": 252,
            "column": 14
          },
          "comment": "/* the time when the path was created */"
        },
        {
          "name": "modify_time",
          "type": {
            "name": "SDL_Time",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 197,
              "column": 16
            },
            "inner_type": {
              "name": "Sint64",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 181,
                "column": 17
              },
              "inner_type": {
                "name": "int64_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_int64_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
                  "line": 30,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "long long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_filesystem.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
            "line": 253,
            "column": 14
          },
          "comment": "/* the last time the path was modified */"
        },
        {
          "name": "access_time",
          "type": {
            "name": "SDL_Time",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 197,
              "column": 16
            },
            "inner_type": {
              "name": "Sint64",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 181,
                "column": 17
              },
              "inner_type": {
                "name": "int64_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_int64_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
                  "line": 30,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "long long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_filesystem.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
            "line": 254,
            "column": 14
          },
          "comment": "/* the last time the path was read */"
        }
      ],
      "location": {
        "fileName": "SDL_filesystem.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
        "line": 248,
        "column": 16
      }
    },
    "struct SDL_PenButtonEvent": {
      "size_of": 64,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 659,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_PEN_BUTTON_DOWN or ::SDL_EVENT_PEN_BUTTON_UP */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 660,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 661,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "windowID",
          "type": {
            "name": "SDL_WindowID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 662,
            "column": 18
          },
          "comment": "/**\u003C The window with pen focus, if any */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_PenID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pen.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
              "line": 57,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 663,
            "column": 15
          },
          "comment": "/**\u003C The pen instance id */"
        },
        {
          "name": "button",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 664,
            "column": 11
          },
          "comment": "/**\u003C The pen button index (1 represents the pen tip for compatibility with mouse events) */"
        },
        {
          "name": "state",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 25,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 665,
            "column": 11
          },
          "comment": "/**\u003C ::SDL_PRESSED or ::SDL_RELEASED */"
        },
        {
          "name": "pen_state",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 26,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 666,
            "column": 12
          },
          "comment": "/**\u003C Pen button masks (where SDL_BUTTON(1) is the first button, SDL_BUTTON(2) is the second button etc.), ::SDL_PEN_DOWN_MASK is set if the pen is touching the surface, and ::SDL_PEN_ERASER_MASK is set if the pen is (used as) an eraser. */"
        },
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 28,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 667,
            "column": 11
          },
          "comment": "/**\u003C X coordinate, relative to window */"
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 668,
            "column": 11
          },
          "comment": "/**\u003C Y coordinate, relative to window */"
        },
        {
          "name": "axes",
          "type": {
            "name": "float[6]",
            "kind": "array",
            "size_of": 24,
            "align_of": 8,
            "size_of_element": 4,
            "array_size": 6,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 36,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 669,
            "column": 11
          },
          "comment": "/**\u003C Pen axes such as pressure and tilt (ordered as per ::SDL_PenAxis) */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 657,
        "column": 16
      },
      "comment": "/**\n *  Pressure-sensitive pen button event structure (event.pbutton.*)\n */"
    },
    "struct SDL_PenCapabilityInfo": {
      "size_of": 12,
      "align_of": 4,
      "fields": [
        {
          "name": "max_tilt",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "SDL_pen.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
            "line": 243,
            "column": 11
          },
          "comment": "/**\u003C Physical maximum tilt angle, for XTILT and YTILT, or SDL_PEN_INFO_UNKNOWN .  Pens cannot typically tilt all the way to 90 degrees, so this value is usually less than 90.0. */"
        },
        {
          "name": "wacom_id",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_pen.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
            "line": 244,
            "column": 12
          },
          "comment": "/**\u003C For Wacom devices: wacom tool type ID, otherwise 0 (useful e.g. with libwacom) */"
        },
        {
          "name": "num_buttons",
          "type": {
            "name": "Sint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 144,
              "column": 16
            },
            "inner_type": {
              "name": "int8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_int8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int8_t.h",
                "line": 30,
                "column": 31,
                "isSystem": true
              },
              "inner_type": {
                "name": "signed char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_pen.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
            "line": 245,
            "column": 11
          },
          "comment": "/**\u003C Number of pen buttons (not counting the pen tip), or SDL_PEN_INFO_UNKNOWN */"
        }
      ],
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 241,
        "column": 16
      },
      "comment": "/**\n * Pen capabilities, as reported by ::SDL_GetPenCapabilities()\n */"
    },
    "struct SDL_PenMotionEvent": {
      "size_of": 64,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 641,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_PEN_MOTION */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 642,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 643,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "windowID",
          "type": {
            "name": "SDL_WindowID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 644,
            "column": 18
          },
          "comment": "/**\u003C The window with pen focus, if any */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_PenID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pen.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
              "line": 57,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 645,
            "column": 15
          },
          "comment": "/**\u003C The pen instance id */"
        },
        {
          "name": "padding1",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 646,
            "column": 11
          }
        },
        {
          "name": "padding2",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 25,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 647,
            "column": 11
          }
        },
        {
          "name": "pen_state",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 26,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 648,
            "column": 12
          },
          "comment": "/**\u003C Pen button masks (where SDL_BUTTON(1) is the first button, SDL_BUTTON(2) is the second button etc.), ::SDL_PEN_DOWN_MASK is set if the pen is touching the surface, and ::SDL_PEN_ERASER_MASK is set if the pen is (used as) an eraser. */"
        },
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 28,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 649,
            "column": 11
          },
          "comment": "/**\u003C X coordinate, relative to window */"
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 650,
            "column": 11
          },
          "comment": "/**\u003C Y coordinate, relative to window */"
        },
        {
          "name": "axes",
          "type": {
            "name": "float[6]",
            "kind": "array",
            "size_of": 24,
            "align_of": 8,
            "size_of_element": 4,
            "array_size": 6,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 36,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 651,
            "column": 11
          },
          "comment": "/**\u003C Pen axes such as pressure and tilt (ordered as per ::SDL_PenAxis) */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 639,
        "column": 16
      },
      "comment": "/**\n *  Pressure-sensitive pen motion / pressure / angle event structure (event.pmotion.*)\n */"
    },
    "struct SDL_PenTipEvent": {
      "size_of": 64,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 623,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_PEN_DOWN or ::SDL_EVENT_PEN_UP */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 624,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 625,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "windowID",
          "type": {
            "name": "SDL_WindowID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 626,
            "column": 18
          },
          "comment": "/**\u003C The window with pen focus, if any */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_PenID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pen.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
              "line": 57,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 627,
            "column": 15
          },
          "comment": "/**\u003C The pen instance id */"
        },
        {
          "name": "tip",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 628,
            "column": 11
          },
          "comment": "/**\u003C ::SDL_PEN_TIP_INK when using a regular pen tip, or ::SDL_PEN_TIP_ERASER if the pen is being used as an eraser (e.g., flipped to use the eraser tip)  */"
        },
        {
          "name": "state",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 25,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 629,
            "column": 11
          },
          "comment": "/**\u003C ::SDL_PRESSED on ::SDL_EVENT_PEN_DOWN and ::SDL_RELEASED on ::SDL_EVENT_PEN_UP */"
        },
        {
          "name": "pen_state",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 26,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 630,
            "column": 12
          },
          "comment": "/**\u003C Pen button masks (where SDL_BUTTON(1) is the first button, SDL_BUTTON(2) is the second button etc.), ::SDL_PEN_DOWN_MASK is set if the pen is touching the surface, and ::SDL_PEN_ERASER_MASK is set if the pen is (used as) an eraser. */"
        },
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 28,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 631,
            "column": 11
          },
          "comment": "/**\u003C X coordinate, relative to window */"
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 632,
            "column": 11
          },
          "comment": "/**\u003C Y coordinate, relative to window */"
        },
        {
          "name": "axes",
          "type": {
            "name": "float[6]",
            "kind": "array",
            "size_of": 24,
            "align_of": 8,
            "size_of_element": 4,
            "array_size": 6,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 36,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 633,
            "column": 11
          },
          "comment": "/**\u003C Pen axes such as pressure and tilt (ordered as per ::SDL_PenAxis) */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 621,
        "column": 16
      },
      "comment": "/**\n *  Pressure-sensitive pen touched or stopped touching surface (event.ptip.*)\n */"
    },
    "struct SDL_PixelFormat": {
      "size_of": 56,
      "align_of": 8,
      "fields": [
        {
          "name": "format",
          "type": {
            "name": "SDL_PixelFormatEnum",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 422,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 214,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 702,
            "column": 25
          }
        },
        {
          "name": "palette",
          "type": {
            "name": "SDL_Palette *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Palette",
              "kind": "typeAlias",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 695,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Palette",
                "kind": "struct",
                "size_of": 24,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 689,
                  "column": 16
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 703,
            "column": 18
          }
        },
        {
          "name": "bits_per_pixel",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 704,
            "column": 11
          }
        },
        {
          "name": "bytes_per_pixel",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 17,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 705,
            "column": 11
          }
        },
        {
          "name": "padding",
          "type": {
            "name": "Uint8[2]",
            "kind": "array",
            "size_of": 2,
            "align_of": 8,
            "size_of_element": 1,
            "array_size": 2,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 18,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 706,
            "column": 11
          }
        },
        {
          "name": "Rmask",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 707,
            "column": 12
          }
        },
        {
          "name": "Gmask",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 708,
            "column": 12
          }
        },
        {
          "name": "Bmask",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 28,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 709,
            "column": 12
          }
        },
        {
          "name": "Amask",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 710,
            "column": 12
          }
        },
        {
          "name": "Rloss",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 36,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 711,
            "column": 11
          }
        },
        {
          "name": "Gloss",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 37,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 712,
            "column": 11
          }
        },
        {
          "name": "Bloss",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 38,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 713,
            "column": 11
          }
        },
        {
          "name": "Aloss",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 39,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 714,
            "column": 11
          }
        },
        {
          "name": "Rshift",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 40,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 715,
            "column": 11
          }
        },
        {
          "name": "Gshift",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 41,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 716,
            "column": 11
          }
        },
        {
          "name": "Bshift",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 42,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 717,
            "column": 11
          }
        },
        {
          "name": "Ashift",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 43,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 718,
            "column": 11
          }
        },
        {
          "name": "refcount",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 44,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 719,
            "column": 9
          }
        },
        {
          "name": "next",
          "type": {
            "name": "struct SDL_PixelFormat *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_PixelFormat",
              "kind": "struct",
              "size_of": 56,
              "align_of": 8,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 700,
                "column": 16
              }
            }
          },
          "offset_of": 48,
          "location": {
            "fileName": "SDL_pixels.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
            "line": 720,
            "column": 29
          }
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 700,
        "column": 16
      },
      "comment": "/**\n *  \\note Everything in the pixel format structure is read-only.\n */"
    },
    "struct SDL_Point": {
      "size_of": 8,
      "align_of": 4,
      "fields": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "SDL_rect.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
            "line": 48,
            "column": 9
          }
        },
        {
          "name": "y",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_rect.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
            "line": 49,
            "column": 9
          }
        }
      ],
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 46,
        "column": 16
      },
      "comment": "/**\n * The structure that defines a point (integer)\n *\n * \\sa SDL_GetRectEnclosingPoints\n * \\sa SDL_PointInRect\n */"
    },
    "struct SDL_QuitEvent": {
      "size_of": 16,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 718,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_QUIT */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 719,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 720,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 716,
        "column": 16
      },
      "comment": "/**\n *  The \u0022quit requested\u0022 event\n */"
    },
    "struct SDL_Rect": {
      "size_of": 16,
      "align_of": 4,
      "fields": [
        {
          "name": "x",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "SDL_rect.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
            "line": 78,
            "column": 9
          }
        },
        {
          "name": "y",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_rect.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
            "line": 78,
            "column": 12
          }
        },
        {
          "name": "w",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_rect.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
            "line": 79,
            "column": 9
          }
        },
        {
          "name": "h",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 12,
          "location": {
            "fileName": "SDL_rect.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
            "line": 79,
            "column": 12
          }
        }
      ],
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 76,
        "column": 16
      },
      "comment": "/**\n * A rectangle, with the origin at the upper left (integer).\n *\n * \\sa SDL_RectEmpty\n * \\sa SDL_RectsEqual\n * \\sa SDL_HasRectIntersection\n * \\sa SDL_GetRectIntersection\n * \\sa SDL_GetRectAndLineIntersection\n * \\sa SDL_GetRectUnion\n * \\sa SDL_GetRectEnclosingPoints\n */"
    },
    "struct SDL_RendererInfo": {
      "size_of": 88,
      "align_of": 8,
      "fields": [
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 80,
            "column": 17
          },
          "comment": "/**\u003C The name of the renderer */"
        },
        {
          "name": "flags",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 81,
            "column": 12
          },
          "comment": "/**\u003C Supported ::SDL_RendererFlags */"
        },
        {
          "name": "num_texture_formats",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 12,
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 82,
            "column": 9
          },
          "comment": "/**\u003C The number of available texture formats */"
        },
        {
          "name": "texture_formats",
          "type": {
            "name": "SDL_PixelFormatEnum[16]",
            "kind": "array",
            "size_of": 64,
            "align_of": 8,
            "size_of_element": 4,
            "array_size": 16,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_PixelFormatEnum",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 422,
                "column": 3
              },
              "inner_type": {
                "name": "SDL_PixelFormatEnum",
                "kind": "enum",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 214,
                  "column": 9
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 83,
            "column": 25
          },
          "comment": "/**\u003C The available texture formats */"
        },
        {
          "name": "max_texture_width",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 80,
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 84,
            "column": 9
          },
          "comment": "/**\u003C The maximum texture width */"
        },
        {
          "name": "max_texture_height",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 84,
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 85,
            "column": 9
          },
          "comment": "/**\u003C The maximum texture height */"
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 78,
        "column": 16
      },
      "comment": "/**\n * Information on the capabilities of a render driver or context.\n */"
    },
    "struct SDL_SensorEvent": {
      "size_of": 56,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 705,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_SENSOR_UPDATE */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 706,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 707,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "which",
          "type": {
            "name": "SDL_SensorID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_sensor.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
              "line": 60,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 708,
            "column": 18
          },
          "comment": "/**\u003C The instance ID of the sensor */"
        },
        {
          "name": "data",
          "type": {
            "name": "float[6]",
            "kind": "array",
            "size_of": 24,
            "align_of": 8,
            "size_of_element": 4,
            "array_size": 6,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "float",
              "kind": "primitive",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 709,
            "column": 11
          },
          "comment": "/**\u003C Up to 6 values from the sensor - additional values can be queried using SDL_GetSensorData() */"
        },
        {
          "name": "sensor_timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 48,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 710,
            "column": 12
          },
          "comment": "/**\u003C The timestamp of the sensor reading in nanoseconds, not necessarily synchronized with the system clock */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 703,
        "column": 16
      },
      "comment": "/**\n *  Sensor event structure (event.sensor.*)\n */"
    },
    "struct SDL_StorageInterface": {
      "size_of": 80,
      "align_of": 8,
      "fields": [
        {
          "name": "close",
          "type": {
            "name": "int (void *)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "SDL_storage.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
            "line": 47,
            "column": 19
          },
          "comment": "/* Called when the storage is closed */"
        },
        {
          "name": "ready",
          "type": {
            "name": "SDL_bool (void *)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_storage.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
            "line": 50,
            "column": 24
          },
          "comment": "/* Optional, returns whether the storage is currently ready for access */"
        },
        {
          "name": "enumerate",
          "type": {
            "name": "int (void *, const char *, SDL_EnumerateDirectoryCallback, void *)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_storage.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
            "line": 53,
            "column": 19
          },
          "comment": "/* Enumerate a directory, optional for write-only storage */"
        },
        {
          "name": "info",
          "type": {
            "name": "int (void *, const char *, SDL_PathInfo *)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_storage.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
            "line": 56,
            "column": 19
          },
          "comment": "/* Get path information, optional for write-only storage */"
        },
        {
          "name": "read_file",
          "type": {
            "name": "int (void *, const char *, void *, Uint64)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_storage.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
            "line": 59,
            "column": 19
          },
          "comment": "/* Read a file from storage, optional for write-only storage */"
        },
        {
          "name": "write_file",
          "type": {
            "name": "int (void *, const char *, const void *, Uint64)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 40,
          "location": {
            "fileName": "SDL_storage.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
            "line": 62,
            "column": 19
          },
          "comment": "/* Write a file to storage, optional for read-only storage */"
        },
        {
          "name": "mkdir",
          "type": {
            "name": "int (void *, const char *)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 48,
          "location": {
            "fileName": "SDL_storage.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
            "line": 65,
            "column": 19
          },
          "comment": "/* Create a directory, optional for read-only storage */"
        },
        {
          "name": "remove",
          "type": {
            "name": "int (void *, const char *)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 56,
          "location": {
            "fileName": "SDL_storage.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
            "line": 68,
            "column": 19
          },
          "comment": "/* Remove a file or empty directory, optional for read-only storage */"
        },
        {
          "name": "rename",
          "type": {
            "name": "int (void *, const char *, const char *)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 64,
          "location": {
            "fileName": "SDL_storage.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
            "line": 71,
            "column": 19
          },
          "comment": "/* Rename a path, optional for read-only storage */"
        },
        {
          "name": "space_remaining",
          "type": {
            "name": "Uint64 (void *)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 72,
          "location": {
            "fileName": "SDL_storage.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
            "line": 74,
            "column": 22
          },
          "comment": "/* Get the space remaining, optional for read-only storage */"
        }
      ],
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 44,
        "column": 16
      },
      "comment": "/* !!! FIXME: Don\u0027t let this ship without async R/W support!!! */"
    },
    "struct SDL_Surface": {
      "size_of": 96,
      "align_of": 8,
      "fields": [
        {
          "name": "flags",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 109,
            "column": 12
          },
          "comment": "/**\u003C Read-only */"
        },
        {
          "name": "format",
          "type": {
            "name": "SDL_PixelFormat *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_PixelFormat",
              "kind": "typeAlias",
              "size_of": 56,
              "align_of": 8,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 721,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_PixelFormat",
                "kind": "struct",
                "size_of": 56,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_pixels.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                  "line": 700,
                  "column": 16
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 110,
            "column": 22
          },
          "comment": "/**\u003C Read-only */"
        },
        {
          "name": "w",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 111,
            "column": 9
          },
          "comment": "/**\u003C Read-only */"
        },
        {
          "name": "h",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 111,
            "column": 12
          },
          "comment": "/**\u003C Read-only */"
        },
        {
          "name": "pitch",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 112,
            "column": 9
          },
          "comment": "/**\u003C Read-only */"
        },
        {
          "name": "pixels",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 113,
            "column": 11
          },
          "comment": "/**\u003C Read-write */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 40,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 115,
            "column": 11
          },
          "comment": "/**\u003C Private */"
        },
        {
          "name": "locked",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 48,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 118,
            "column": 9
          },
          "comment": "/**\u003C Read-only */"
        },
        {
          "name": "list_blitmap",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 56,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 121,
            "column": 11
          },
          "comment": "/**\u003C Private */"
        },
        {
          "name": "clip_rect",
          "type": {
            "name": "SDL_Rect",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 4,
            "location": {
              "fileName": "SDL_rect.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
              "line": 80,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_Rect",
              "kind": "struct",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 76,
                "column": 16
              }
            }
          },
          "offset_of": 64,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 124,
            "column": 14
          },
          "comment": "/**\u003C Read-only */"
        },
        {
          "name": "map",
          "type": {
            "name": "SDL_BlitMap *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_BlitMap",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_surface.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
                "line": 66,
                "column": 16
              }
            }
          },
          "offset_of": 80,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 127,
            "column": 18
          },
          "comment": "/**\u003C Private */"
        },
        {
          "name": "refcount",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 88,
          "location": {
            "fileName": "SDL_surface.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
            "line": 130,
            "column": 9
          },
          "comment": "/**\u003C Read-mostly */"
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 107,
        "column": 16
      },
      "comment": "/**\n * A collection of pixels used in software blitting.\n *\n * Pixels are arranged in memory in rows, with the top row first.\n * Each row occupies an amount of memory given by the pitch (sometimes\n * known as the row stride in non-SDL APIs).\n *\n * Within each row, pixels are arranged from left to right until the\n * width is reached.\n * Each pixel occupies a number of bits appropriate for its format, with\n * most formats representing each pixel as one or more whole bytes\n * (in some indexed formats, instead multiple pixels are packed into\n * each byte), and a byte order given by the format.\n * After encoding all pixels, any remaining bytes to reach the pitch are\n * used as padding to reach a desired alignment, and have undefined contents.\n *\n * \\note  This structure should be treated as read-only, except for \\c pixels,\n *        which, if not NULL, contains the raw pixel data for the surface.\n */"
    },
    "struct SDL_TextEditingEvent": {
      "size_of": 40,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 314,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_TEXT_EDITING */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 315,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 316,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "windowID",
          "type": {
            "name": "SDL_WindowID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 317,
            "column": 18
          },
          "comment": "/**\u003C The window with keyboard focus, if any */"
        },
        {
          "name": "text",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 318,
            "column": 11
          },
          "comment": "/**\u003C The editing text */"
        },
        {
          "name": "start",
          "type": {
            "name": "Sint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 168,
              "column": 17
            },
            "inner_type": {
              "name": "int32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_int32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 319,
            "column": 12
          },
          "comment": "/**\u003C The start cursor of selected editing text */"
        },
        {
          "name": "length",
          "type": {
            "name": "Sint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 168,
              "column": 17
            },
            "inner_type": {
              "name": "int32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_int32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 36,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 320,
            "column": 12
          },
          "comment": "/**\u003C The length of selected editing text */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 312,
        "column": 16
      },
      "comment": "/**\n *  Keyboard text editing event structure (event.edit.*)\n *\n *  The \u0060text\u0060 is owned by SDL and should be copied if the application\n *  wants to hold onto it beyond the scope of handling this event.\n */"
    },
    "struct SDL_TextInputEvent": {
      "size_of": 32,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 331,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_TEXT_INPUT */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 332,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 333,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "windowID",
          "type": {
            "name": "SDL_WindowID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 334,
            "column": 18
          },
          "comment": "/**\u003C The window with keyboard focus, if any */"
        },
        {
          "name": "text",
          "type": {
            "name": "char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 335,
            "column": 11
          },
          "comment": "/**\u003C The input text */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 329,
        "column": 16
      },
      "comment": "/**\n *  Keyboard text input event structure (event.text.*)\n *\n *  The \u0060text\u0060 is owned by SDL and should be copied if the application\n *  wants to hold onto it beyond the scope of handling this event.\n */"
    },
    "struct SDL_TouchFingerEvent": {
      "size_of": 56,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 603,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_EVENT_FINGER_MOTION or ::SDL_EVENT_FINGER_DOWN or ::SDL_EVENT_FINGER_UP */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 604,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 605,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "touchID",
          "type": {
            "name": "SDL_TouchID",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_touch.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
              "line": 41,
              "column": 16
            },
            "inner_type": {
              "name": "Uint64",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 187,
                "column": 18
              },
              "inner_type": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_uint64_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                  "line": 31,
                  "column": 28,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 606,
            "column": 17
          },
          "comment": "/**\u003C The touch device id */"
        },
        {
          "name": "fingerID",
          "type": {
            "name": "SDL_FingerID",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_touch.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint64",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 187,
                "column": 18
              },
              "inner_type": {
                "name": "uint64_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_uint64_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                  "line": 31,
                  "column": 28,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned long long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 607,
            "column": 18
          }
        },
        {
          "name": "x",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 608,
            "column": 11
          },
          "comment": "/**\u003C Normalized in the range 0...1 */"
        },
        {
          "name": "y",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 36,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 609,
            "column": 11
          },
          "comment": "/**\u003C Normalized in the range 0...1 */"
        },
        {
          "name": "dx",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 40,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 610,
            "column": 11
          },
          "comment": "/**\u003C Normalized in the range -1...1 */"
        },
        {
          "name": "dy",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 44,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 611,
            "column": 11
          },
          "comment": "/**\u003C Normalized in the range -1...1 */"
        },
        {
          "name": "pressure",
          "type": {
            "name": "float",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 48,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 612,
            "column": 11
          },
          "comment": "/**\u003C Normalized in the range 0...1 */"
        },
        {
          "name": "windowID",
          "type": {
            "name": "SDL_WindowID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 52,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 613,
            "column": 18
          },
          "comment": "/**\u003C The window underneath the finger, if any */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 601,
        "column": 16
      },
      "comment": "/**\n *  Touch finger event structure (event.tfinger.*)\n */"
    },
    "struct SDL_UserEvent": {
      "size_of": 40,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 728,
            "column": 12
          },
          "comment": "/**\u003C ::SDL_EVENT_USER through ::SDL_EVENT_LAST-1, Uint32 because these are not in the SDL_EventType enumeration */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 729,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 730,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "windowID",
          "type": {
            "name": "SDL_WindowID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 731,
            "column": 18
          },
          "comment": "/**\u003C The associated window if any */"
        },
        {
          "name": "code",
          "type": {
            "name": "Sint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 168,
              "column": 17
            },
            "inner_type": {
              "name": "int32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_int32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 732,
            "column": 12
          },
          "comment": "/**\u003C User defined event code */"
        },
        {
          "name": "data1",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 733,
            "column": 11
          },
          "comment": "/**\u003C User defined data pointer */"
        },
        {
          "name": "data2",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 734,
            "column": 11
          },
          "comment": "/**\u003C User defined data pointer */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 726,
        "column": 16
      },
      "comment": "/**\n *  A user-defined event type (event.user.*)\n */"
    },
    "struct SDL_Version": {
      "size_of": 3,
      "align_of": 1,
      "fields": [
        {
          "name": "major",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_version.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_version.h",
            "line": 53,
            "column": 11
          },
          "comment": "/**\u003C major version */"
        },
        {
          "name": "minor",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 1,
          "location": {
            "fileName": "SDL_version.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_version.h",
            "line": 54,
            "column": 11
          },
          "comment": "/**\u003C minor version */"
        },
        {
          "name": "patch",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 2,
          "location": {
            "fileName": "SDL_version.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_version.h",
            "line": 55,
            "column": 11
          },
          "comment": "/**\u003C update version */"
        }
      ],
      "location": {
        "fileName": "SDL_version.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_version.h",
        "line": 51,
        "column": 16
      },
      "comment": "/**\n * Information about the version of SDL in use.\n *\n * Represents the library\u0027s version as three levels: major revision\n * (increments with massive changes, additions, and enhancements),\n * minor revision (increments with backwards-compatible changes to the\n * major revision), and patchlevel (increments with fixes to the minor\n * revision).\n *\n * \\sa SDL_VERSION\n * \\sa SDL_GetVersion\n */"
    },
    "struct SDL_Vertex": {
      "size_of": 32,
      "align_of": 4,
      "fields": [
        {
          "name": "position",
          "type": {
            "name": "SDL_FPoint",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 4,
            "location": {
              "fileName": "SDL_rect.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
              "line": 62,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_FPoint",
              "kind": "struct",
              "size_of": 8,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 58,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 93,
            "column": 16
          },
          "comment": "/**\u003C Vertex position, in SDL_Renderer coordinates  */"
        },
        {
          "name": "color",
          "type": {
            "name": "SDL_FColor",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 4,
            "location": {
              "fileName": "SDL_pixels.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
              "line": 686,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_FColor",
              "kind": "struct",
              "size_of": 16,
              "align_of": 4,
              "location": {
                "fileName": "SDL_pixels.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
                "line": 680,
                "column": 16
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 94,
            "column": 16
          },
          "comment": "/**\u003C Vertex color */"
        },
        {
          "name": "tex_coord",
          "type": {
            "name": "SDL_FPoint",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 4,
            "location": {
              "fileName": "SDL_rect.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
              "line": 62,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_FPoint",
              "kind": "struct",
              "size_of": 8,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 58,
                "column": 16
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_render.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
            "line": 95,
            "column": 16
          },
          "comment": "/**\u003C Normalized texture coordinates, if needed */"
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 91,
        "column": 16
      },
      "comment": "/**\n *  Vertex structure\n */"
    },
    "struct SDL_VirtualJoystickDesc": {
      "size_of": 88,
      "align_of": 8,
      "fields": [
        {
          "name": "version",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 368,
            "column": 12
          },
          "comment": "/**\u003C \u0060SDL_VIRTUAL_JOYSTICK_DESC_VERSION\u0060 */"
        },
        {
          "name": "type",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 2,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 369,
            "column": 12
          },
          "comment": "/**\u003C \u0060SDL_JoystickType\u0060 */"
        },
        {
          "name": "naxes",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 370,
            "column": 12
          },
          "comment": "/**\u003C the number of axes on this joystick */"
        },
        {
          "name": "nbuttons",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 6,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 371,
            "column": 12
          },
          "comment": "/**\u003C the number of buttons on this joystick */"
        },
        {
          "name": "nhats",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 372,
            "column": 12
          },
          "comment": "/**\u003C the number of hats on this joystick */"
        },
        {
          "name": "vendor_id",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 10,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 373,
            "column": 12
          },
          "comment": "/**\u003C the USB vendor ID of this joystick */"
        },
        {
          "name": "product_id",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 12,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 374,
            "column": 12
          },
          "comment": "/**\u003C the USB product ID of this joystick */"
        },
        {
          "name": "padding",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 14,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 375,
            "column": 12
          },
          "comment": "/**\u003C unused */"
        },
        {
          "name": "button_mask",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 376,
            "column": 12
          },
          "comment": "/**\u003C A mask of which buttons are valid for this controller\n                             e.g. (1 \u003C\u003C SDL_GAMEPAD_BUTTON_SOUTH) */"
        },
        {
          "name": "axis_mask",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 378,
            "column": 12
          },
          "comment": "/**\u003C A mask of which axes are valid for this controller\n                             e.g. (1 \u003C\u003C SDL_GAMEPAD_AXIS_LEFTX) */"
        },
        {
          "name": "name",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 380,
            "column": 17
          },
          "comment": "/**\u003C the name of the joystick */"
        },
        {
          "name": "userdata",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          },
          "offset_of": 32,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 382,
            "column": 11
          },
          "comment": "/**\u003C User data pointer passed to callbacks */"
        },
        {
          "name": "Update",
          "type": {
            "name": "void (void *)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 40,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 383,
            "column": 20
          },
          "comment": "/**\u003C Called when the joystick state should be updated */"
        },
        {
          "name": "SetPlayerIndex",
          "type": {
            "name": "void (void *, int)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 48,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 384,
            "column": 20
          },
          "comment": "/**\u003C Called when the player index is set */"
        },
        {
          "name": "Rumble",
          "type": {
            "name": "int (void *, Uint16, Uint16)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 56,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 385,
            "column": 19
          },
          "comment": "/**\u003C Implements SDL_RumbleJoystick() */"
        },
        {
          "name": "RumbleTriggers",
          "type": {
            "name": "int (void *, Uint16, Uint16)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 64,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 386,
            "column": 19
          },
          "comment": "/**\u003C Implements SDL_RumbleJoystickTriggers() */"
        },
        {
          "name": "SetLED",
          "type": {
            "name": "int (void *, Uint8, Uint8, Uint8)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 72,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 387,
            "column": 19
          },
          "comment": "/**\u003C Implements SDL_SetJoystickLED() */"
        },
        {
          "name": "SendEffect",
          "type": {
            "name": "int (void *, const void *, int)",
            "kind": "functionPointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "offset_of": 80,
          "location": {
            "fileName": "SDL_joystick.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
            "line": 388,
            "column": 19
          },
          "comment": "/**\u003C Implements SDL_SendJoystickEffect() */"
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 366,
        "column": 16
      },
      "comment": "/**\n * The structure that defines an extended virtual joystick description\n *\n * The caller must zero the structure and then initialize the version with \u0060SDL_VIRTUAL_JOYSTICK_DESC_VERSION\u0060 before passing it to SDL_AttachVirtualJoystickEx()\n *  All other elements of this structure are optional and can be left 0.\n *\n * \\sa SDL_AttachVirtualJoystickEx\n */"
    },
    "struct SDL_WindowEvent": {
      "size_of": 32,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "SDL_EventType",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 240,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_EventType",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 57,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 269,
            "column": 19
          },
          "comment": "/**\u003C ::SDL_WINDOWEVENT_* */"
        },
        {
          "name": "reserved",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 4,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 270,
            "column": 12
          }
        },
        {
          "name": "timestamp",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 8,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 271,
            "column": 12
          },
          "comment": "/**\u003C In nanoseconds, populated using SDL_GetTicksNS() */"
        },
        {
          "name": "windowID",
          "type": {
            "name": "SDL_WindowID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_video.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
              "line": 45,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "offset_of": 16,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 272,
            "column": 18
          },
          "comment": "/**\u003C The associated window */"
        },
        {
          "name": "data1",
          "type": {
            "name": "Sint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 168,
              "column": 17
            },
            "inner_type": {
              "name": "int32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_int32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 20,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 273,
            "column": 12
          },
          "comment": "/**\u003C event dependent data */"
        },
        {
          "name": "data2",
          "type": {
            "name": "Sint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 168,
              "column": 17
            },
            "inner_type": {
              "name": "int32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_int32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
                "line": 30,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "offset_of": 24,
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 274,
            "column": 12
          },
          "comment": "/**\u003C event dependent data */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 267,
        "column": 16
      },
      "comment": "/**\n *  Window state change event data (event.window.*)\n */"
    },
    "union SDL_Event": {
      "record_kind": "union",
      "size_of": 128,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 743,
            "column": 12
          },
          "comment": "/**\u003C Event type, shared with all events, Uint32 to cover user events which are not in the SDL_EventType enumeration */"
        },
        {
          "name": "common",
          "type": {
            "name": "SDL_CommonEvent",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 250,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_CommonEvent",
              "kind": "struct",
              "size_of": 16,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 245,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 744,
            "column": 21
          },
          "comment": "/**\u003C Common event data */"
        },
        {
          "name": "display",
          "type": {
            "name": "SDL_DisplayEvent",
            "kind": "typeAlias",
            "size_of": 24,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 262,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_DisplayEvent",
              "kind": "struct",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 255,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 745,
            "column": 22
          },
          "comment": "/**\u003C Display event data */"
        },
        {
          "name": "window",
          "type": {
            "name": "SDL_WindowEvent",
            "kind": "typeAlias",
            "size_of": 32,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 275,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_WindowEvent",
              "kind": "struct",
              "size_of": 32,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 267,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 746,
            "column": 21
          },
          "comment": "/**\u003C Window event data */"
        },
        {
          "name": "kdevice",
          "type": {
            "name": "SDL_KeyboardDeviceEvent",
            "kind": "typeAlias",
            "size_of": 24,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 286,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_KeyboardDeviceEvent",
              "kind": "struct",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 280,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 747,
            "column": 29
          },
          "comment": "/**\u003C Keyboard device change event data */"
        },
        {
          "name": "key",
          "type": {
            "name": "SDL_KeyboardEvent",
            "kind": "typeAlias",
            "size_of": 48,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 303,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_KeyboardEvent",
              "kind": "struct",
              "size_of": 48,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 291,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 748,
            "column": 23
          },
          "comment": "/**\u003C Keyboard event data */"
        },
        {
          "name": "edit",
          "type": {
            "name": "SDL_TextEditingEvent",
            "kind": "typeAlias",
            "size_of": 40,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 321,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_TextEditingEvent",
              "kind": "struct",
              "size_of": 40,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 312,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 749,
            "column": 26
          },
          "comment": "/**\u003C Text editing event data */"
        },
        {
          "name": "text",
          "type": {
            "name": "SDL_TextInputEvent",
            "kind": "typeAlias",
            "size_of": 32,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 336,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_TextInputEvent",
              "kind": "struct",
              "size_of": 32,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 329,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 750,
            "column": 24
          },
          "comment": "/**\u003C Text input event data */"
        },
        {
          "name": "mdevice",
          "type": {
            "name": "SDL_MouseDeviceEvent",
            "kind": "typeAlias",
            "size_of": 24,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 347,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_MouseDeviceEvent",
              "kind": "struct",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 341,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 751,
            "column": 26
          },
          "comment": "/**\u003C Mouse device change event data */"
        },
        {
          "name": "motion",
          "type": {
            "name": "SDL_MouseMotionEvent",
            "kind": "typeAlias",
            "size_of": 48,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 364,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_MouseMotionEvent",
              "kind": "struct",
              "size_of": 48,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 352,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 752,
            "column": 26
          },
          "comment": "/**\u003C Mouse motion event data */"
        },
        {
          "name": "button",
          "type": {
            "name": "SDL_MouseButtonEvent",
            "kind": "typeAlias",
            "size_of": 40,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 382,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_MouseButtonEvent",
              "kind": "struct",
              "size_of": 40,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 369,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 753,
            "column": 26
          },
          "comment": "/**\u003C Mouse button event data */"
        },
        {
          "name": "wheel",
          "type": {
            "name": "SDL_MouseWheelEvent",
            "kind": "typeAlias",
            "size_of": 48,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 399,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_MouseWheelEvent",
              "kind": "struct",
              "size_of": 48,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 387,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 754,
            "column": 25
          },
          "comment": "/**\u003C Mouse wheel event data */"
        },
        {
          "name": "jdevice",
          "type": {
            "name": "SDL_JoyDeviceEvent",
            "kind": "typeAlias",
            "size_of": 24,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 480,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_JoyDeviceEvent",
              "kind": "struct",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 474,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 755,
            "column": 24
          },
          "comment": "/**\u003C Joystick device change event data */"
        },
        {
          "name": "jaxis",
          "type": {
            "name": "SDL_JoyAxisEvent",
            "kind": "typeAlias",
            "size_of": 32,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 416,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_JoyAxisEvent",
              "kind": "struct",
              "size_of": 32,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 404,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 756,
            "column": 22
          },
          "comment": "/**\u003C Joystick axis event data */"
        },
        {
          "name": "jball",
          "type": {
            "name": "SDL_JoyBallEvent",
            "kind": "typeAlias",
            "size_of": 32,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 433,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_JoyBallEvent",
              "kind": "struct",
              "size_of": 32,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 421,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 757,
            "column": 22
          },
          "comment": "/**\u003C Joystick ball event data */"
        },
        {
          "name": "jhat",
          "type": {
            "name": "SDL_JoyHatEvent",
            "kind": "typeAlias",
            "size_of": 24,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 454,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_JoyHatEvent",
              "kind": "struct",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 438,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 758,
            "column": 21
          },
          "comment": "/**\u003C Joystick hat event data */"
        },
        {
          "name": "jbutton",
          "type": {
            "name": "SDL_JoyButtonEvent",
            "kind": "typeAlias",
            "size_of": 24,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 469,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_JoyButtonEvent",
              "kind": "struct",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 459,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 759,
            "column": 24
          },
          "comment": "/**\u003C Joystick button event data */"
        },
        {
          "name": "jbattery",
          "type": {
            "name": "SDL_JoyBatteryEvent",
            "kind": "typeAlias",
            "size_of": 24,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 492,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_JoyBatteryEvent",
              "kind": "struct",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 485,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 760,
            "column": 25
          },
          "comment": "/**\u003C Joystick battery event data */"
        },
        {
          "name": "gdevice",
          "type": {
            "name": "SDL_GamepadDeviceEvent",
            "kind": "typeAlias",
            "size_of": 24,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 537,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_GamepadDeviceEvent",
              "kind": "struct",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 531,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 761,
            "column": 28
          },
          "comment": "/**\u003C Gamepad device event data */"
        },
        {
          "name": "gaxis",
          "type": {
            "name": "SDL_GamepadAxisEvent",
            "kind": "typeAlias",
            "size_of": 32,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 509,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_GamepadAxisEvent",
              "kind": "struct",
              "size_of": 32,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 497,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 762,
            "column": 26
          },
          "comment": "/**\u003C Gamepad axis event data */"
        },
        {
          "name": "gbutton",
          "type": {
            "name": "SDL_GamepadButtonEvent",
            "kind": "typeAlias",
            "size_of": 24,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 525,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_GamepadButtonEvent",
              "kind": "struct",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 515,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 763,
            "column": 28
          },
          "comment": "/**\u003C Gamepad button event data */"
        },
        {
          "name": "gtouchpad",
          "type": {
            "name": "SDL_GamepadTouchpadEvent",
            "kind": "typeAlias",
            "size_of": 40,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 553,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_GamepadTouchpadEvent",
              "kind": "struct",
              "size_of": 40,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 542,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 764,
            "column": 30
          },
          "comment": "/**\u003C Gamepad touchpad event data */"
        },
        {
          "name": "gsensor",
          "type": {
            "name": "SDL_GamepadSensorEvent",
            "kind": "typeAlias",
            "size_of": 48,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 567,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_GamepadSensorEvent",
              "kind": "struct",
              "size_of": 48,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 558,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 765,
            "column": 28
          },
          "comment": "/**\u003C Gamepad sensor event data */"
        },
        {
          "name": "adevice",
          "type": {
            "name": "SDL_AudioDeviceEvent",
            "kind": "typeAlias",
            "size_of": 24,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 582,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_AudioDeviceEvent",
              "kind": "struct",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 572,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 766,
            "column": 26
          },
          "comment": "/**\u003C Audio device event data */"
        },
        {
          "name": "cdevice",
          "type": {
            "name": "SDL_CameraDeviceEvent",
            "kind": "typeAlias",
            "size_of": 24,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 596,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_CameraDeviceEvent",
              "kind": "struct",
              "size_of": 24,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 587,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 767,
            "column": 27
          },
          "comment": "/**\u003C Camera device event data */"
        },
        {
          "name": "sensor",
          "type": {
            "name": "SDL_SensorEvent",
            "kind": "typeAlias",
            "size_of": 56,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 711,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_SensorEvent",
              "kind": "struct",
              "size_of": 56,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 703,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 768,
            "column": 21
          },
          "comment": "/**\u003C Sensor event data */"
        },
        {
          "name": "quit",
          "type": {
            "name": "SDL_QuitEvent",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 721,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_QuitEvent",
              "kind": "struct",
              "size_of": 16,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 716,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 769,
            "column": 19
          },
          "comment": "/**\u003C Quit request event data */"
        },
        {
          "name": "user",
          "type": {
            "name": "SDL_UserEvent",
            "kind": "typeAlias",
            "size_of": 40,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 735,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_UserEvent",
              "kind": "struct",
              "size_of": 40,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 726,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 770,
            "column": 19
          },
          "comment": "/**\u003C Custom event data */"
        },
        {
          "name": "tfinger",
          "type": {
            "name": "SDL_TouchFingerEvent",
            "kind": "typeAlias",
            "size_of": 56,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 614,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_TouchFingerEvent",
              "kind": "struct",
              "size_of": 56,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 601,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 771,
            "column": 26
          },
          "comment": "/**\u003C Touch finger event data */"
        },
        {
          "name": "ptip",
          "type": {
            "name": "SDL_PenTipEvent",
            "kind": "typeAlias",
            "size_of": 64,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 634,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_PenTipEvent",
              "kind": "struct",
              "size_of": 64,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 621,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 772,
            "column": 21
          },
          "comment": "/**\u003C Pen tip touching or leaving drawing surface */"
        },
        {
          "name": "pmotion",
          "type": {
            "name": "SDL_PenMotionEvent",
            "kind": "typeAlias",
            "size_of": 64,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 652,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_PenMotionEvent",
              "kind": "struct",
              "size_of": 64,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 639,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 773,
            "column": 24
          },
          "comment": "/**\u003C Pen change in position, pressure, or angle */"
        },
        {
          "name": "pbutton",
          "type": {
            "name": "SDL_PenButtonEvent",
            "kind": "typeAlias",
            "size_of": 64,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 670,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_PenButtonEvent",
              "kind": "struct",
              "size_of": 64,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 657,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 774,
            "column": 24
          },
          "comment": "/**\u003C Pen button press */"
        },
        {
          "name": "drop",
          "type": {
            "name": "SDL_DropEvent",
            "kind": "typeAlias",
            "size_of": 48,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 688,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_DropEvent",
              "kind": "struct",
              "size_of": 48,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 678,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 775,
            "column": 19
          },
          "comment": "/**\u003C Drag and drop event data */"
        },
        {
          "name": "clipboard",
          "type": {
            "name": "SDL_ClipboardEvent",
            "kind": "typeAlias",
            "size_of": 16,
            "align_of": 8,
            "location": {
              "fileName": "SDL_events.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
              "line": 698,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_ClipboardEvent",
              "kind": "struct",
              "size_of": 16,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 693,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 776,
            "column": 24
          },
          "comment": "/**\u003C Clipboard event data */"
        },
        {
          "name": "padding",
          "type": {
            "name": "Uint8[128]",
            "kind": "array",
            "size_of": 128,
            "align_of": 8,
            "size_of_element": 1,
            "array_size": 128,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "Uint8",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 150,
                "column": 17
              },
              "inner_type": {
                "name": "uint8_t",
                "kind": "typeAlias",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "_uint8_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                  "line": 31,
                  "column": 23,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned char",
                  "kind": "primitive",
                  "size_of": 1,
                  "align_of": 1,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_events.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
            "line": 791,
            "column": 11
          },
          "comment": "/* This is necessary for ABI compatibility between Visual C\u002B\u002B and GCC.\n       Visual C\u002B\u002B will respect the push pack pragma and use 52 bytes (size of\n       SDL_TextEditingEvent, the largest structure for 32-bit and 64-bit\n       architectures) for this union, and GCC will use the alignment of the\n       largest datatype within the union, which is 8 bytes on 64-bit\n       architectures.\n\n       So... we\u0027ll add padding to force the size to be the same for both.\n\n       On architectures where pointers are 16 bytes, this needs rounding up to\n       the next multiple of 16, 64, and on architectures where pointers are\n       even larger the size of SDL_UserEvent will dominate as being 3 pointers.\n    */"
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 741,
        "column": 15
      },
      "comment": "/**\n *  General event structure\n */"
    },
    "union SDL_GamepadBinding::(unnamed at /Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h:184:5)": {
      "record_kind": "union",
      "size_of": 12,
      "align_of": 4,
      "fields": [
        {
          "name": "button",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 186,
            "column": 13
          }
        },
        {
          "name": "axis",
          "type": {
            "name": "struct SDL_GamepadBinding::(unnamed at /Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h:188:9)",
            "kind": "struct",
            "size_of": 12,
            "align_of": 4,
            "is_snonymous": true,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 188,
              "column": 9
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 193,
            "column": 11
          }
        },
        {
          "name": "hat",
          "type": {
            "name": "struct SDL_GamepadBinding::(unnamed at /Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h:195:9)",
            "kind": "struct",
            "size_of": 8,
            "align_of": 4,
            "is_snonymous": true,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 195,
              "column": 9
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 199,
            "column": 11
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 184,
        "column": 5
      }
    },
    "union SDL_GamepadBinding::(unnamed at /Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h:204:5)": {
      "record_kind": "union",
      "size_of": 12,
      "align_of": 4,
      "fields": [
        {
          "name": "button",
          "type": {
            "name": "SDL_GamepadButton",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 128,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_GamepadButton",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_gamepad.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
                "line": 98,
                "column": 9
              }
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 206,
            "column": 27
          }
        },
        {
          "name": "axis",
          "type": {
            "name": "struct SDL_GamepadBinding::(unnamed at /Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h:208:9)",
            "kind": "struct",
            "size_of": 12,
            "align_of": 4,
            "is_snonymous": true,
            "location": {
              "fileName": "SDL_gamepad.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
              "line": 208,
              "column": 9
            }
          },
          "location": {
            "fileName": "SDL_gamepad.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
            "line": 213,
            "column": 11
          }
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 204,
        "column": 5
      }
    },
    "union SDL_HapticEffect": {
      "record_kind": "union",
      "size_of": 72,
      "align_of": 8,
      "fields": [
        {
          "name": "type",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 831,
            "column": 12
          },
          "comment": "/**\u003C Effect type. */"
        },
        {
          "name": "constant",
          "type": {
            "name": "SDL_HapticConstant",
            "kind": "typeAlias",
            "size_of": 40,
            "align_of": 4,
            "location": {
              "fileName": "SDL_haptic.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
              "line": 518,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_HapticConstant",
              "kind": "struct",
              "size_of": 40,
              "align_of": 4,
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 496,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 832,
            "column": 24
          },
          "comment": "/**\u003C Constant effect. */"
        },
        {
          "name": "periodic",
          "type": {
            "name": "SDL_HapticPeriodic",
            "kind": "typeAlias",
            "size_of": 48,
            "align_of": 4,
            "location": {
              "fileName": "SDL_haptic.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
              "line": 604,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_HapticPeriodic",
              "kind": "struct",
              "size_of": 48,
              "align_of": 4,
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 577,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 833,
            "column": 24
          },
          "comment": "/**\u003C Periodic effect. */"
        },
        {
          "name": "condition",
          "type": {
            "name": "SDL_HapticCondition",
            "kind": "typeAlias",
            "size_of": 68,
            "align_of": 4,
            "location": {
              "fileName": "SDL_haptic.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
              "line": 652,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_HapticCondition",
              "kind": "struct",
              "size_of": 68,
              "align_of": 4,
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 630,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 834,
            "column": 25
          },
          "comment": "/**\u003C Condition effect. */"
        },
        {
          "name": "ramp",
          "type": {
            "name": "SDL_HapticRamp",
            "kind": "typeAlias",
            "size_of": 44,
            "align_of": 4,
            "location": {
              "fileName": "SDL_haptic.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
              "line": 690,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_HapticRamp",
              "kind": "struct",
              "size_of": 44,
              "align_of": 4,
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 667,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 835,
            "column": 20
          },
          "comment": "/**\u003C Ramp effect. */"
        },
        {
          "name": "leftright",
          "type": {
            "name": "SDL_HapticLeftRight",
            "kind": "typeAlias",
            "size_of": 12,
            "align_of": 4,
            "location": {
              "fileName": "SDL_haptic.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
              "line": 715,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_HapticLeftRight",
              "kind": "struct",
              "size_of": 12,
              "align_of": 4,
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 704,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 836,
            "column": 25
          },
          "comment": "/**\u003C Left/Right effect. */"
        },
        {
          "name": "custom",
          "type": {
            "name": "SDL_HapticCustom",
            "kind": "typeAlias",
            "size_of": 56,
            "align_of": 8,
            "location": {
              "fileName": "SDL_haptic.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
              "line": 757,
              "column": 3
            },
            "inner_type": {
              "name": "struct SDL_HapticCustom",
              "kind": "struct",
              "size_of": 56,
              "align_of": 8,
              "location": {
                "fileName": "SDL_haptic.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
                "line": 732,
                "column": 16
              }
            }
          },
          "location": {
            "fileName": "SDL_haptic.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
            "line": 837,
            "column": 22
          },
          "comment": "/**\u003C Custom effect. */"
        }
      ],
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 828,
        "column": 15
      },
      "comment": "/**\n *  The generic template for any haptic effect.\n *\n *  All values max at 32767 (0x7FFF).  Signed values also can be negative.\n *  Time values unless specified otherwise are in milliseconds.\n *\n *  You can also pass ::SDL_HAPTIC_INFINITY to length instead of a 0-32767\n *  value.  Neither delay, interval, attack_length nor fade_length support\n *  ::SDL_HAPTIC_INFINITY.  Fade will also not be used since effect never ends.\n *\n *  Additionally, the ::SDL_HAPTIC_RAMP effect does not support a duration of\n *  ::SDL_HAPTIC_INFINITY.\n *\n *  Button triggers may not be supported on all devices, it is advised to not\n *  use them if possible.  Buttons start at index 1 instead of index 0 like\n *  the joystick.\n *\n *  If both attack_length and fade_level are 0, the envelope is not used,\n *  otherwise both values are used.\n *\n *  Common parts:\n *  \\code\n *  // Replay - All effects have this\n *  Uint32 length;        // Duration of effect (ms).\n *  Uint16 delay;         // Delay before starting effect.\n *\n *  // Trigger - All effects have this\n *  Uint16 button;        // Button that triggers effect.\n *  Uint16 interval;      // How soon before effect can be triggered again.\n *\n *  // Envelope - All effects except condition effects have this\n *  Uint16 attack_length; // Duration of the attack (ms).\n *  Uint16 attack_level;  // Level at the start of the attack.\n *  Uint16 fade_length;   // Duration of the fade out (ms).\n *  Uint16 fade_level;    // Level at the end of the fade.\n *  \\endcode\n *\n *\n *  Here we have an example of a constant effect evolution in time:\n *  \\verbatim\n    Strength\n    ^\n    |\n    |    effect level --\u003E  _________________\n    |                     /                 \\\n    |                    /                   \\\n    |                   /                     \\\n    |                  /                       \\\n    | attack_level --\u003E |                        \\\n    |                  |                        |  \u003C---  fade_level\n    |\n    \u002B--------------------------------------------------\u003E Time\n                       [--]                 [---]\n                       attack_length        fade_length\n\n    [------------------][-----------------------]\n    delay               length\n    \\endverbatim\n *\n *  Note either the attack_level or the fade_level may be above the actual\n *  effect level.\n *\n *  \\sa SDL_HapticConstant\n *  \\sa SDL_HapticPeriodic\n *  \\sa SDL_HapticCondition\n *  \\sa SDL_HapticRamp\n *  \\sa SDL_HapticLeftRight\n *  \\sa SDL_HapticCustom\n */"
    }
  },
  "enums": {
    "enum SDL_CameraPosition": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_CAMERA_POSITION_UNKNOWN"
        },
        {
          "name": "SDL_CAMERA_POSITION_FRONT_FACING",
          "value": 1
        },
        {
          "name": "SDL_CAMERA_POSITION_BACK_FACING",
          "value": 2
        }
      ],
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 78,
        "column": 14
      },
      "comment": "/**\n * The position of camera in relation to system device.\n *\n * \\sa SDL_GetCameraDevicePosition\n */"
    },
    "enum SDL_PathType": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_PATHTYPE_NONE"
        },
        {
          "name": "SDL_PATHTYPE_FILE",
          "value": 1
        },
        {
          "name": "SDL_PATHTYPE_DIRECTORY",
          "value": 2
        },
        {
          "name": "SDL_PATHTYPE_OTHER",
          "value": 3
        }
      ],
      "location": {
        "fileName": "SDL_filesystem.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
        "line": 240,
        "column": 14
      },
      "comment": "/* Abstract filesystem interface */"
    },
    "SDL_AssertState": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_ASSERTION_RETRY"
        },
        {
          "name": "SDL_ASSERTION_BREAK",
          "value": 1
        },
        {
          "name": "SDL_ASSERTION_ABORT",
          "value": 2
        },
        {
          "name": "SDL_ASSERTION_IGNORE",
          "value": 3
        },
        {
          "name": "SDL_ASSERTION_ALWAYS_IGNORE",
          "value": 4
        }
      ],
      "location": {
        "fileName": "SDL_assert.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
        "line": 119,
        "column": 9
      }
    },
    "SDL_BlendFactor": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_BLENDFACTOR_ZERO",
          "value": 1
        },
        {
          "name": "SDL_BLENDFACTOR_ONE",
          "value": 2
        },
        {
          "name": "SDL_BLENDFACTOR_SRC_COLOR",
          "value": 3
        },
        {
          "name": "SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR",
          "value": 4
        },
        {
          "name": "SDL_BLENDFACTOR_SRC_ALPHA",
          "value": 5
        },
        {
          "name": "SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA",
          "value": 6
        },
        {
          "name": "SDL_BLENDFACTOR_DST_COLOR",
          "value": 7
        },
        {
          "name": "SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR",
          "value": 8
        },
        {
          "name": "SDL_BLENDFACTOR_DST_ALPHA",
          "value": 9
        },
        {
          "name": "SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA",
          "value": 10
        }
      ],
      "location": {
        "fileName": "SDL_blendmode.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
        "line": 77,
        "column": 9
      },
      "comment": "/**\n *  The normalized factor used to multiply pixel components\n */"
    },
    "SDL_BlendMode": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_BLENDMODE_NONE"
        },
        {
          "name": "SDL_BLENDMODE_BLEND",
          "value": 1
        },
        {
          "name": "SDL_BLENDMODE_ADD",
          "value": 2
        },
        {
          "name": "SDL_BLENDMODE_MOD",
          "value": 4
        },
        {
          "name": "SDL_BLENDMODE_MUL",
          "value": 8
        },
        {
          "name": "SDL_BLENDMODE_INVALID",
          "value": 2147483647
        }
      ],
      "location": {
        "fileName": "SDL_blendmode.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
        "line": 40,
        "column": 9
      },
      "comment": "/**\n *  The blend mode used in SDL_RenderTexture() and drawing operations.\n */"
    },
    "SDL_BlendOperation": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_BLENDOPERATION_ADD",
          "value": 1
        },
        {
          "name": "SDL_BLENDOPERATION_SUBTRACT",
          "value": 2
        },
        {
          "name": "SDL_BLENDOPERATION_REV_SUBTRACT",
          "value": 3
        },
        {
          "name": "SDL_BLENDOPERATION_MINIMUM",
          "value": 4
        },
        {
          "name": "SDL_BLENDOPERATION_MAXIMUM",
          "value": 5
        }
      ],
      "location": {
        "fileName": "SDL_blendmode.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_blendmode.h",
        "line": 65,
        "column": 9
      },
      "comment": "/**\n *  The blend operation used when combining source and destination pixel components\n */"
    },
    "SDL_Colorspace": {
      "size_of": 4,
      "values": [],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 567,
        "column": 9
      }
    },
    "SDL_DisplayOrientation": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_ORIENTATION_UNKNOWN"
        },
        {
          "name": "SDL_ORIENTATION_LANDSCAPE",
          "value": 1
        },
        {
          "name": "SDL_ORIENTATION_LANDSCAPE_FLIPPED",
          "value": 2
        },
        {
          "name": "SDL_ORIENTATION_PORTRAIT",
          "value": 3
        },
        {
          "name": "SDL_ORIENTATION_PORTRAIT_FLIPPED",
          "value": 4
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 96,
        "column": 9
      },
      "comment": "/**\n *  Display orientation\n */"
    },
    "SDL_errorcode": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_ENOMEM"
        },
        {
          "name": "SDL_EFREAD",
          "value": 1
        },
        {
          "name": "SDL_EFWRITE",
          "value": 2
        },
        {
          "name": "SDL_EFSEEK",
          "value": 3
        },
        {
          "name": "SDL_UNSUPPORTED",
          "value": 4
        },
        {
          "name": "SDL_LASTERROR",
          "value": 5
        }
      ],
      "location": {
        "fileName": "SDL_error.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_error.h",
        "line": 125,
        "column": 9
      }
    },
    "SDL_eventaction": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_ADDEVENT"
        },
        {
          "name": "SDL_PEEKEVENT",
          "value": 1
        },
        {
          "name": "SDL_GETEVENT",
          "value": 2
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 825,
        "column": 9
      },
      "comment": "/* @{ */"
    },
    "SDL_EventType": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_EVENT_FIRST"
        },
        {
          "name": "SDL_EVENT_QUIT",
          "value": 256
        },
        {
          "name": "SDL_EVENT_TERMINATING",
          "value": 257
        },
        {
          "name": "SDL_EVENT_LOW_MEMORY",
          "value": 258
        },
        {
          "name": "SDL_EVENT_WILL_ENTER_BACKGROUND",
          "value": 259
        },
        {
          "name": "SDL_EVENT_DID_ENTER_BACKGROUND",
          "value": 260
        },
        {
          "name": "SDL_EVENT_WILL_ENTER_FOREGROUND",
          "value": 261
        },
        {
          "name": "SDL_EVENT_DID_ENTER_FOREGROUND",
          "value": 262
        },
        {
          "name": "SDL_EVENT_LOCALE_CHANGED",
          "value": 263
        },
        {
          "name": "SDL_EVENT_SYSTEM_THEME_CHANGED",
          "value": 264
        },
        {
          "name": "SDL_EVENT_DISPLAY_ORIENTATION",
          "value": 337
        },
        {
          "name": "SDL_EVENT_DISPLAY_ADDED",
          "value": 338
        },
        {
          "name": "SDL_EVENT_DISPLAY_REMOVED",
          "value": 339
        },
        {
          "name": "SDL_EVENT_DISPLAY_MOVED",
          "value": 340
        },
        {
          "name": "SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED",
          "value": 341
        },
        {
          "name": "SDL_EVENT_DISPLAY_HDR_STATE_CHANGED",
          "value": 342
        },
        {
          "name": "SDL_EVENT_DISPLAY_FIRST",
          "value": 337
        },
        {
          "name": "SDL_EVENT_DISPLAY_LAST",
          "value": 342
        },
        {
          "name": "SDL_EVENT_WINDOW_SHOWN",
          "value": 514
        },
        {
          "name": "SDL_EVENT_WINDOW_HIDDEN",
          "value": 515
        },
        {
          "name": "SDL_EVENT_WINDOW_EXPOSED",
          "value": 516
        },
        {
          "name": "SDL_EVENT_WINDOW_MOVED",
          "value": 517
        },
        {
          "name": "SDL_EVENT_WINDOW_RESIZED",
          "value": 518
        },
        {
          "name": "SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED",
          "value": 519
        },
        {
          "name": "SDL_EVENT_WINDOW_MINIMIZED",
          "value": 520
        },
        {
          "name": "SDL_EVENT_WINDOW_MAXIMIZED",
          "value": 521
        },
        {
          "name": "SDL_EVENT_WINDOW_RESTORED",
          "value": 522
        },
        {
          "name": "SDL_EVENT_WINDOW_MOUSE_ENTER",
          "value": 523
        },
        {
          "name": "SDL_EVENT_WINDOW_MOUSE_LEAVE",
          "value": 524
        },
        {
          "name": "SDL_EVENT_WINDOW_FOCUS_GAINED",
          "value": 525
        },
        {
          "name": "SDL_EVENT_WINDOW_FOCUS_LOST",
          "value": 526
        },
        {
          "name": "SDL_EVENT_WINDOW_CLOSE_REQUESTED",
          "value": 527
        },
        {
          "name": "SDL_EVENT_WINDOW_TAKE_FOCUS",
          "value": 528
        },
        {
          "name": "SDL_EVENT_WINDOW_HIT_TEST",
          "value": 529
        },
        {
          "name": "SDL_EVENT_WINDOW_ICCPROF_CHANGED",
          "value": 530
        },
        {
          "name": "SDL_EVENT_WINDOW_DISPLAY_CHANGED",
          "value": 531
        },
        {
          "name": "SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED",
          "value": 532
        },
        {
          "name": "SDL_EVENT_WINDOW_OCCLUDED",
          "value": 533
        },
        {
          "name": "SDL_EVENT_WINDOW_ENTER_FULLSCREEN",
          "value": 534
        },
        {
          "name": "SDL_EVENT_WINDOW_LEAVE_FULLSCREEN",
          "value": 535
        },
        {
          "name": "SDL_EVENT_WINDOW_DESTROYED",
          "value": 536
        },
        {
          "name": "SDL_EVENT_WINDOW_PEN_ENTER",
          "value": 537
        },
        {
          "name": "SDL_EVENT_WINDOW_PEN_LEAVE",
          "value": 538
        },
        {
          "name": "SDL_EVENT_WINDOW_FIRST",
          "value": 514
        },
        {
          "name": "SDL_EVENT_WINDOW_LAST",
          "value": 538
        },
        {
          "name": "SDL_EVENT_KEY_DOWN",
          "value": 768
        },
        {
          "name": "SDL_EVENT_KEY_UP",
          "value": 769
        },
        {
          "name": "SDL_EVENT_TEXT_EDITING",
          "value": 770
        },
        {
          "name": "SDL_EVENT_TEXT_INPUT",
          "value": 771
        },
        {
          "name": "SDL_EVENT_KEYMAP_CHANGED",
          "value": 772
        },
        {
          "name": "SDL_EVENT_KEYBOARD_ADDED",
          "value": 773
        },
        {
          "name": "SDL_EVENT_KEYBOARD_REMOVED",
          "value": 774
        },
        {
          "name": "SDL_EVENT_MOUSE_MOTION",
          "value": 1024
        },
        {
          "name": "SDL_EVENT_MOUSE_BUTTON_DOWN",
          "value": 1025
        },
        {
          "name": "SDL_EVENT_MOUSE_BUTTON_UP",
          "value": 1026
        },
        {
          "name": "SDL_EVENT_MOUSE_WHEEL",
          "value": 1027
        },
        {
          "name": "SDL_EVENT_MOUSE_ADDED",
          "value": 1028
        },
        {
          "name": "SDL_EVENT_MOUSE_REMOVED",
          "value": 1029
        },
        {
          "name": "SDL_EVENT_JOYSTICK_AXIS_MOTION",
          "value": 1536
        },
        {
          "name": "SDL_EVENT_JOYSTICK_BALL_MOTION",
          "value": 1537
        },
        {
          "name": "SDL_EVENT_JOYSTICK_HAT_MOTION",
          "value": 1538
        },
        {
          "name": "SDL_EVENT_JOYSTICK_BUTTON_DOWN",
          "value": 1539
        },
        {
          "name": "SDL_EVENT_JOYSTICK_BUTTON_UP",
          "value": 1540
        },
        {
          "name": "SDL_EVENT_JOYSTICK_ADDED",
          "value": 1541
        },
        {
          "name": "SDL_EVENT_JOYSTICK_REMOVED",
          "value": 1542
        },
        {
          "name": "SDL_EVENT_JOYSTICK_BATTERY_UPDATED",
          "value": 1543
        },
        {
          "name": "SDL_EVENT_JOYSTICK_UPDATE_COMPLETE",
          "value": 1544
        },
        {
          "name": "SDL_EVENT_GAMEPAD_AXIS_MOTION",
          "value": 1616
        },
        {
          "name": "SDL_EVENT_GAMEPAD_BUTTON_DOWN",
          "value": 1617
        },
        {
          "name": "SDL_EVENT_GAMEPAD_BUTTON_UP",
          "value": 1618
        },
        {
          "name": "SDL_EVENT_GAMEPAD_ADDED",
          "value": 1619
        },
        {
          "name": "SDL_EVENT_GAMEPAD_REMOVED",
          "value": 1620
        },
        {
          "name": "SDL_EVENT_GAMEPAD_REMAPPED",
          "value": 1621
        },
        {
          "name": "SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN",
          "value": 1622
        },
        {
          "name": "SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION",
          "value": 1623
        },
        {
          "name": "SDL_EVENT_GAMEPAD_TOUCHPAD_UP",
          "value": 1624
        },
        {
          "name": "SDL_EVENT_GAMEPAD_SENSOR_UPDATE",
          "value": 1625
        },
        {
          "name": "SDL_EVENT_GAMEPAD_UPDATE_COMPLETE",
          "value": 1626
        },
        {
          "name": "SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED",
          "value": 1627
        },
        {
          "name": "SDL_EVENT_FINGER_DOWN",
          "value": 1792
        },
        {
          "name": "SDL_EVENT_FINGER_UP",
          "value": 1793
        },
        {
          "name": "SDL_EVENT_FINGER_MOTION",
          "value": 1794
        },
        {
          "name": "SDL_EVENT_CLIPBOARD_UPDATE",
          "value": 2304
        },
        {
          "name": "SDL_EVENT_DROP_FILE",
          "value": 4096
        },
        {
          "name": "SDL_EVENT_DROP_TEXT",
          "value": 4097
        },
        {
          "name": "SDL_EVENT_DROP_BEGIN",
          "value": 4098
        },
        {
          "name": "SDL_EVENT_DROP_COMPLETE",
          "value": 4099
        },
        {
          "name": "SDL_EVENT_DROP_POSITION",
          "value": 4100
        },
        {
          "name": "SDL_EVENT_AUDIO_DEVICE_ADDED",
          "value": 4352
        },
        {
          "name": "SDL_EVENT_AUDIO_DEVICE_REMOVED",
          "value": 4353
        },
        {
          "name": "SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED",
          "value": 4354
        },
        {
          "name": "SDL_EVENT_SENSOR_UPDATE",
          "value": 4608
        },
        {
          "name": "SDL_EVENT_PEN_DOWN",
          "value": 4864
        },
        {
          "name": "SDL_EVENT_PEN_UP",
          "value": 4865
        },
        {
          "name": "SDL_EVENT_PEN_MOTION",
          "value": 4866
        },
        {
          "name": "SDL_EVENT_PEN_BUTTON_DOWN",
          "value": 4867
        },
        {
          "name": "SDL_EVENT_PEN_BUTTON_UP",
          "value": 4868
        },
        {
          "name": "SDL_EVENT_CAMERA_DEVICE_ADDED",
          "value": 5120
        },
        {
          "name": "SDL_EVENT_CAMERA_DEVICE_REMOVED",
          "value": 5121
        },
        {
          "name": "SDL_EVENT_CAMERA_DEVICE_APPROVED",
          "value": 5122
        },
        {
          "name": "SDL_EVENT_CAMERA_DEVICE_DENIED",
          "value": 5123
        },
        {
          "name": "SDL_EVENT_RENDER_TARGETS_RESET",
          "value": 8192
        },
        {
          "name": "SDL_EVENT_RENDER_DEVICE_RESET",
          "value": 8193
        },
        {
          "name": "SDL_EVENT_POLL_SENTINEL",
          "value": 32512
        },
        {
          "name": "SDL_EVENT_USER",
          "value": 32768
        },
        {
          "name": "SDL_EVENT_LAST",
          "value": 65535
        },
        {
          "name": "SDL_EVENT_ENUM_PADDING",
          "value": 2147483647
        }
      ],
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 57,
        "column": 9
      },
      "comment": "/**\n * The types of events that can be delivered.\n */"
    },
    "SDL_FlashOperation": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_FLASH_CANCEL"
        },
        {
          "name": "SDL_FLASH_BRIEFLY",
          "value": 1
        },
        {
          "name": "SDL_FLASH_UNTIL_FOCUSED",
          "value": 2
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 162,
        "column": 9
      },
      "comment": "/**\n *  Window flash operation\n */"
    },
    "SDL_FlipMode": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_FLIP_NONE"
        },
        {
          "name": "SDL_FLIP_HORIZONTAL",
          "value": 1
        },
        {
          "name": "SDL_FLIP_VERTICAL",
          "value": 2
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 81,
        "column": 9
      },
      "comment": "/**\n * The flip mode\n */"
    },
    "SDL_Folder": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_FOLDER_HOME"
        },
        {
          "name": "SDL_FOLDER_DESKTOP",
          "value": 1
        },
        {
          "name": "SDL_FOLDER_DOCUMENTS",
          "value": 2
        },
        {
          "name": "SDL_FOLDER_DOWNLOADS",
          "value": 3
        },
        {
          "name": "SDL_FOLDER_MUSIC",
          "value": 4
        },
        {
          "name": "SDL_FOLDER_PICTURES",
          "value": 5
        },
        {
          "name": "SDL_FOLDER_PUBLICSHARE",
          "value": 6
        },
        {
          "name": "SDL_FOLDER_SAVEDGAMES",
          "value": 7
        },
        {
          "name": "SDL_FOLDER_SCREENSHOTS",
          "value": 8
        },
        {
          "name": "SDL_FOLDER_TEMPLATES",
          "value": 9
        },
        {
          "name": "SDL_FOLDER_VIDEOS",
          "value": 10
        }
      ],
      "location": {
        "fileName": "SDL_filesystem.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
        "line": 168,
        "column": 9
      },
      "comment": "/**\n * The type of the OS-provided default folder for a specific purpose.\n *\n * Note that the Trash folder isn\u0027t included here, because trashing files usually\n * involves extra OS-specific functionality to remember the file\u0027s original\n * location.\n *\n * The folders supported per platform are:\n *\n * |             | Windows | macOS/iOS | tvOS | Unix (XDG) | Haiku | Emscripten |\n * | ----------- | ------- | --------- | ---- | ---------- | ----- | ---------- |\n * | HOME        | X       | X         |      | X          | X     | X          |\n * | DESKTOP     | X       | X         |      | X          | X     |            |\n * | DOCUMENTS   | X       | X         |      | X          |       |            |\n * | DOWNLOADS   | Vista\u002B  | X         |      | X          |       |            |\n * | MUSIC       | X       | X         |      | X          |       |            |\n * | PICTURES    | X       | X         |      | X          |       |            |\n * | PUBLICSHARE |         | X         |      | X          |       |            |\n * | SAVEDGAMES  | Vista\u002B  |           |      |            |       |            |\n * | SCREENSHOTS | Vista\u002B  |           |      |            |       |            |\n * | TEMPLATES   | X       | X         |      | X          |       |            |\n * | VIDEOS      | X       | X*        |      | X          |       |            |\n *\n * * Note that on macOS/iOS, the Videos folder is called \u0022Movies\u0022.\n *\n * \\sa SDL_GetUserFolder\n */"
    },
    "SDL_GamepadAxis": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_GAMEPAD_AXIS_INVALID",
          "value": -1
        },
        {
          "name": "SDL_GAMEPAD_AXIS_LEFTX"
        },
        {
          "name": "SDL_GAMEPAD_AXIS_LEFTY",
          "value": 1
        },
        {
          "name": "SDL_GAMEPAD_AXIS_RIGHTX",
          "value": 2
        },
        {
          "name": "SDL_GAMEPAD_AXIS_RIGHTY",
          "value": 3
        },
        {
          "name": "SDL_GAMEPAD_AXIS_LEFT_TRIGGER",
          "value": 4
        },
        {
          "name": "SDL_GAMEPAD_AXIS_RIGHT_TRIGGER",
          "value": 5
        },
        {
          "name": "SDL_GAMEPAD_AXIS_MAX",
          "value": 6
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 161,
        "column": 9
      },
      "comment": "/**\n *  The list of axes available on a gamepad\n *\n *  Thumbstick axis values range from SDL_JOYSTICK_AXIS_MIN to SDL_JOYSTICK_AXIS_MAX,\n *  and are centered within ~8000 of zero, though advanced UI will allow users to set\n *  or autodetect the dead zone, which varies between gamepads.\n *\n *  Trigger axis values range from 0 (released) to SDL_JOYSTICK_AXIS_MAX\n *  (fully pressed) when reported by SDL_GetGamepadAxis(). Note that this is not the\n *  same range that will be reported by the lower-level SDL_GetJoystickAxis().\n */"
    },
    "SDL_GamepadBindingType": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_GAMEPAD_BINDTYPE_NONE"
        },
        {
          "name": "SDL_GAMEPAD_BINDTYPE_BUTTON",
          "value": 1
        },
        {
          "name": "SDL_GAMEPAD_BINDTYPE_AXIS",
          "value": 2
        },
        {
          "name": "SDL_GAMEPAD_BINDTYPE_HAT",
          "value": 3
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 173,
        "column": 9
      }
    },
    "SDL_GamepadButton": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_GAMEPAD_BUTTON_INVALID",
          "value": -1
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_SOUTH"
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_EAST",
          "value": 1
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_WEST",
          "value": 2
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_NORTH",
          "value": 3
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_BACK",
          "value": 4
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_GUIDE",
          "value": 5
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_START",
          "value": 6
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_LEFT_STICK",
          "value": 7
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_RIGHT_STICK",
          "value": 8
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_LEFT_SHOULDER",
          "value": 9
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER",
          "value": 10
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_DPAD_UP",
          "value": 11
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_DPAD_DOWN",
          "value": 12
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_DPAD_LEFT",
          "value": 13
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_DPAD_RIGHT",
          "value": 14
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_MISC1",
          "value": 15
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1",
          "value": 16
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_LEFT_PADDLE1",
          "value": 17
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2",
          "value": 18
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_LEFT_PADDLE2",
          "value": 19
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_TOUCHPAD",
          "value": 20
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_MISC2",
          "value": 21
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_MISC3",
          "value": 22
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_MISC4",
          "value": 23
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_MISC5",
          "value": 24
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_MISC6",
          "value": 25
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_MAX",
          "value": 26
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 98,
        "column": 9
      },
      "comment": "/**\n *  The list of buttons available on a gamepad\n *\n *  For controllers that use a diamond pattern for the face buttons,\n *  the south/east/west/north buttons below correspond to the locations\n *  in the diamond pattern. For Xbox controllers, this would be A/B/X/Y,\n *  for Nintendo Switch controllers, this would be B/A/Y/X, for\n *  PlayStation controllers this would be Cross/Circle/Square/Triangle.\n *\n *  For controllers that don\u0027t use a diamond pattern for the face buttons,\n *  the south/east/west/north buttons indicate the buttons labeled A, B,\n *  C, D, or 1, 2, 3, 4, or for controllers that aren\u0027t labeled, they are\n *  the primary, secondary, etc. buttons.\n *\n *  The activate action is often the south button and the cancel action\n *  is often the east button, but in some regions this is reversed, so\n *  your game should allow remapping actions based on user preferences.\n *\n *  You can query the labels for the face buttons using SDL_GetGamepadButtonLabel()\n */"
    },
    "SDL_GamepadButtonLabel": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN"
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_LABEL_A",
          "value": 1
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_LABEL_B",
          "value": 2
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_LABEL_X",
          "value": 3
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_LABEL_Y",
          "value": 4
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_LABEL_CROSS",
          "value": 5
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_LABEL_CIRCLE",
          "value": 6
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_LABEL_SQUARE",
          "value": 7
        },
        {
          "name": "SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE",
          "value": 8
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 137,
        "column": 9
      },
      "comment": "/**\n *  The set of gamepad button labels\n *\n *  This isn\u0027t a complete set, just the face buttons to make it easy to show button prompts.\n *\n *  For a complete set, you should look at the button and gamepad type and have a set of symbols that work well with your art style.\n */"
    },
    "SDL_GamepadType": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_GAMEPAD_TYPE_UNKNOWN"
        },
        {
          "name": "SDL_GAMEPAD_TYPE_STANDARD",
          "value": 1
        },
        {
          "name": "SDL_GAMEPAD_TYPE_XBOX360",
          "value": 2
        },
        {
          "name": "SDL_GAMEPAD_TYPE_XBOXONE",
          "value": 3
        },
        {
          "name": "SDL_GAMEPAD_TYPE_PS3",
          "value": 4
        },
        {
          "name": "SDL_GAMEPAD_TYPE_PS4",
          "value": 5
        },
        {
          "name": "SDL_GAMEPAD_TYPE_PS5",
          "value": 6
        },
        {
          "name": "SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO",
          "value": 7
        },
        {
          "name": "SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT",
          "value": 8
        },
        {
          "name": "SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT",
          "value": 9
        },
        {
          "name": "SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR",
          "value": 10
        },
        {
          "name": "SDL_GAMEPAD_TYPE_MAX",
          "value": 11
        }
      ],
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 62,
        "column": 9
      }
    },
    "SDL_GLattr": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_GL_RED_SIZE"
        },
        {
          "name": "SDL_GL_GREEN_SIZE",
          "value": 1
        },
        {
          "name": "SDL_GL_BLUE_SIZE",
          "value": 2
        },
        {
          "name": "SDL_GL_ALPHA_SIZE",
          "value": 3
        },
        {
          "name": "SDL_GL_BUFFER_SIZE",
          "value": 4
        },
        {
          "name": "SDL_GL_DOUBLEBUFFER",
          "value": 5
        },
        {
          "name": "SDL_GL_DEPTH_SIZE",
          "value": 6
        },
        {
          "name": "SDL_GL_STENCIL_SIZE",
          "value": 7
        },
        {
          "name": "SDL_GL_ACCUM_RED_SIZE",
          "value": 8
        },
        {
          "name": "SDL_GL_ACCUM_GREEN_SIZE",
          "value": 9
        },
        {
          "name": "SDL_GL_ACCUM_BLUE_SIZE",
          "value": 10
        },
        {
          "name": "SDL_GL_ACCUM_ALPHA_SIZE",
          "value": 11
        },
        {
          "name": "SDL_GL_STEREO",
          "value": 12
        },
        {
          "name": "SDL_GL_MULTISAMPLEBUFFERS",
          "value": 13
        },
        {
          "name": "SDL_GL_MULTISAMPLESAMPLES",
          "value": 14
        },
        {
          "name": "SDL_GL_ACCELERATED_VISUAL",
          "value": 15
        },
        {
          "name": "SDL_GL_RETAINED_BACKING",
          "value": 16
        },
        {
          "name": "SDL_GL_CONTEXT_MAJOR_VERSION",
          "value": 17
        },
        {
          "name": "SDL_GL_CONTEXT_MINOR_VERSION",
          "value": 18
        },
        {
          "name": "SDL_GL_CONTEXT_FLAGS",
          "value": 19
        },
        {
          "name": "SDL_GL_CONTEXT_PROFILE_MASK",
          "value": 20
        },
        {
          "name": "SDL_GL_SHARE_WITH_CURRENT_CONTEXT",
          "value": 21
        },
        {
          "name": "SDL_GL_FRAMEBUFFER_SRGB_CAPABLE",
          "value": 22
        },
        {
          "name": "SDL_GL_CONTEXT_RELEASE_BEHAVIOR",
          "value": 23
        },
        {
          "name": "SDL_GL_CONTEXT_RESET_NOTIFICATION",
          "value": 24
        },
        {
          "name": "SDL_GL_CONTEXT_NO_ERROR",
          "value": 25
        },
        {
          "name": "SDL_GL_FLOATBUFFERS",
          "value": 26
        },
        {
          "name": "SDL_GL_EGL_PLATFORM",
          "value": 27
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 192,
        "column": 9
      },
      "comment": "/**\n *  OpenGL configuration attributes\n */"
    },
    "SDL_hid_bus_type": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_HID_API_BUS_UNKNOWN"
        },
        {
          "name": "SDL_HID_API_BUS_USB",
          "value": 1
        },
        {
          "name": "SDL_HID_API_BUS_BLUETOOTH",
          "value": 2
        },
        {
          "name": "SDL_HID_API_BUS_I2C",
          "value": 3
        },
        {
          "name": "SDL_HID_API_BUS_SPI",
          "value": 4
        }
      ],
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 82,
        "column": 9
      },
      "comment": "/**\n *  HID underlying bus types.\n */"
    },
    "SDL_HintPriority": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_HINT_DEFAULT"
        },
        {
          "name": "SDL_HINT_NORMAL",
          "value": 1
        },
        {
          "name": "SDL_HINT_OVERRIDE",
          "value": 2
        }
      ],
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2574,
        "column": 9
      },
      "comment": "/**\n *  An enumeration of hint priorities\n */"
    },
    "SDL_HitTestResult": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_HITTEST_NORMAL"
        },
        {
          "name": "SDL_HITTEST_DRAGGABLE",
          "value": 1
        },
        {
          "name": "SDL_HITTEST_RESIZE_TOPLEFT",
          "value": 2
        },
        {
          "name": "SDL_HITTEST_RESIZE_TOP",
          "value": 3
        },
        {
          "name": "SDL_HITTEST_RESIZE_TOPRIGHT",
          "value": 4
        },
        {
          "name": "SDL_HITTEST_RESIZE_RIGHT",
          "value": 5
        },
        {
          "name": "SDL_HITTEST_RESIZE_BOTTOMRIGHT",
          "value": 6
        },
        {
          "name": "SDL_HITTEST_RESIZE_BOTTOM",
          "value": 7
        },
        {
          "name": "SDL_HITTEST_RESIZE_BOTTOMLEFT",
          "value": 8
        },
        {
          "name": "SDL_HITTEST_RESIZE_LEFT",
          "value": 9
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2006,
        "column": 9
      },
      "comment": "/**\n * Possible return values from the SDL_HitTest callback.\n *\n * \\sa SDL_HitTest\n */"
    },
    "SDL_JoystickPowerLevel": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_JOYSTICK_POWER_UNKNOWN",
          "value": -1
        },
        {
          "name": "SDL_JOYSTICK_POWER_EMPTY"
        },
        {
          "name": "SDL_JOYSTICK_POWER_LOW",
          "value": 1
        },
        {
          "name": "SDL_JOYSTICK_POWER_MEDIUM",
          "value": 2
        },
        {
          "name": "SDL_JOYSTICK_POWER_FULL",
          "value": 3
        },
        {
          "name": "SDL_JOYSTICK_POWER_WIRED",
          "value": 4
        },
        {
          "name": "SDL_JOYSTICK_POWER_MAX",
          "value": 5
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 100,
        "column": 9
      }
    },
    "SDL_JoystickType": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_JOYSTICK_TYPE_UNKNOWN"
        },
        {
          "name": "SDL_JOYSTICK_TYPE_GAMEPAD",
          "value": 1
        },
        {
          "name": "SDL_JOYSTICK_TYPE_WHEEL",
          "value": 2
        },
        {
          "name": "SDL_JOYSTICK_TYPE_ARCADE_STICK",
          "value": 3
        },
        {
          "name": "SDL_JOYSTICK_TYPE_FLIGHT_STICK",
          "value": 4
        },
        {
          "name": "SDL_JOYSTICK_TYPE_DANCE_PAD",
          "value": 5
        },
        {
          "name": "SDL_JOYSTICK_TYPE_GUITAR",
          "value": 6
        },
        {
          "name": "SDL_JOYSTICK_TYPE_DRUM_KIT",
          "value": 7
        },
        {
          "name": "SDL_JOYSTICK_TYPE_ARCADE_PAD",
          "value": 8
        },
        {
          "name": "SDL_JOYSTICK_TYPE_THROTTLE",
          "value": 9
        }
      ],
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 86,
        "column": 9
      }
    },
    "SDL_Keymod": {
      "size_of": 4,
      "values": [],
      "location": {
        "fileName": "SDL_keycode.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keycode.h",
        "line": 332,
        "column": 9
      },
      "comment": "/**\n * Enumeration of valid key mods (possibly OR\u0027d together).\n */"
    },
    "SDL_LogPriority": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_LOG_PRIORITY_VERBOSE",
          "value": 1
        },
        {
          "name": "SDL_LOG_PRIORITY_DEBUG",
          "value": 2
        },
        {
          "name": "SDL_LOG_PRIORITY_INFO",
          "value": 3
        },
        {
          "name": "SDL_LOG_PRIORITY_WARN",
          "value": 4
        },
        {
          "name": "SDL_LOG_PRIORITY_ERROR",
          "value": 5
        },
        {
          "name": "SDL_LOG_PRIORITY_CRITICAL",
          "value": 6
        },
        {
          "name": "SDL_NUM_LOG_PRIORITIES",
          "value": 7
        }
      ],
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 102,
        "column": 9
      },
      "comment": "/**\n *  The predefined log priorities\n */"
    },
    "SDL_MouseWheelDirection": {
      "size_of": 4,
      "values": [],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 76,
        "column": 9
      },
      "comment": "/**\n * Scroll direction types for the Scroll event\n */"
    },
    "SDL_PenSubtype": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_PEN_TYPE_UNKNOWN"
        },
        {
          "name": "SDL_PEN_TYPE_ERASER",
          "value": 1
        },
        {
          "name": "SDL_PEN_TYPE_PEN",
          "value": 2
        },
        {
          "name": "SDL_PEN_TYPE_PENCIL",
          "value": 3
        },
        {
          "name": "SDL_PEN_TYPE_BRUSH",
          "value": 4
        },
        {
          "name": "SDL_PEN_TYPE_AIRBRUSH",
          "value": 5
        },
        {
          "name": "SDL_PEN_TYPE_LAST",
          "value": 5
        }
      ],
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 134,
        "column": 9
      },
      "comment": "/**\n * Pen types\n *\n * Some pens identify as a particular type of drawing device (e.g., an airbrush or a pencil).\n *\n */"
    },
    "SDL_PixelFormatEnum": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_PIXELFORMAT_UNKNOWN"
        },
        {
          "name": "SDL_PIXELFORMAT_INDEX1LSB",
          "value": 286261504
        },
        {
          "name": "SDL_PIXELFORMAT_INDEX1MSB",
          "value": 287310080
        },
        {
          "name": "SDL_PIXELFORMAT_INDEX2LSB",
          "value": 470811136
        },
        {
          "name": "SDL_PIXELFORMAT_INDEX2MSB",
          "value": 471859712
        },
        {
          "name": "SDL_PIXELFORMAT_INDEX4LSB",
          "value": 303039488
        },
        {
          "name": "SDL_PIXELFORMAT_INDEX4MSB",
          "value": 304088064
        },
        {
          "name": "SDL_PIXELFORMAT_INDEX8",
          "value": 318769153
        },
        {
          "name": "SDL_PIXELFORMAT_RGB332",
          "value": 336660481
        },
        {
          "name": "SDL_PIXELFORMAT_XRGB4444",
          "value": 353504258
        },
        {
          "name": "SDL_PIXELFORMAT_RGB444",
          "value": 353504258
        },
        {
          "name": "SDL_PIXELFORMAT_XBGR4444",
          "value": 357698562
        },
        {
          "name": "SDL_PIXELFORMAT_BGR444",
          "value": 357698562
        },
        {
          "name": "SDL_PIXELFORMAT_XRGB1555",
          "value": 353570562
        },
        {
          "name": "SDL_PIXELFORMAT_RGB555",
          "value": 353570562
        },
        {
          "name": "SDL_PIXELFORMAT_XBGR1555",
          "value": 357764866
        },
        {
          "name": "SDL_PIXELFORMAT_BGR555",
          "value": 357764866
        },
        {
          "name": "SDL_PIXELFORMAT_ARGB4444",
          "value": 355602434
        },
        {
          "name": "SDL_PIXELFORMAT_RGBA4444",
          "value": 356651010
        },
        {
          "name": "SDL_PIXELFORMAT_ABGR4444",
          "value": 359796738
        },
        {
          "name": "SDL_PIXELFORMAT_BGRA4444",
          "value": 360845314
        },
        {
          "name": "SDL_PIXELFORMAT_ARGB1555",
          "value": 355667970
        },
        {
          "name": "SDL_PIXELFORMAT_RGBA5551",
          "value": 356782082
        },
        {
          "name": "SDL_PIXELFORMAT_ABGR1555",
          "value": 359862274
        },
        {
          "name": "SDL_PIXELFORMAT_BGRA5551",
          "value": 360976386
        },
        {
          "name": "SDL_PIXELFORMAT_RGB565",
          "value": 353701890
        },
        {
          "name": "SDL_PIXELFORMAT_BGR565",
          "value": 357896194
        },
        {
          "name": "SDL_PIXELFORMAT_RGB24",
          "value": 386930691
        },
        {
          "name": "SDL_PIXELFORMAT_BGR24",
          "value": 390076419
        },
        {
          "name": "SDL_PIXELFORMAT_XRGB8888",
          "value": 370546692
        },
        {
          "name": "SDL_PIXELFORMAT_RGBX8888",
          "value": 371595268
        },
        {
          "name": "SDL_PIXELFORMAT_XBGR8888",
          "value": 374740996
        },
        {
          "name": "SDL_PIXELFORMAT_BGRX8888",
          "value": 375789572
        },
        {
          "name": "SDL_PIXELFORMAT_ARGB8888",
          "value": 372645892
        },
        {
          "name": "SDL_PIXELFORMAT_RGBA8888",
          "value": 373694468
        },
        {
          "name": "SDL_PIXELFORMAT_ABGR8888",
          "value": 376840196
        },
        {
          "name": "SDL_PIXELFORMAT_BGRA8888",
          "value": 377888772
        },
        {
          "name": "SDL_PIXELFORMAT_XRGB2101010",
          "value": 370614276
        },
        {
          "name": "SDL_PIXELFORMAT_XBGR2101010",
          "value": 374808580
        },
        {
          "name": "SDL_PIXELFORMAT_ARGB2101010",
          "value": 372711428
        },
        {
          "name": "SDL_PIXELFORMAT_ABGR2101010",
          "value": 376905732
        },
        {
          "name": "SDL_PIXELFORMAT_RGB48",
          "value": 403714054
        },
        {
          "name": "SDL_PIXELFORMAT_BGR48",
          "value": 406859782
        },
        {
          "name": "SDL_PIXELFORMAT_RGBA64",
          "value": 404766728
        },
        {
          "name": "SDL_PIXELFORMAT_ARGB64",
          "value": 405815304
        },
        {
          "name": "SDL_PIXELFORMAT_BGRA64",
          "value": 407912456
        },
        {
          "name": "SDL_PIXELFORMAT_ABGR64",
          "value": 408961032
        },
        {
          "name": "SDL_PIXELFORMAT_RGB48_FLOAT",
          "value": 437268486
        },
        {
          "name": "SDL_PIXELFORMAT_BGR48_FLOAT",
          "value": 440414214
        },
        {
          "name": "SDL_PIXELFORMAT_RGBA64_FLOAT",
          "value": 438321160
        },
        {
          "name": "SDL_PIXELFORMAT_ARGB64_FLOAT",
          "value": 439369736
        },
        {
          "name": "SDL_PIXELFORMAT_BGRA64_FLOAT",
          "value": 441466888
        },
        {
          "name": "SDL_PIXELFORMAT_ABGR64_FLOAT",
          "value": 442515464
        },
        {
          "name": "SDL_PIXELFORMAT_RGB96_FLOAT",
          "value": 454057996
        },
        {
          "name": "SDL_PIXELFORMAT_BGR96_FLOAT",
          "value": 457203724
        },
        {
          "name": "SDL_PIXELFORMAT_RGBA128_FLOAT",
          "value": 455114768
        },
        {
          "name": "SDL_PIXELFORMAT_ARGB128_FLOAT",
          "value": 456163344
        },
        {
          "name": "SDL_PIXELFORMAT_BGRA128_FLOAT",
          "value": 458260496
        },
        {
          "name": "SDL_PIXELFORMAT_ABGR128_FLOAT",
          "value": 459309072
        },
        {
          "name": "SDL_PIXELFORMAT_RGBA32",
          "value": 376840196
        },
        {
          "name": "SDL_PIXELFORMAT_ARGB32",
          "value": 377888772
        },
        {
          "name": "SDL_PIXELFORMAT_BGRA32",
          "value": 372645892
        },
        {
          "name": "SDL_PIXELFORMAT_ABGR32",
          "value": 373694468
        },
        {
          "name": "SDL_PIXELFORMAT_RGBX32",
          "value": 374740996
        },
        {
          "name": "SDL_PIXELFORMAT_XRGB32",
          "value": 375789572
        },
        {
          "name": "SDL_PIXELFORMAT_BGRX32",
          "value": 370546692
        },
        {
          "name": "SDL_PIXELFORMAT_XBGR32",
          "value": 371595268
        },
        {
          "name": "SDL_PIXELFORMAT_YV12",
          "value": 842094169
        },
        {
          "name": "SDL_PIXELFORMAT_IYUV",
          "value": 1448433993
        },
        {
          "name": "SDL_PIXELFORMAT_YUY2",
          "value": 844715353
        },
        {
          "name": "SDL_PIXELFORMAT_UYVY",
          "value": 1498831189
        },
        {
          "name": "SDL_PIXELFORMAT_YVYU",
          "value": 1431918169
        },
        {
          "name": "SDL_PIXELFORMAT_NV12",
          "value": 842094158
        },
        {
          "name": "SDL_PIXELFORMAT_NV21",
          "value": 825382478
        },
        {
          "name": "SDL_PIXELFORMAT_P010",
          "value": 808530000
        },
        {
          "name": "SDL_PIXELFORMAT_EXTERNAL_OES",
          "value": 542328143
        }
      ],
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 214,
        "column": 9
      },
      "comment": "/* Note: If you modify this list, update SDL_GetPixelFormatName() */"
    },
    "SDL_PowerState": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_POWERSTATE_UNKNOWN"
        },
        {
          "name": "SDL_POWERSTATE_ON_BATTERY",
          "value": 1
        },
        {
          "name": "SDL_POWERSTATE_NO_BATTERY",
          "value": 2
        },
        {
          "name": "SDL_POWERSTATE_CHARGING",
          "value": 3
        },
        {
          "name": "SDL_POWERSTATE_CHARGED",
          "value": 4
        }
      ],
      "location": {
        "fileName": "SDL_power.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_power.h",
        "line": 42,
        "column": 9
      },
      "comment": "/**\n *  The basic state for the system\u0027s power supply.\n */"
    },
    "SDL_PropertyType": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_PROPERTY_TYPE_INVALID"
        },
        {
          "name": "SDL_PROPERTY_TYPE_POINTER",
          "value": 1
        },
        {
          "name": "SDL_PROPERTY_TYPE_STRING",
          "value": 2
        },
        {
          "name": "SDL_PROPERTY_TYPE_NUMBER",
          "value": 3
        },
        {
          "name": "SDL_PROPERTY_TYPE_FLOAT",
          "value": 4
        },
        {
          "name": "SDL_PROPERTY_TYPE_BOOLEAN",
          "value": 5
        }
      ],
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 47,
        "column": 9
      },
      "comment": "/**\n * SDL property type\n */"
    },
    "SDL_RendererLogicalPresentation": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_LOGICAL_PRESENTATION_DISABLED"
        },
        {
          "name": "SDL_LOGICAL_PRESENTATION_STRETCH",
          "value": 1
        },
        {
          "name": "SDL_LOGICAL_PRESENTATION_LETTERBOX",
          "value": 2
        },
        {
          "name": "SDL_LOGICAL_PRESENTATION_OVERSCAN",
          "value": 3
        },
        {
          "name": "SDL_LOGICAL_PRESENTATION_INTEGER_SCALE",
          "value": 4
        }
      ],
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 111,
        "column": 9
      },
      "comment": "/**\n * How the logical size is mapped to the output\n */"
    },
    "SDL_ScaleMode": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_SCALEMODE_NEAREST"
        },
        {
          "name": "SDL_SCALEMODE_LINEAR",
          "value": 1
        },
        {
          "name": "SDL_SCALEMODE_BEST",
          "value": 2
        }
      ],
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 71,
        "column": 9
      },
      "comment": "/**\n * The scaling mode\n */"
    },
    "SDL_Scancode": {
      "size_of": 4,
      "values": [],
      "location": {
        "fileName": "SDL_scancode.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_scancode.h",
        "line": 46,
        "column": 9
      },
      "comment": "/**\n *  The SDL keyboard scancode representation.\n *\n *  An SDL scancode is the physical representation of a key on the keyboard,\n *  independent of language and keyboard mapping.\n *\n *  Values of this type are used to represent keyboard keys, among other places\n *  in the \\link SDL_Keysym::scancode key.keysym.scancode \\endlink field of the\n *  SDL_Event structure.\n *\n *  The values in this enumeration are based on the USB usage page standard:\n *  https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf\n */"
    },
    "SDL_SensorType": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_SENSOR_INVALID",
          "value": -1
        },
        {
          "name": "SDL_SENSOR_UNKNOWN"
        },
        {
          "name": "SDL_SENSOR_ACCEL",
          "value": 1
        },
        {
          "name": "SDL_SENSOR_GYRO",
          "value": 2
        },
        {
          "name": "SDL_SENSOR_ACCEL_L",
          "value": 3
        },
        {
          "name": "SDL_SENSOR_GYRO_L",
          "value": 4
        },
        {
          "name": "SDL_SENSOR_ACCEL_R",
          "value": 5
        },
        {
          "name": "SDL_SENSOR_GYRO_R",
          "value": 6
        }
      ],
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 69,
        "column": 9
      },
      "comment": "/* The different sensors defined by SDL\n *\n * Additional sensors may be available, using platform dependent semantics.\n *\n * Hare are the additional Android sensors:\n * https://developer.android.com/reference/android/hardware/SensorEvent.html#values\n */"
    },
    "SDL_SystemCursor": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_SYSTEM_CURSOR_ARROW"
        },
        {
          "name": "SDL_SYSTEM_CURSOR_IBEAM",
          "value": 1
        },
        {
          "name": "SDL_SYSTEM_CURSOR_WAIT",
          "value": 2
        },
        {
          "name": "SDL_SYSTEM_CURSOR_CROSSHAIR",
          "value": 3
        },
        {
          "name": "SDL_SYSTEM_CURSOR_WAITARROW",
          "value": 4
        },
        {
          "name": "SDL_SYSTEM_CURSOR_SIZENWSE",
          "value": 5
        },
        {
          "name": "SDL_SYSTEM_CURSOR_SIZENESW",
          "value": 6
        },
        {
          "name": "SDL_SYSTEM_CURSOR_SIZEWE",
          "value": 7
        },
        {
          "name": "SDL_SYSTEM_CURSOR_SIZENS",
          "value": 8
        },
        {
          "name": "SDL_SYSTEM_CURSOR_SIZEALL",
          "value": 9
        },
        {
          "name": "SDL_SYSTEM_CURSOR_NO",
          "value": 10
        },
        {
          "name": "SDL_SYSTEM_CURSOR_HAND",
          "value": 11
        },
        {
          "name": "SDL_SYSTEM_CURSOR_WINDOW_TOPLEFT",
          "value": 12
        },
        {
          "name": "SDL_SYSTEM_CURSOR_WINDOW_TOP",
          "value": 13
        },
        {
          "name": "SDL_SYSTEM_CURSOR_WINDOW_TOPRIGHT",
          "value": 14
        },
        {
          "name": "SDL_SYSTEM_CURSOR_WINDOW_RIGHT",
          "value": 15
        },
        {
          "name": "SDL_SYSTEM_CURSOR_WINDOW_BOTTOMRIGHT",
          "value": 16
        },
        {
          "name": "SDL_SYSTEM_CURSOR_WINDOW_BOTTOM",
          "value": 17
        },
        {
          "name": "SDL_SYSTEM_CURSOR_WINDOW_BOTTOMLEFT",
          "value": 18
        },
        {
          "name": "SDL_SYSTEM_CURSOR_WINDOW_LEFT",
          "value": 19
        },
        {
          "name": "SDL_NUM_SYSTEM_CURSORS",
          "value": 20
        }
      ],
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 48,
        "column": 9
      },
      "comment": "/**\n * Cursor types for SDL_CreateSystemCursor().\n */"
    },
    "SDL_SystemTheme": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_SYSTEM_THEME_UNKNOWN"
        },
        {
          "name": "SDL_SYSTEM_THEME_LIGHT",
          "value": 1
        },
        {
          "name": "SDL_SYSTEM_THEME_DARK",
          "value": 2
        }
      ],
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 66,
        "column": 9
      },
      "comment": "/**\n *  System theme\n */"
    },
    "SDL_ThreadPriority": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_THREAD_PRIORITY_LOW"
        },
        {
          "name": "SDL_THREAD_PRIORITY_NORMAL",
          "value": 1
        },
        {
          "name": "SDL_THREAD_PRIORITY_HIGH",
          "value": 2
        },
        {
          "name": "SDL_THREAD_PRIORITY_TIME_CRITICAL",
          "value": 3
        }
      ],
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 68,
        "column": 9
      },
      "comment": "/**\n *  The SDL thread priority.\n *\n *  SDL will make system changes as necessary in order to apply the thread priority.\n *  Code which attempts to control thread state related to priority should be aware\n *  that calling SDL_SetThreadPriority may alter such state.\n *  SDL_HINT_THREAD_PRIORITY_POLICY can be used to control aspects of this behavior.\n *\n *  \\note On many systems you require special privileges to set high or time critical priority.\n */"
    },
    "SDL_TouchDeviceType": {
      "size_of": 4,
      "values": [
        {
          "name": "SDL_TOUCH_DEVICE_INVALID",
          "value": -1
        },
        {
          "name": "SDL_TOUCH_DEVICE_DIRECT"
        },
        {
          "name": "SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE",
          "value": 1
        },
        {
          "name": "SDL_TOUCH_DEVICE_INDIRECT_RELATIVE",
          "value": 2
        }
      ],
      "location": {
        "fileName": "SDL_touch.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
        "line": 44,
        "column": 9
      }
    }
  },
  "typeAliases": {
    "SDL_AssertData": {
      "underlyingType": {
        "name": "struct SDL_AssertData",
        "kind": "struct",
        "size_of": 48,
        "align_of": 8,
        "location": {
          "fileName": "SDL_assert.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
          "line": 128,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_assert.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
        "line": 137,
        "column": 3
      }
    },
    "SDL_AssertionHandler": {
      "underlyingType": {
        "name": "SDL_AssertState (const SDL_AssertData *, void *)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_assert.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
        "line": 230,
        "column": 35
      },
      "comment": "/**\n * A callback that fires when an SDL assertion fails.\n *\n * \\param data a pointer to the SDL_AssertData structure corresponding to the\n *             current assertion\n * \\param userdata what was passed as \u0060userdata\u0060 to SDL_SetAssertionHandler()\n * \\returns an SDL_AssertState value indicating how to handle the failure.\n */"
    },
    "SDL_AtomicInt": {
      "underlyingType": {
        "name": "struct SDL_AtomicInt",
        "kind": "struct",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_atomic.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
          "line": 270,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_atomic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
        "line": 270,
        "column": 45
      },
      "comment": "/**\n * A type representing an atomic integer value.\n *\n * It is a struct so people don\u0027t accidentally use numeric operations on it.\n */"
    },
    "SDL_AudioDeviceEvent": {
      "underlyingType": {
        "name": "struct SDL_AudioDeviceEvent",
        "kind": "struct",
        "size_of": 24,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 572,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 582,
        "column": 3
      },
      "comment": "/**\n *  Audio device event structure (event.adevice.*)\n */"
    },
    "SDL_AudioDeviceID": {
      "underlyingType": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_audio.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_audio.h",
        "line": 144,
        "column": 16
      },
      "comment": "/**\n * SDL Audio Device instance IDs.\n */"
    },
    "SDL_bool": {
      "underlyingType": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 137,
        "column": 13
      }
    },
    "SDL_calloc_func": {
      "underlyingType": {
        "name": "void *(size_t, size_t)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 415,
        "column": 25
      }
    },
    "SDL_CameraDeviceEvent": {
      "underlyingType": {
        "name": "struct SDL_CameraDeviceEvent",
        "kind": "struct",
        "size_of": 24,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 587,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 596,
        "column": 3
      },
      "comment": "/**\n *  Camera device event structure (event.cdevice.*)\n */"
    },
    "SDL_CameraDeviceID": {
      "underlyingType": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 48,
        "column": 16
      },
      "comment": "/**\n * This is a unique ID for a camera device for the time it is connected to the system,\n * and is never reused for the lifetime of the application. If the device is\n * disconnected and reconnected, it will get a new ID.\n *\n * The ID value starts at 1 and increments from there. The value 0 is an invalid ID.\n *\n * \\sa SDL_GetCameraDevices\n */"
    },
    "SDL_CameraPosition": {
      "underlyingType": {
        "name": "enum SDL_CameraPosition",
        "kind": "enum",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_camera.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
          "line": 78,
          "column": 14
        }
      },
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 83,
        "column": 3
      },
      "comment": "/**\n * The position of camera in relation to system device.\n *\n * \\sa SDL_GetCameraDevicePosition\n */"
    },
    "SDL_CameraSpec": {
      "underlyingType": {
        "name": "struct SDL_CameraSpec",
        "kind": "struct",
        "size_of": 20,
        "align_of": 4,
        "location": {
          "fileName": "SDL_camera.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
          "line": 64,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 71,
        "column": 3
      },
      "comment": "/**\n *  SDL_CameraSpec structure\n *\n * \\sa SDL_GetCameraDeviceSupportedFormats\n * \\sa SDL_GetCameraFormat\n *\n */"
    },
    "SDL_ClipboardCleanupCallback": {
      "underlyingType": {
        "name": "void (void *)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_clipboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
        "line": 164,
        "column": 24
      },
      "comment": "/**\n * Callback function that will be called when the clipboard is cleared, or new data is set.\n *\n * \\param userdata A pointer to provided user data\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetClipboardData\n */"
    },
    "SDL_ClipboardDataCallback": {
      "underlyingType": {
        "name": "const void *(void *, const char *, size_t *)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_clipboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_clipboard.h",
        "line": 153,
        "column": 31
      },
      "comment": "/**\n * Callback function that will be called when data for the specified mime-type\n * is requested by the OS.\n *\n * The callback function is called with NULL as the mime_type when the clipboard\n * is cleared or new data is set. The clipboard is automatically cleared in SDL_Quit().\n *\n * \\param userdata  A pointer to provided user data\n * \\param mime_type The requested mime-type\n * \\param size      A pointer filled in with the length of the returned data\n * \\returns a pointer to the data for the provided mime-type. Returning NULL or\n *          setting length to 0 will cause no data to be sent to the \u0022receiver\u0022. It is\n *          up to the receiver to handle this. Essentially returning no data is more or\n *          less undefined behavior and may cause breakage in receiving applications.\n *          The returned data will not be freed so it needs to be retained and dealt\n *          with internally.\n *\n * \\since This function is available since SDL 3.0.0.\n *\n * \\sa SDL_SetClipboardData\n */"
    },
    "SDL_ClipboardEvent": {
      "underlyingType": {
        "name": "struct SDL_ClipboardEvent",
        "kind": "struct",
        "size_of": 16,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 693,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 698,
        "column": 3
      },
      "comment": "/**\n * An event triggered when the clipboard contents have changed (event.clipboard.*)\n */"
    },
    "SDL_Color": {
      "underlyingType": {
        "name": "struct SDL_Color",
        "kind": "struct",
        "size_of": 4,
        "align_of": 1,
        "location": {
          "fileName": "SDL_pixels.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
          "line": 667,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 673,
        "column": 3
      },
      "comment": "/**\n * The bits of this structure can be directly reinterpreted as an integer-packed\n * color which uses the SDL_PIXELFORMAT_RGBA32 format (SDL_PIXELFORMAT_ABGR8888\n * on little-endian systems and SDL_PIXELFORMAT_RGBA8888 on big-endian systems).\n */"
    },
    "SDL_CommonEvent": {
      "underlyingType": {
        "name": "struct SDL_CommonEvent",
        "kind": "struct",
        "size_of": 16,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 245,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 250,
        "column": 3
      },
      "comment": "/**\n *  Fields shared by every event\n */"
    },
    "SDL_DateTime": {
      "underlyingType": {
        "name": "struct SDL_DateTime",
        "kind": "struct",
        "size_of": 36,
        "align_of": 4,
        "location": {
          "fileName": "SDL_time.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
          "line": 43,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_time.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_time.h",
        "line": 54,
        "column": 3
      },
      "comment": "/**\n * A structure holding a calendar date and time broken down into its components.\n */"
    },
    "SDL_DialogFileCallback": {
      "underlyingType": {
        "name": "void (void *, const char *const *, int)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_dialog.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_dialog.h",
        "line": 77,
        "column": 23
      },
      "comment": "/**\n * Callback used by file dialog functions.\n *\n * The specific usage is described in each function.\n *\n * If filelist is...\n * - \u0060NULL\u0060, an error occured. Details can be obtained with SDL_GetError().\n * - A pointer to \u0060NULL\u0060, the user either didn\u0027t choose any file or canceled\n *   the dialog.\n * - A pointer to non-\u0060NULL\u0060, the user chose one or more files. The argument is\n *   a null-terminated list of pointers to C strings, each containing a path.\n *\n * The filelist argument does not need to be freed; it will automatically be\n * freed when the callback returns.\n *\n * The filter argument is the index of the filter that was selected, or one\n * more than the size of the list (therefore the index of the terminating NULL\n * entry) if no filter was selected, or -1 if the platform or method doesn\u0027t\n * support fetching the selected filter or if an error occured.\n *\n * \\sa SDL_DialogFileFilter\n * \\sa SDL_ShowOpenFileDialog\n * \\sa SDL_ShowSaveFileDialog\n * \\sa SDL_ShowOpenFolderDialog\n */"
    },
    "SDL_DisplayEvent": {
      "underlyingType": {
        "name": "struct SDL_DisplayEvent",
        "kind": "struct",
        "size_of": 24,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 255,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 262,
        "column": 3
      },
      "comment": "/**\n *  Display state change event data (event.display.*)\n */"
    },
    "SDL_DisplayID": {
      "underlyingType": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 44,
        "column": 16
      }
    },
    "SDL_DropEvent": {
      "underlyingType": {
        "name": "struct SDL_DropEvent",
        "kind": "struct",
        "size_of": 48,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 678,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 688,
        "column": 3
      },
      "comment": "/**\n *  An event used to drop text or request a file open by the system (event.drop.*)\n *\n *  The \u0060data\u0060 is owned by SDL and should be copied if the application\n *  wants to hold onto it beyond the scope of handling this event.\n */"
    },
    "SDL_EGLAttrib": {
      "underlyingType": {
        "name": "intptr_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_intptr_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_intptr_t.h",
          "line": 32,
          "column": 33,
          "isSystem": true
        },
        "inner_type": {
          "name": "__darwin_intptr_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_types.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
            "line": 27,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 180,
        "column": 18
      }
    },
    "SDL_EGLAttribArrayCallback": {
      "underlyingType": {
        "name": "SDL_EGLAttrib *(void)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 186,
        "column": 34
      },
      "comment": "/**\n *  EGL attribute initialization callback types.\n */"
    },
    "SDL_EGLConfig": {
      "underlyingType": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 178,
        "column": 15
      }
    },
    "SDL_EGLDisplay": {
      "underlyingType": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 177,
        "column": 15
      },
      "comment": "/**\n *  Opaque EGL types.\n */"
    },
    "SDL_EGLint": {
      "underlyingType": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 181,
        "column": 13
      }
    },
    "SDL_EGLIntArrayCallback": {
      "underlyingType": {
        "name": "SDL_EGLint *(void)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 187,
        "column": 31
      }
    },
    "SDL_EGLSurface": {
      "underlyingType": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 179,
        "column": 15
      }
    },
    "SDL_EnumerateDirectoryCallback": {
      "underlyingType": {
        "name": "int (void *, const char *, const char *)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_filesystem.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
        "line": 269,
        "column": 23
      },
      "comment": "/* Callback for directory enumeration. Return 1 to keep enumerating, 0 to stop enumerating (no error), -1 to stop enumerating and report an error. \u0060dirname\u0060 is the directory being enumerated, \u0060fname\u0060 is the enumerated entry. */"
    },
    "SDL_EnumeratePropertiesCallback": {
      "underlyingType": {
        "name": "void (void *, SDL_PropertiesID, const char *)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 423,
        "column": 24
      }
    },
    "SDL_Event": {
      "underlyingType": {
        "name": "union SDL_Event",
        "kind": "union",
        "size_of": 128,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 741,
          "column": 15
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 792,
        "column": 3
      },
      "comment": "/**\n *  General event structure\n */"
    },
    "SDL_EventFilter": {
      "underlyingType": {
        "name": "int (void *, SDL_Event *)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 1100,
        "column": 23
      },
      "comment": "/**\n * A function pointer used for callbacks that watch the event queue.\n *\n * \\param userdata what was passed as \u0060userdata\u0060 to SDL_SetEventFilter()\n *        or SDL_AddEventWatch, etc\n * \\param event the event that triggered the callback\n * \\returns 1 to permit event to be added to the queue, and 0 to disallow\n *          it. When used with SDL_AddEventWatch, the return value is ignored.\n *\n * \\sa SDL_SetEventFilter\n * \\sa SDL_AddEventWatch\n */"
    },
    "SDL_FColor": {
      "underlyingType": {
        "name": "struct SDL_FColor",
        "kind": "struct",
        "size_of": 16,
        "align_of": 4,
        "location": {
          "fileName": "SDL_pixels.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
          "line": 680,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 686,
        "column": 3
      },
      "comment": "/**\n * The bits of this structure can be directly reinterpreted as a float-packed\n * color which uses the SDL_PIXELFORMAT_RGBA128_FLOAT format\n */"
    },
    "SDL_Finger": {
      "underlyingType": {
        "name": "struct SDL_Finger",
        "kind": "struct",
        "size_of": 24,
        "align_of": 8,
        "location": {
          "fileName": "SDL_touch.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
          "line": 52,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_touch.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
        "line": 58,
        "column": 3
      }
    },
    "SDL_FingerID": {
      "underlyingType": {
        "name": "Uint64",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 187,
          "column": 18
        },
        "inner_type": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_uint64_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
            "line": 31,
            "column": 28,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_touch.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
        "line": 42,
        "column": 16
      }
    },
    "SDL_FPoint": {
      "underlyingType": {
        "name": "struct SDL_FPoint",
        "kind": "struct",
        "size_of": 8,
        "align_of": 4,
        "location": {
          "fileName": "SDL_rect.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
          "line": 58,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 62,
        "column": 3
      },
      "comment": "/**\n * The structure that defines a point (floating point)\n *\n * \\sa SDL_GetRectEnclosingPointsFloat\n * \\sa SDL_PointInRectFloat\n */"
    },
    "SDL_FRect": {
      "underlyingType": {
        "name": "struct SDL_FRect",
        "kind": "struct",
        "size_of": 16,
        "align_of": 4,
        "location": {
          "fileName": "SDL_rect.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
          "line": 96,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 102,
        "column": 3
      },
      "comment": "/**\n * A rectangle, with the origin at the upper left (floating point).\n *\n * \\sa SDL_RectEmptyFloat\n * \\sa SDL_RectsEqualFloat\n * \\sa SDL_RectsEqualEpsilon\n * \\sa SDL_HasRectIntersectionFloat\n * \\sa SDL_GetRectIntersectionFloat\n * \\sa SDL_GetRectAndLineIntersectionFloat\n * \\sa SDL_GetRectUnionFloat\n * \\sa SDL_GetRectEnclosingPointsFloat\n * \\sa SDL_PointInRectFloat\n */"
    },
    "SDL_free_func": {
      "underlyingType": {
        "name": "void (void *)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 417,
        "column": 24
      }
    },
    "SDL_FunctionPointer": {
      "underlyingType": {
        "name": "void (void)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1359,
        "column": 16
      }
    },
    "SDL_GamepadAxisEvent": {
      "underlyingType": {
        "name": "struct SDL_GamepadAxisEvent",
        "kind": "struct",
        "size_of": 32,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 497,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 509,
        "column": 3
      },
      "comment": "/**\n *  Gamepad axis motion event structure (event.gaxis.*)\n */"
    },
    "SDL_GamepadBinding": {
      "underlyingType": {
        "name": "struct SDL_GamepadBinding",
        "kind": "struct",
        "size_of": 32,
        "align_of": 4,
        "location": {
          "fileName": "SDL_gamepad.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
          "line": 181,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 217,
        "column": 3
      }
    },
    "SDL_GamepadButtonEvent": {
      "underlyingType": {
        "name": "struct SDL_GamepadButtonEvent",
        "kind": "struct",
        "size_of": 24,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 515,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 525,
        "column": 3
      },
      "comment": "/**\n *  Gamepad button event structure (event.gbutton.*)\n */"
    },
    "SDL_GamepadDeviceEvent": {
      "underlyingType": {
        "name": "struct SDL_GamepadDeviceEvent",
        "kind": "struct",
        "size_of": 24,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 531,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 537,
        "column": 3
      },
      "comment": "/**\n *  Gamepad device event structure (event.gdevice.*)\n */"
    },
    "SDL_GamepadSensorEvent": {
      "underlyingType": {
        "name": "struct SDL_GamepadSensorEvent",
        "kind": "struct",
        "size_of": 48,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 558,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 567,
        "column": 3
      },
      "comment": "/**\n *  Gamepad sensor event structure (event.gsensor.*)\n */"
    },
    "SDL_GamepadTouchpadEvent": {
      "underlyingType": {
        "name": "struct SDL_GamepadTouchpadEvent",
        "kind": "struct",
        "size_of": 40,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 542,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 553,
        "column": 3
      },
      "comment": "/**\n *  Gamepad touchpad event structure (event.gtouchpad.*)\n */"
    },
    "SDL_GLContext": {
      "underlyingType": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 172,
        "column": 15
      },
      "comment": "/**\n *  An opaque handle to an OpenGL context.\n */"
    },
    "SDL_GUID": {
      "underlyingType": {
        "name": "struct SDL_GUID",
        "kind": "struct",
        "size_of": 16,
        "align_of": 1,
        "location": {
          "fileName": "SDL_guid.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
          "line": 55,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_guid.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
        "line": 57,
        "column": 3
      },
      "comment": "/**\n * An SDL_GUID is a 128-bit identifier for an input device that\n *   identifies that device across runs of SDL programs on the same\n *   platform.  If the device is detached and then re-attached to a\n *   different port, or if the base system is rebooted, the device\n *   should still report the same GUID.\n *\n * GUIDs are as precise as possible but are not guaranteed to\n *   distinguish physically distinct but equivalent devices.  For\n *   example, two game controllers from the same vendor with the same\n *   product ID and revision may have the same GUID.\n *\n * GUIDs may be platform-dependent (i.e., the same device may report\n *   different GUIDs on different operating systems).\n */"
    },
    "SDL_HapticCondition": {
      "underlyingType": {
        "name": "struct SDL_HapticCondition",
        "kind": "struct",
        "size_of": 68,
        "align_of": 4,
        "location": {
          "fileName": "SDL_haptic.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
          "line": 630,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 652,
        "column": 3
      },
      "comment": "/**\n *  A structure containing a template for a Condition effect.\n *\n *  The struct handles the following effects:\n *   - ::SDL_HAPTIC_SPRING: Effect based on axes position.\n *   - ::SDL_HAPTIC_DAMPER: Effect based on axes velocity.\n *   - ::SDL_HAPTIC_INERTIA: Effect based on axes acceleration.\n *   - ::SDL_HAPTIC_FRICTION: Effect based on axes movement.\n *\n *  Direction is handled by condition internals instead of a direction member.\n *  The condition effect specific members have three parameters.  The first\n *  refers to the X axis, the second refers to the Y axis and the third\n *  refers to the Z axis.  The right terms refer to the positive side of the\n *  axis and the left terms refer to the negative side of the axis.  Please\n *  refer to the ::SDL_HapticDirection diagram for which side is positive and\n *  which is negative.\n *\n *  \\sa SDL_HapticDirection\n *  \\sa SDL_HAPTIC_SPRING\n *  \\sa SDL_HAPTIC_DAMPER\n *  \\sa SDL_HAPTIC_INERTIA\n *  \\sa SDL_HAPTIC_FRICTION\n *  \\sa SDL_HapticEffect\n */"
    },
    "SDL_HapticConstant": {
      "underlyingType": {
        "name": "struct SDL_HapticConstant",
        "kind": "struct",
        "size_of": 40,
        "align_of": 4,
        "location": {
          "fileName": "SDL_haptic.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
          "line": 496,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 518,
        "column": 3
      },
      "comment": "/**\n *  A structure containing a template for a Constant effect.\n *\n *  This struct is exclusively for the ::SDL_HAPTIC_CONSTANT effect.\n *\n *  A constant effect applies a constant force in the specified direction\n *  to the joystick.\n *\n *  \\sa SDL_HAPTIC_CONSTANT\n *  \\sa SDL_HapticEffect\n */"
    },
    "SDL_HapticCustom": {
      "underlyingType": {
        "name": "struct SDL_HapticCustom",
        "kind": "struct",
        "size_of": 56,
        "align_of": 8,
        "location": {
          "fileName": "SDL_haptic.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
          "line": 732,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 757,
        "column": 3
      },
      "comment": "/**\n *  A structure containing a template for the ::SDL_HAPTIC_CUSTOM effect.\n *\n *  This struct is exclusively for the ::SDL_HAPTIC_CUSTOM effect.\n *\n *  A custom force feedback effect is much like a periodic effect, where the\n *  application can define its exact shape.  You will have to allocate the\n *  data yourself.  Data should consist of channels * samples Uint16 samples.\n *\n *  If channels is one, the effect is rotated using the defined direction.\n *  Otherwise it uses the samples in data for the different axes.\n *\n *  \\sa SDL_HAPTIC_CUSTOM\n *  \\sa SDL_HapticEffect\n */"
    },
    "SDL_HapticDirection": {
      "underlyingType": {
        "name": "struct SDL_HapticDirection",
        "kind": "struct",
        "size_of": 16,
        "align_of": 4,
        "location": {
          "fileName": "SDL_haptic.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
          "line": 478,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 482,
        "column": 3
      },
      "comment": "/**\n *  Structure that represents a haptic direction.\n *\n *  This is the direction where the force comes from,\n *  instead of the direction in which the force is exerted.\n *\n *  Directions can be specified by:\n *   - ::SDL_HAPTIC_POLAR : Specified by polar coordinates.\n *   - ::SDL_HAPTIC_CARTESIAN : Specified by cartesian coordinates.\n *   - ::SDL_HAPTIC_SPHERICAL : Specified by spherical coordinates.\n *\n *  Cardinal directions of the haptic device are relative to the positioning\n *  of the device.  North is considered to be away from the user.\n *\n *  The following diagram represents the cardinal directions:\n *  \\verbatim\n                 .--.\n                 |__| .-------.\n                 |=.| |.-----.|\n                 |--| ||     ||\n                 |  | |\u0027-----\u0027|\n                 |__|~\u0027)_____(\u0027\n                   [ COMPUTER ]\n\n\n                     North (0,-1)\n                         ^\n                         |\n                         |\n   (-1,0)  West \u003C----[ HAPTIC ]----\u003E East (1,0)\n                         |\n                         |\n                         v\n                      South (0,1)\n\n\n                      [ USER ]\n                        \\|||/\n                        (o o)\n                  ---ooO-(_)-Ooo---\n    \\endverbatim\n *\n *  If type is ::SDL_HAPTIC_POLAR, direction is encoded by hundredths of a\n *  degree starting north and turning clockwise.  ::SDL_HAPTIC_POLAR only uses\n *  the first \\c dir parameter.  The cardinal directions would be:\n *   - North: 0 (0 degrees)\n *   - East: 9000 (90 degrees)\n *   - South: 18000 (180 degrees)\n *   - West: 27000 (270 degrees)\n *\n *  If type is ::SDL_HAPTIC_CARTESIAN, direction is encoded by three positions\n *  (X axis, Y axis and Z axis (with 3 axes)).  ::SDL_HAPTIC_CARTESIAN uses\n *  the first three \\c dir parameters.  The cardinal directions would be:\n *   - North:  0,-1, 0\n *   - East:   1, 0, 0\n *   - South:  0, 1, 0\n *   - West:  -1, 0, 0\n *\n *  The Z axis represents the height of the effect if supported, otherwise\n *  it\u0027s unused.  In cartesian encoding (1, 2) would be the same as (2, 4), you\n *  can use any multiple you want, only the direction matters.\n *\n *  If type is ::SDL_HAPTIC_SPHERICAL, direction is encoded by two rotations.\n *  The first two \\c dir parameters are used.  The \\c dir parameters are as\n *  follows (all values are in hundredths of degrees):\n *   - Degrees from (1, 0) rotated towards (0, 1).\n *   - Degrees towards (0, 0, 1) (device needs at least 3 axes).\n *\n *\n *  Example of force coming from the south with all encodings (force coming\n *  from the south means the user will have to pull the stick to counteract):\n *  \\code\n *  SDL_HapticDirection direction;\n *\n *  // Cartesian directions\n *  direction.type = SDL_HAPTIC_CARTESIAN; // Using cartesian direction encoding.\n *  direction.dir[0] = 0; // X position\n *  direction.dir[1] = 1; // Y position\n *  // Assuming the device has 2 axes, we don\u0027t need to specify third parameter.\n *\n *  // Polar directions\n *  direction.type = SDL_HAPTIC_POLAR; // We\u0027ll be using polar direction encoding.\n *  direction.dir[0] = 18000; // Polar only uses first parameter\n *\n *  // Spherical coordinates\n *  direction.type = SDL_HAPTIC_SPHERICAL; // Spherical encoding\n *  direction.dir[0] = 9000; // Since we only have two axes we don\u0027t need more parameters.\n *  \\endcode\n *\n *  \\sa SDL_HAPTIC_POLAR\n *  \\sa SDL_HAPTIC_CARTESIAN\n *  \\sa SDL_HAPTIC_SPHERICAL\n *  \\sa SDL_HAPTIC_STEERING_AXIS\n *  \\sa SDL_HapticEffect\n *  \\sa SDL_GetNumHapticAxes\n */"
    },
    "SDL_HapticEffect": {
      "underlyingType": {
        "name": "union SDL_HapticEffect",
        "kind": "union",
        "size_of": 72,
        "align_of": 8,
        "location": {
          "fileName": "SDL_haptic.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
          "line": 828,
          "column": 15
        }
      },
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 838,
        "column": 3
      },
      "comment": "/**\n *  The generic template for any haptic effect.\n *\n *  All values max at 32767 (0x7FFF).  Signed values also can be negative.\n *  Time values unless specified otherwise are in milliseconds.\n *\n *  You can also pass ::SDL_HAPTIC_INFINITY to length instead of a 0-32767\n *  value.  Neither delay, interval, attack_length nor fade_length support\n *  ::SDL_HAPTIC_INFINITY.  Fade will also not be used since effect never ends.\n *\n *  Additionally, the ::SDL_HAPTIC_RAMP effect does not support a duration of\n *  ::SDL_HAPTIC_INFINITY.\n *\n *  Button triggers may not be supported on all devices, it is advised to not\n *  use them if possible.  Buttons start at index 1 instead of index 0 like\n *  the joystick.\n *\n *  If both attack_length and fade_level are 0, the envelope is not used,\n *  otherwise both values are used.\n *\n *  Common parts:\n *  \\code\n *  // Replay - All effects have this\n *  Uint32 length;        // Duration of effect (ms).\n *  Uint16 delay;         // Delay before starting effect.\n *\n *  // Trigger - All effects have this\n *  Uint16 button;        // Button that triggers effect.\n *  Uint16 interval;      // How soon before effect can be triggered again.\n *\n *  // Envelope - All effects except condition effects have this\n *  Uint16 attack_length; // Duration of the attack (ms).\n *  Uint16 attack_level;  // Level at the start of the attack.\n *  Uint16 fade_length;   // Duration of the fade out (ms).\n *  Uint16 fade_level;    // Level at the end of the fade.\n *  \\endcode\n *\n *\n *  Here we have an example of a constant effect evolution in time:\n *  \\verbatim\n    Strength\n    ^\n    |\n    |    effect level --\u003E  _________________\n    |                     /                 \\\n    |                    /                   \\\n    |                   /                     \\\n    |                  /                       \\\n    | attack_level --\u003E |                        \\\n    |                  |                        |  \u003C---  fade_level\n    |\n    \u002B--------------------------------------------------\u003E Time\n                       [--]                 [---]\n                       attack_length        fade_length\n\n    [------------------][-----------------------]\n    delay               length\n    \\endverbatim\n *\n *  Note either the attack_level or the fade_level may be above the actual\n *  effect level.\n *\n *  \\sa SDL_HapticConstant\n *  \\sa SDL_HapticPeriodic\n *  \\sa SDL_HapticCondition\n *  \\sa SDL_HapticRamp\n *  \\sa SDL_HapticLeftRight\n *  \\sa SDL_HapticCustom\n */"
    },
    "SDL_HapticID": {
      "underlyingType": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 845,
        "column": 16
      },
      "comment": "/**\n * This is a unique ID for a haptic device for the time it is connected to the system, and is never reused for the lifetime of the application. If the haptic device is disconnected and reconnected, it will get a new ID.\n *\n * The ID value starts at 1 and increments from there. The value 0 is an invalid ID.\n */"
    },
    "SDL_HapticLeftRight": {
      "underlyingType": {
        "name": "struct SDL_HapticLeftRight",
        "kind": "struct",
        "size_of": 12,
        "align_of": 4,
        "location": {
          "fileName": "SDL_haptic.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
          "line": 704,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 715,
        "column": 3
      },
      "comment": "/**\n * A structure containing a template for a Left/Right effect.\n *\n * This struct is exclusively for the ::SDL_HAPTIC_LEFTRIGHT effect.\n *\n * The Left/Right effect is used to explicitly control the large and small\n * motors, commonly found in modern game controllers. The small (right) motor\n * is high frequency, and the large (left) motor is low frequency.\n *\n * \\sa SDL_HAPTIC_LEFTRIGHT\n * \\sa SDL_HapticEffect\n */"
    },
    "SDL_HapticPeriodic": {
      "underlyingType": {
        "name": "struct SDL_HapticPeriodic",
        "kind": "struct",
        "size_of": 48,
        "align_of": 4,
        "location": {
          "fileName": "SDL_haptic.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
          "line": 577,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 604,
        "column": 3
      },
      "comment": "/**\n *  A structure containing a template for a Periodic effect.\n *\n *  The struct handles the following effects:\n *   - ::SDL_HAPTIC_SINE\n *   - ::SDL_HAPTIC_SQUARE\n *   - ::SDL_HAPTIC_TRIANGLE\n *   - ::SDL_HAPTIC_SAWTOOTHUP\n *   - ::SDL_HAPTIC_SAWTOOTHDOWN\n *\n *  A periodic effect consists in a wave-shaped effect that repeats itself\n *  over time.  The type determines the shape of the wave and the parameters\n *  determine the dimensions of the wave.\n *\n *  Phase is given by hundredth of a degree meaning that giving the phase a value\n *  of 9000 will displace it 25% of its period.  Here are sample values:\n *   -     0: No phase displacement.\n *   -  9000: Displaced 25% of its period.\n *   - 18000: Displaced 50% of its period.\n *   - 27000: Displaced 75% of its period.\n *   - 36000: Displaced 100% of its period, same as 0, but 0 is preferred.\n *\n *  Examples:\n *  \\verbatim\n    SDL_HAPTIC_SINE\n      __      __      __      __\n     /  \\    /  \\    /  \\    /\n    /    \\__/    \\__/    \\__/\n\n    SDL_HAPTIC_SQUARE\n     __    __    __    __    __\n    |  |  |  |  |  |  |  |  |  |\n    |  |__|  |__|  |__|  |__|  |\n\n    SDL_HAPTIC_TRIANGLE\n      /\\    /\\    /\\    /\\    /\\\n     /  \\  /  \\  /  \\  /  \\  /\n    /    \\/    \\/    \\/    \\/\n\n    SDL_HAPTIC_SAWTOOTHUP\n      /|  /|  /|  /|  /|  /|  /|\n     / | / | / | / | / | / | / |\n    /  |/  |/  |/  |/  |/  |/  |\n\n    SDL_HAPTIC_SAWTOOTHDOWN\n    \\  |\\  |\\  |\\  |\\  |\\  |\\  |\n     \\ | \\ | \\ | \\ | \\ | \\ | \\ |\n      \\|  \\|  \\|  \\|  \\|  \\|  \\|\n    \\endverbatim\n *\n *  \\sa SDL_HAPTIC_SINE\n *  \\sa SDL_HAPTIC_SQUARE\n *  \\sa SDL_HAPTIC_TRIANGLE\n *  \\sa SDL_HAPTIC_SAWTOOTHUP\n *  \\sa SDL_HAPTIC_SAWTOOTHDOWN\n *  \\sa SDL_HapticEffect\n */"
    },
    "SDL_HapticRamp": {
      "underlyingType": {
        "name": "struct SDL_HapticRamp",
        "kind": "struct",
        "size_of": 44,
        "align_of": 4,
        "location": {
          "fileName": "SDL_haptic.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
          "line": 667,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 690,
        "column": 3
      },
      "comment": "/**\n *  A structure containing a template for a Ramp effect.\n *\n *  This struct is exclusively for the ::SDL_HAPTIC_RAMP effect.\n *\n *  The ramp effect starts at start strength and ends at end strength.\n *  It augments in linear fashion.  If you use attack and fade with a ramp\n *  the effects get added to the ramp effect making the effect become\n *  quadratic instead of linear.\n *\n *  \\sa SDL_HAPTIC_RAMP\n *  \\sa SDL_HapticEffect\n */"
    },
    "SDL_hid_device_info": {
      "underlyingType": {
        "name": "struct SDL_hid_device_info",
        "kind": "struct",
        "size_of": 80,
        "align_of": 8,
        "location": {
          "fileName": "SDL_hidapi.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
          "line": 114,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 157,
        "column": 3
      },
      "comment": "/** hidapi info structure */\n/**\n *  Information about a connected HID device\n */"
    },
    "SDL_HintCallback": {
      "underlyingType": {
        "name": "void (void *, const char *, const char *, const char *)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_hints.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hints.h",
        "line": 2690,
        "column": 24
      },
      "comment": "/**\n * Type definition of the hint callback function.\n *\n * \\param userdata what was passed as \u0060userdata\u0060 to SDL_AddHintCallback()\n * \\param name what was passed as \u0060name\u0060 to SDL_AddHintCallback()\n * \\param oldValue the previous hint value\n * \\param newValue the new value hint is to be set to\n */"
    },
    "SDL_HitTest": {
      "underlyingType": {
        "name": "SDL_HitTestResult (SDL_Window *, const SDL_Point *, void *)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 2030,
        "column": 37
      },
      "comment": "/**\n * Callback used for hit-testing.\n *\n * \\param win the SDL_Window where hit-testing was set on\n * \\param area an SDL_Point which should be hit-tested\n * \\param data what was passed as \u0060callback_data\u0060 to SDL_SetWindowHitTest()\n * \\returns an SDL_HitTestResult value.\n *\n * \\sa SDL_SetWindowHitTest\n */"
    },
    "SDL_iconv_t": {
      "underlyingType": {
        "name": "struct SDL_iconv_data_t *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "struct SDL_iconv_data_t",
          "kind": "opaqueType",
          "location": {
            "fileName": "SDL_stdinc.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
            "line": 1207,
            "column": 16
          }
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1207,
        "column": 34
      },
      "comment": "/* SDL_iconv_* are now always real symbols/types, not macros or inlined. */"
    },
    "SDL_JoyAxisEvent": {
      "underlyingType": {
        "name": "struct SDL_JoyAxisEvent",
        "kind": "struct",
        "size_of": 32,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 404,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 416,
        "column": 3
      },
      "comment": "/**\n *  Joystick axis motion event structure (event.jaxis.*)\n */"
    },
    "SDL_JoyBallEvent": {
      "underlyingType": {
        "name": "struct SDL_JoyBallEvent",
        "kind": "struct",
        "size_of": 32,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 421,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 433,
        "column": 3
      },
      "comment": "/**\n *  \\brief Joystick trackball motion event structure (event.jball.*)\n */"
    },
    "SDL_JoyBatteryEvent": {
      "underlyingType": {
        "name": "struct SDL_JoyBatteryEvent",
        "kind": "struct",
        "size_of": 24,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 485,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 492,
        "column": 3
      },
      "comment": "/**\n *  Joysick battery level change event structure (event.jbattery.*)\n */"
    },
    "SDL_JoyButtonEvent": {
      "underlyingType": {
        "name": "struct SDL_JoyButtonEvent",
        "kind": "struct",
        "size_of": 24,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 459,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 469,
        "column": 3
      },
      "comment": "/**\n *  Joystick button event structure (event.jbutton.*)\n */"
    },
    "SDL_JoyDeviceEvent": {
      "underlyingType": {
        "name": "struct SDL_JoyDeviceEvent",
        "kind": "struct",
        "size_of": 24,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 474,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 480,
        "column": 3
      },
      "comment": "/**\n *  Joystick device event structure (event.jdevice.*)\n */"
    },
    "SDL_JoyHatEvent": {
      "underlyingType": {
        "name": "struct SDL_JoyHatEvent",
        "kind": "struct",
        "size_of": 24,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 438,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 454,
        "column": 3
      },
      "comment": "/**\n *  Joystick hat position change event structure (event.jhat.*)\n */"
    },
    "SDL_JoystickGUID": {
      "underlyingType": {
        "name": "SDL_GUID",
        "kind": "typeAlias",
        "size_of": 16,
        "align_of": 1,
        "location": {
          "fileName": "SDL_guid.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
          "line": 57,
          "column": 3
        },
        "inner_type": {
          "name": "struct SDL_GUID",
          "kind": "struct",
          "size_of": 16,
          "align_of": 1,
          "location": {
            "fileName": "SDL_guid.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_guid.h",
            "line": 55,
            "column": 16
          }
        }
      },
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 75,
        "column": 18
      },
      "comment": "/* A structure that encodes the stable unique id for a joystick device */"
    },
    "SDL_JoystickID": {
      "underlyingType": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 84,
        "column": 16
      },
      "comment": "/**\n * This is a unique ID for a joystick for the time it is connected to the system,\n * and is never reused for the lifetime of the application. If the joystick is\n * disconnected and reconnected, it will get a new ID.\n *\n * The ID value starts at 1 and increments from there. The value 0 is an invalid ID.\n */"
    },
    "SDL_KeyboardDeviceEvent": {
      "underlyingType": {
        "name": "struct SDL_KeyboardDeviceEvent",
        "kind": "struct",
        "size_of": 24,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 280,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 286,
        "column": 3
      },
      "comment": "/**\n *  Keyboard device event structure (event.kdevice.*)\n */"
    },
    "SDL_KeyboardEvent": {
      "underlyingType": {
        "name": "struct SDL_KeyboardEvent",
        "kind": "struct",
        "size_of": 48,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 291,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 303,
        "column": 3
      },
      "comment": "/**\n *  Keyboard button event structure (event.key.*)\n */"
    },
    "SDL_KeyboardID": {
      "underlyingType": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 42,
        "column": 16
      }
    },
    "SDL_Keycode": {
      "underlyingType": {
        "name": "Sint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 168,
          "column": 17
        },
        "inner_type": {
          "name": "int32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_int32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
            "line": 30,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_keycode.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keycode.h",
        "line": 45,
        "column": 16
      },
      "comment": "/**\n *  The SDL virtual key representation.\n *\n *  Values of this type are used to represent keyboard keys using the current\n *  layout of the keyboard.  These values include Unicode values representing\n *  the unmodified character that would be generated by pressing the key, or\n *  an SDLK_* constant for those keys that do not generate characters.\n *\n *  A special exception is the number keys at the top of the keyboard which\n *  map to SDLK_0...SDLK_9 on AZERTY layouts.\n */"
    },
    "SDL_Keysym": {
      "underlyingType": {
        "name": "struct SDL_Keysym",
        "kind": "struct",
        "size_of": 16,
        "align_of": 4,
        "location": {
          "fileName": "SDL_keyboard.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
          "line": 49,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_keyboard.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_keyboard.h",
        "line": 55,
        "column": 3
      },
      "comment": "/**\n *  The SDL keysym structure, used in key events.\n *\n *  \\note  If you are looking for translated character input, see the ::SDL_EVENT_TEXT_INPUT event.\n */"
    },
    "SDL_Locale": {
      "underlyingType": {
        "name": "struct SDL_Locale",
        "kind": "struct",
        "size_of": 16,
        "align_of": 8,
        "location": {
          "fileName": "SDL_locale.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_locale.h",
          "line": 43,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_locale.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_locale.h",
        "line": 47,
        "column": 3
      }
    },
    "SDL_LogOutputFunction": {
      "underlyingType": {
        "name": "void (void *, int, SDL_LogPriority, const char *)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_log.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
        "line": 368,
        "column": 24
      },
      "comment": "/**\n * The prototype for the log output callback function.\n *\n * This function is called by SDL when there is new text to be logged.\n *\n * \\param userdata what was passed as \u0060userdata\u0060 to SDL_SetLogOutputFunction()\n * \\param category the category of the message\n * \\param priority the priority of the message\n * \\param message the message being output\n */"
    },
    "SDL_malloc_func": {
      "underlyingType": {
        "name": "void *(size_t)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 414,
        "column": 25
      }
    },
    "SDL_MetalView": {
      "underlyingType": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "location": {
        "fileName": "SDL_metal.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_metal.h",
        "line": 44,
        "column": 15
      },
      "comment": "/**\n *  A handle to a CAMetalLayer-backed NSView (macOS) or UIView (iOS/tvOS).\n *\n *  \\note This can be cast directly to an NSView or UIView.\n */"
    },
    "SDL_MouseButtonEvent": {
      "underlyingType": {
        "name": "struct SDL_MouseButtonEvent",
        "kind": "struct",
        "size_of": 40,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 369,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 382,
        "column": 3
      },
      "comment": "/**\n *  Mouse button event structure (event.button.*)\n */"
    },
    "SDL_MouseDeviceEvent": {
      "underlyingType": {
        "name": "struct SDL_MouseDeviceEvent",
        "kind": "struct",
        "size_of": 24,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 341,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 347,
        "column": 3
      },
      "comment": "/**\n *  Mouse device event structure (event.mdevice.*)\n */"
    },
    "SDL_MouseID": {
      "underlyingType": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 41,
        "column": 16
      }
    },
    "SDL_MouseMotionEvent": {
      "underlyingType": {
        "name": "struct SDL_MouseMotionEvent",
        "kind": "struct",
        "size_of": 48,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 352,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 364,
        "column": 3
      },
      "comment": "/**\n *  Mouse motion event structure (event.motion.*)\n */"
    },
    "SDL_MouseWheelEvent": {
      "underlyingType": {
        "name": "struct SDL_MouseWheelEvent",
        "kind": "struct",
        "size_of": 48,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 387,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 399,
        "column": 3
      },
      "comment": "/**\n *  Mouse wheel event structure (event.wheel.*)\n */"
    },
    "SDL_Palette": {
      "underlyingType": {
        "name": "struct SDL_Palette",
        "kind": "struct",
        "size_of": 24,
        "align_of": 8,
        "location": {
          "fileName": "SDL_pixels.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
          "line": 689,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 695,
        "column": 3
      }
    },
    "SDL_PathInfo": {
      "underlyingType": {
        "name": "struct SDL_PathInfo",
        "kind": "struct",
        "size_of": 40,
        "align_of": 8,
        "location": {
          "fileName": "SDL_filesystem.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
          "line": 248,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_filesystem.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
        "line": 255,
        "column": 3
      }
    },
    "SDL_PathType": {
      "underlyingType": {
        "name": "enum SDL_PathType",
        "kind": "enum",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_filesystem.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
          "line": 240,
          "column": 14
        }
      },
      "location": {
        "fileName": "SDL_filesystem.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
        "line": 246,
        "column": 3
      },
      "comment": "/* Abstract filesystem interface */"
    },
    "SDL_PenButtonEvent": {
      "underlyingType": {
        "name": "struct SDL_PenButtonEvent",
        "kind": "struct",
        "size_of": 64,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 657,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 670,
        "column": 3
      },
      "comment": "/**\n *  Pressure-sensitive pen button event structure (event.pbutton.*)\n */"
    },
    "SDL_PenCapabilityInfo": {
      "underlyingType": {
        "name": "struct SDL_PenCapabilityInfo",
        "kind": "struct",
        "size_of": 12,
        "align_of": 4,
        "location": {
          "fileName": "SDL_pen.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
          "line": 241,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 246,
        "column": 3
      },
      "comment": "/**\n * Pen capabilities, as reported by ::SDL_GetPenCapabilities()\n */"
    },
    "SDL_PenID": {
      "underlyingType": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_pen.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pen.h",
        "line": 57,
        "column": 16
      }
    },
    "SDL_PenMotionEvent": {
      "underlyingType": {
        "name": "struct SDL_PenMotionEvent",
        "kind": "struct",
        "size_of": 64,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 639,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 652,
        "column": 3
      },
      "comment": "/**\n *  Pressure-sensitive pen motion / pressure / angle event structure (event.pmotion.*)\n */"
    },
    "SDL_PenTipEvent": {
      "underlyingType": {
        "name": "struct SDL_PenTipEvent",
        "kind": "struct",
        "size_of": 64,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 621,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 634,
        "column": 3
      },
      "comment": "/**\n *  Pressure-sensitive pen touched or stopped touching surface (event.ptip.*)\n */"
    },
    "SDL_PixelFormat": {
      "underlyingType": {
        "name": "struct SDL_PixelFormat",
        "kind": "struct",
        "size_of": 56,
        "align_of": 8,
        "location": {
          "fileName": "SDL_pixels.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
          "line": 700,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_pixels.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_pixels.h",
        "line": 721,
        "column": 3
      },
      "comment": "/**\n *  \\note Everything in the pixel format structure is read-only.\n */"
    },
    "SDL_Point": {
      "underlyingType": {
        "name": "struct SDL_Point",
        "kind": "struct",
        "size_of": 8,
        "align_of": 4,
        "location": {
          "fileName": "SDL_rect.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
          "line": 46,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 50,
        "column": 3
      },
      "comment": "/**\n * The structure that defines a point (integer)\n *\n * \\sa SDL_GetRectEnclosingPoints\n * \\sa SDL_PointInRect\n */"
    },
    "SDL_PropertiesID": {
      "underlyingType": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_properties.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
        "line": 42,
        "column": 16
      },
      "comment": "/**\n * SDL properties ID\n */"
    },
    "SDL_QuitEvent": {
      "underlyingType": {
        "name": "struct SDL_QuitEvent",
        "kind": "struct",
        "size_of": 16,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 716,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 721,
        "column": 3
      },
      "comment": "/**\n *  The \u0022quit requested\u0022 event\n */"
    },
    "SDL_realloc_func": {
      "underlyingType": {
        "name": "void *(void *, size_t)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 416,
        "column": 25
      }
    },
    "SDL_Rect": {
      "underlyingType": {
        "name": "struct SDL_Rect",
        "kind": "struct",
        "size_of": 16,
        "align_of": 4,
        "location": {
          "fileName": "SDL_rect.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
          "line": 76,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_rect.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
        "line": 80,
        "column": 3
      },
      "comment": "/**\n * A rectangle, with the origin at the upper left (integer).\n *\n * \\sa SDL_RectEmpty\n * \\sa SDL_RectsEqual\n * \\sa SDL_HasRectIntersection\n * \\sa SDL_GetRectIntersection\n * \\sa SDL_GetRectAndLineIntersection\n * \\sa SDL_GetRectUnion\n * \\sa SDL_GetRectEnclosingPoints\n */"
    },
    "SDL_RendererInfo": {
      "underlyingType": {
        "name": "struct SDL_RendererInfo",
        "kind": "struct",
        "size_of": 88,
        "align_of": 8,
        "location": {
          "fileName": "SDL_render.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
          "line": 78,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 86,
        "column": 3
      },
      "comment": "/**\n * Information on the capabilities of a render driver or context.\n */"
    },
    "SDL_SensorEvent": {
      "underlyingType": {
        "name": "struct SDL_SensorEvent",
        "kind": "struct",
        "size_of": 56,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 703,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 711,
        "column": 3
      },
      "comment": "/**\n *  Sensor event structure (event.sensor.*)\n */"
    },
    "SDL_SensorID": {
      "underlyingType": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 60,
        "column": 16
      },
      "comment": "/**\n * This is a unique ID for a sensor for the time it is connected to the system,\n * and is never reused for the lifetime of the application.\n *\n * The ID value starts at 1 and increments from there. The value 0 is an invalid ID.\n */"
    },
    "SDL_SpinLock": {
      "underlyingType": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_atomic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_atomic.h",
        "line": 94,
        "column": 13
      },
      "comment": "/**\n * \\name SDL AtomicLock\n *\n * The atomic locks are efficient spinlocks using CPU instructions,\n * but are vulnerable to starvation and can spin forever if a thread\n * holding a lock has been terminated.  For this reason you should\n * minimize the code executed inside an atomic lock and never do\n * expensive things like API or system calls while holding them.\n *\n * They are also vulnerable to starvation if the thread holding\n * the lock is lower priority than other threads and doesn\u0027t get\n * scheduled. In general you should use mutexes instead, since\n * they have better performance and contention behavior.\n *\n * The atomic locks are not safe to lock recursively.\n *\n * Porting Note:\n * The spin lock functions and type are required and can not be\n * emulated because they are used in the atomic emulation code.\n */\n/* @{ */"
    },
    "SDL_StorageInterface": {
      "underlyingType": {
        "name": "struct SDL_StorageInterface",
        "kind": "struct",
        "size_of": 80,
        "align_of": 8,
        "location": {
          "fileName": "SDL_storage.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
          "line": 44,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 76,
        "column": 3
      },
      "comment": "/* !!! FIXME: Don\u0027t let this ship without async R/W support!!! */"
    },
    "SDL_Surface": {
      "underlyingType": {
        "name": "struct SDL_Surface",
        "kind": "struct",
        "size_of": 96,
        "align_of": 8,
        "location": {
          "fileName": "SDL_surface.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
          "line": 107,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 131,
        "column": 3
      },
      "comment": "/**\n * A collection of pixels used in software blitting.\n *\n * Pixels are arranged in memory in rows, with the top row first.\n * Each row occupies an amount of memory given by the pitch (sometimes\n * known as the row stride in non-SDL APIs).\n *\n * Within each row, pixels are arranged from left to right until the\n * width is reached.\n * Each pixel occupies a number of bits appropriate for its format, with\n * most formats representing each pixel as one or more whole bytes\n * (in some indexed formats, instead multiple pixels are packed into\n * each byte), and a byte order given by the format.\n * After encoding all pixels, any remaining bytes to reach the pitch are\n * used as padding to reach a desired alignment, and have undefined contents.\n *\n * \\note  This structure should be treated as read-only, except for \\c pixels,\n *        which, if not NULL, contains the raw pixel data for the surface.\n */"
    },
    "SDL_TextEditingEvent": {
      "underlyingType": {
        "name": "struct SDL_TextEditingEvent",
        "kind": "struct",
        "size_of": 40,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 312,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 321,
        "column": 3
      },
      "comment": "/**\n *  Keyboard text editing event structure (event.edit.*)\n *\n *  The \u0060text\u0060 is owned by SDL and should be copied if the application\n *  wants to hold onto it beyond the scope of handling this event.\n */"
    },
    "SDL_TextInputEvent": {
      "underlyingType": {
        "name": "struct SDL_TextInputEvent",
        "kind": "struct",
        "size_of": 32,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 329,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 336,
        "column": 3
      },
      "comment": "/**\n *  Keyboard text input event structure (event.text.*)\n *\n *  The \u0060text\u0060 is owned by SDL and should be copied if the application\n *  wants to hold onto it beyond the scope of handling this event.\n */"
    },
    "SDL_ThreadFunction": {
      "underlyingType": {
        "name": "int (void *)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 81,
        "column": 24
      },
      "comment": "/**\n * The function passed to SDL_CreateThread().\n *\n * \\param data what was passed as \u0060data\u0060 to SDL_CreateThread()\n * \\returns a value that can be reported through SDL_WaitThread().\n */"
    },
    "SDL_ThreadID": {
      "underlyingType": {
        "name": "Uint64",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 187,
          "column": 18
        },
        "inner_type": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_uint64_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
            "line": 31,
            "column": 28,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 53,
        "column": 16
      },
      "comment": "/* The SDL thread ID */"
    },
    "SDL_Time": {
      "underlyingType": {
        "name": "Sint64",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 181,
          "column": 17
        },
        "inner_type": {
          "name": "int64_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_int64_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
            "line": 30,
            "column": 33,
            "isSystem": true
          },
          "inner_type": {
            "name": "long long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 197,
        "column": 16
      }
    },
    "SDL_TimerCallback": {
      "underlyingType": {
        "name": "Uint32 (Uint32, void *)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_timer.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
        "line": 137,
        "column": 26
      },
      "comment": "/**\n * Function prototype for the timer callback function.\n *\n * The callback function is passed the current timer interval and returns\n * the next timer interval, in milliseconds. If the returned value is the same as the one\n * passed in, the periodic alarm continues, otherwise a new alarm is\n * scheduled. If the callback returns 0, the periodic alarm is cancelled.\n */"
    },
    "SDL_TimerID": {
      "underlyingType": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_timer.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_timer.h",
        "line": 142,
        "column": 16
      },
      "comment": "/**\n * Definition of the timer ID type.\n */"
    },
    "SDL_TLSID": {
      "underlyingType": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 56,
        "column": 16
      },
      "comment": "/* Thread local storage ID, 0 is the invalid ID */"
    },
    "SDL_TouchFingerEvent": {
      "underlyingType": {
        "name": "struct SDL_TouchFingerEvent",
        "kind": "struct",
        "size_of": 56,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 601,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 614,
        "column": 3
      },
      "comment": "/**\n *  Touch finger event structure (event.tfinger.*)\n */"
    },
    "SDL_TouchID": {
      "underlyingType": {
        "name": "Uint64",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 187,
          "column": 18
        },
        "inner_type": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_uint64_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
            "line": 31,
            "column": 28,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_touch.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_touch.h",
        "line": 41,
        "column": 16
      }
    },
    "SDL_UserEvent": {
      "underlyingType": {
        "name": "struct SDL_UserEvent",
        "kind": "struct",
        "size_of": 40,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 726,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 735,
        "column": 3
      },
      "comment": "/**\n *  A user-defined event type (event.user.*)\n */"
    },
    "SDL_Version": {
      "underlyingType": {
        "name": "struct SDL_Version",
        "kind": "struct",
        "size_of": 3,
        "align_of": 1,
        "location": {
          "fileName": "SDL_version.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_version.h",
          "line": 51,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_version.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_version.h",
        "line": 56,
        "column": 3
      },
      "comment": "/**\n * Information about the version of SDL in use.\n *\n * Represents the library\u0027s version as three levels: major revision\n * (increments with massive changes, additions, and enhancements),\n * minor revision (increments with backwards-compatible changes to the\n * major revision), and patchlevel (increments with fixes to the minor\n * revision).\n *\n * \\sa SDL_VERSION\n * \\sa SDL_GetVersion\n */"
    },
    "SDL_Vertex": {
      "underlyingType": {
        "name": "struct SDL_Vertex",
        "kind": "struct",
        "size_of": 32,
        "align_of": 4,
        "location": {
          "fileName": "SDL_render.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
          "line": 91,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 96,
        "column": 3
      },
      "comment": "/**\n *  Vertex structure\n */"
    },
    "SDL_VirtualJoystickDesc": {
      "underlyingType": {
        "name": "struct SDL_VirtualJoystickDesc",
        "kind": "struct",
        "size_of": 88,
        "align_of": 8,
        "location": {
          "fileName": "SDL_joystick.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
          "line": 366,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 390,
        "column": 3
      },
      "comment": "/**\n * The structure that defines an extended virtual joystick description\n *\n * The caller must zero the structure and then initialize the version with \u0060SDL_VIRTUAL_JOYSTICK_DESC_VERSION\u0060 before passing it to SDL_AttachVirtualJoystickEx()\n *  All other elements of this structure are optional and can be left 0.\n *\n * \\sa SDL_AttachVirtualJoystickEx\n */"
    },
    "SDL_WindowEvent": {
      "underlyingType": {
        "name": "struct SDL_WindowEvent",
        "kind": "struct",
        "size_of": 32,
        "align_of": 8,
        "location": {
          "fileName": "SDL_events.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
          "line": 267,
          "column": 16
        }
      },
      "location": {
        "fileName": "SDL_events.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
        "line": 275,
        "column": 3
      },
      "comment": "/**\n *  Window state change event data (event.window.*)\n */"
    },
    "SDL_WindowFlags": {
      "underlyingType": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 115,
        "column": 16
      },
      "comment": "/**\n *  The flags on a window\n *\n *  \\sa SDL_GetWindowFlags\n */"
    },
    "SDL_WindowID": {
      "underlyingType": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 45,
        "column": 16
      }
    },
    "SDL_X11EventHook": {
      "underlyingType": {
        "name": "SDL_bool (void *, XEvent *)",
        "kind": "functionPointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "location": {
        "fileName": "SDL_system.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_system.h",
        "line": 111,
        "column": 28
      }
    },
    "Sint16": {
      "underlyingType": {
        "name": "int16_t",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "_int16_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int16_t.h",
          "line": 30,
          "column": 33,
          "isSystem": true
        },
        "inner_type": {
          "name": "short",
          "kind": "primitive",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 156,
        "column": 17
      }
    },
    "Sint32": {
      "underlyingType": {
        "name": "int32_t",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "_int32_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int32_t.h",
          "line": 30,
          "column": 33,
          "isSystem": true
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 168,
        "column": 17
      }
    },
    "Sint64": {
      "underlyingType": {
        "name": "int64_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_int64_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int64_t.h",
          "line": 30,
          "column": 33,
          "isSystem": true
        },
        "inner_type": {
          "name": "long long",
          "kind": "primitive",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 181,
        "column": 17
      }
    },
    "Sint8": {
      "underlyingType": {
        "name": "int8_t",
        "kind": "typeAlias",
        "size_of": 1,
        "align_of": 1,
        "location": {
          "fileName": "_int8_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_int8_t.h",
          "line": 30,
          "column": 31,
          "isSystem": true
        },
        "inner_type": {
          "name": "signed char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 144,
        "column": 16
      }
    },
    "Uint16": {
      "underlyingType": {
        "name": "uint16_t",
        "kind": "typeAlias",
        "size_of": 2,
        "align_of": 2,
        "location": {
          "fileName": "_uint16_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
          "line": 31,
          "column": 24,
          "isSystem": true
        },
        "inner_type": {
          "name": "unsigned short",
          "kind": "primitive",
          "size_of": 2,
          "align_of": 2,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 162,
        "column": 18
      }
    },
    "Uint32": {
      "underlyingType": {
        "name": "uint32_t",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "_uint32_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
          "line": 31,
          "column": 22,
          "isSystem": true
        },
        "inner_type": {
          "name": "unsigned int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 174,
        "column": 18
      }
    },
    "Uint64": {
      "underlyingType": {
        "name": "uint64_t",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "_uint64_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
          "line": 31,
          "column": 28,
          "isSystem": true
        },
        "inner_type": {
          "name": "unsigned long long",
          "kind": "primitive",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 187,
        "column": 18
      }
    },
    "Uint8": {
      "underlyingType": {
        "name": "uint8_t",
        "kind": "typeAlias",
        "size_of": 1,
        "align_of": 1,
        "location": {
          "fileName": "_uint8_t.h",
          "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
          "line": 31,
          "column": 23,
          "isSystem": true
        },
        "inner_type": {
          "name": "unsigned char",
          "kind": "primitive",
          "size_of": 1,
          "align_of": 1,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 150,
        "column": 17
      }
    }
  },
  "opaqueTypes": {
    "struct SDL_BlitMap": {
      "location": {
        "fileName": "SDL_surface.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_surface.h",
        "line": 66,
        "column": 16
      }
    },
    "struct SDL_Camera": {
      "location": {
        "fileName": "SDL_camera.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_camera.h",
        "line": 54,
        "column": 8
      },
      "comment": "/**\n * The structure used to identify an opened SDL camera\n */"
    },
    "struct SDL_Condition": {
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 622,
        "column": 8
      },
      "comment": "/* The SDL condition variable structure, defined in SDL_syscond.c */"
    },
    "struct SDL_Cursor": {
      "location": {
        "fileName": "SDL_mouse.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mouse.h",
        "line": 43,
        "column": 16
      }
    },
    "struct SDL_Gamepad": {
      "location": {
        "fileName": "SDL_gamepad.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_gamepad.h",
        "line": 59,
        "column": 8
      },
      "comment": "/**\n * The structure used to identify an SDL gamepad\n */"
    },
    "struct SDL_Haptic": {
      "location": {
        "fileName": "SDL_haptic.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_haptic.h",
        "line": 146,
        "column": 8
      },
      "comment": "/**\n *  \\typedef SDL_Haptic\n *\n *  The haptic structure used to identify an SDL haptic.\n *\n *  \\sa SDL_OpenHaptic\n *  \\sa SDL_OpenHapticFromJoystick\n *  \\sa SDL_CloseHaptic\n */"
    },
    "struct SDL_hid_device_": {
      "location": {
        "fileName": "SDL_hidapi.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_hidapi.h",
        "line": 76,
        "column": 8
      },
      "comment": "/**\n *  A handle representing an open HID device\n */"
    },
    "struct SDL_iconv_data_t": {
      "location": {
        "fileName": "SDL_stdinc.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
        "line": 1207,
        "column": 16
      }
    },
    "struct SDL_IOStream": {
      "location": {
        "fileName": "SDL_iostream.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_iostream.h",
        "line": 112,
        "column": 16
      }
    },
    "struct SDL_Joystick": {
      "location": {
        "fileName": "SDL_joystick.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_joystick.h",
        "line": 71,
        "column": 8
      }
    },
    "struct SDL_Mutex": {
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 131,
        "column": 8
      },
      "comment": "/* The SDL mutex structure, defined in SDL_sysmutex.c */"
    },
    "struct SDL_Renderer": {
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 123,
        "column": 8
      },
      "comment": "/**\n * A structure representing rendering state\n */"
    },
    "struct SDL_RWLock": {
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 249,
        "column": 8
      },
      "comment": "/* The SDL read/write lock structure, defined in SDL_sysrwlock.c */"
    },
    "struct SDL_Semaphore": {
      "location": {
        "fileName": "SDL_mutex.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_mutex.h",
        "line": 481,
        "column": 8
      },
      "comment": "/* The SDL semaphore structure, defined in SDL_syssem.c */"
    },
    "struct SDL_Sensor": {
      "location": {
        "fileName": "SDL_sensor.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_sensor.h",
        "line": 51,
        "column": 8
      },
      "comment": "/**\n *  SDL_sensor.h\n *\n *  In order to use these functions, SDL_Init() must have been called\n *  with the ::SDL_INIT_SENSOR flag.  This causes SDL to scan the system\n *  for sensors, and load appropriate drivers.\n */"
    },
    "struct SDL_Storage": {
      "location": {
        "fileName": "SDL_storage.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_storage.h",
        "line": 78,
        "column": 16
      }
    },
    "struct SDL_Texture": {
      "location": {
        "fileName": "SDL_render.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_render.h",
        "line": 129,
        "column": 8
      },
      "comment": "/**\n * An efficient driver-specific representation of pixel data\n */"
    },
    "struct SDL_Thread": {
      "location": {
        "fileName": "SDL_thread.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_thread.h",
        "line": 49,
        "column": 8
      },
      "comment": "/* The SDL thread structure, defined in SDL_thread.c */"
    },
    "struct SDL_Window": {
      "location": {
        "fileName": "SDL_video.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
        "line": 108,
        "column": 16
      }
    },
    "union _XEvent": {
      "location": {
        "fileName": "SDL_system.h",
        "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_system.h",
        "line": 110,
        "column": 15
      }
    }
  },
  "functionPointers": {
    "const void *(void *, const char *, size_t *)": {
      "type": {
        "name": "const void *(void *, const char *, size_t *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "const void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "const void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "size_t *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_size_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
                "line": 31,
                "column": 32,
                "isSystem": true
              },
              "inner_type": {
                "name": "__darwin_size_t",
                "kind": "typeAlias",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "_types.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                  "line": 70,
                  "column": 33,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned long",
                  "kind": "primitive",
                  "size_of": 8,
                  "align_of": 8,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "int (const void *, const void *)": {
      "type": {
        "name": "int (const void *, const void *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "int (void *, const char *, const char *)": {
      "type": {
        "name": "int (void *, const char *, const char *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "int (void *, const char *, const void *, Uint64)": {
      "type": {
        "name": "int (void *, const char *, const void *, Uint64)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "int (void *, const char *, SDL_EnumerateDirectoryCallback, void *)": {
      "type": {
        "name": "int (void *, const char *, SDL_EnumerateDirectoryCallback, void *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "SDL_EnumerateDirectoryCallback",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_filesystem.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
              "line": 269,
              "column": 23
            },
            "inner_type": {
              "name": "int (void *, const char *, const char *)",
              "kind": "functionPointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "int (void *, const char *, SDL_PathInfo *)": {
      "type": {
        "name": "int (void *, const char *, SDL_PathInfo *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "SDL_PathInfo *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_PathInfo",
              "kind": "typeAlias",
              "size_of": 40,
              "align_of": 8,
              "location": {
                "fileName": "SDL_filesystem.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
                "line": 255,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_PathInfo",
                "kind": "struct",
                "size_of": 40,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_filesystem.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_filesystem.h",
                  "line": 248,
                  "column": 16
                }
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "int (void *, const char *, void *, Uint64)": {
      "type": {
        "name": "int (void *, const char *, void *, Uint64)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "Uint64",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 187,
              "column": 18
            },
            "inner_type": {
              "name": "uint64_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_uint64_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
                "line": 31,
                "column": 28,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "int (void *, const char *)": {
      "type": {
        "name": "int (void *, const char *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "int (void *, const void *, const void *)": {
      "type": {
        "name": "int (void *, const void *, const void *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "int (void *, const void *, int)": {
      "type": {
        "name": "int (void *, const void *, int)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "int (void *, SDL_Event *)": {
      "type": {
        "name": "int (void *, SDL_Event *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "SDL_Event *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Event",
              "kind": "typeAlias",
              "size_of": 128,
              "align_of": 8,
              "location": {
                "fileName": "SDL_events.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                "line": 792,
                "column": 3
              },
              "inner_type": {
                "name": "union SDL_Event",
                "kind": "union",
                "size_of": 128,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_events.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_events.h",
                  "line": 741,
                  "column": 15
                }
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "int (void *, Uint16, Uint16)": {
      "type": {
        "name": "int (void *, Uint16, Uint16)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "Uint16",
            "kind": "typeAlias",
            "size_of": 2,
            "align_of": 2,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 162,
              "column": 18
            },
            "inner_type": {
              "name": "uint16_t",
              "kind": "typeAlias",
              "size_of": 2,
              "align_of": 2,
              "location": {
                "fileName": "_uint16_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint16_t.h",
                "line": 31,
                "column": 24,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned short",
                "kind": "primitive",
                "size_of": 2,
                "align_of": 2,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "int (void *, Uint8, Uint8, Uint8)": {
      "type": {
        "name": "int (void *, Uint8, Uint8, Uint8)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "Uint8",
            "kind": "typeAlias",
            "size_of": 1,
            "align_of": 1,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 150,
              "column": 17
            },
            "inner_type": {
              "name": "uint8_t",
              "kind": "typeAlias",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "_uint8_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint8_t.h",
                "line": 31,
                "column": 23,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "int (void *)": {
      "type": {
        "name": "int (void *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "int",
        "kind": "primitive",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "SDL_AssertState (const SDL_AssertData *, void *)": {
      "type": {
        "name": "SDL_AssertState (const SDL_AssertData *, void *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "SDL_AssertState",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_assert.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
          "line": 126,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_AssertState",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_assert.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
            "line": 119,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "const SDL_AssertData *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_AssertData",
              "kind": "typeAlias",
              "size_of": 48,
              "align_of": 8,
              "location": {
                "fileName": "SDL_assert.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
                "line": 137,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_AssertData",
                "kind": "struct",
                "size_of": 48,
                "align_of": 8,
                "location": {
                  "fileName": "SDL_assert.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_assert.h",
                  "line": 128,
                  "column": 16
                }
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "SDL_bool (void *, XEvent *)": {
      "type": {
        "name": "SDL_bool (void *, XEvent *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "XEvent *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "union _XEvent",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_system.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_system.h",
                "line": 110,
                "column": 15
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "SDL_bool (void *)": {
      "type": {
        "name": "SDL_bool (void *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "SDL_bool",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 137,
          "column": 13
        },
        "inner_type": {
          "name": "int",
          "kind": "primitive",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "SDL_EGLAttrib *(void)": {
      "type": {
        "name": "SDL_EGLAttrib *(void)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "SDL_EGLAttrib *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_EGLAttrib",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 180,
            "column": 18
          },
          "inner_type": {
            "name": "intptr_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_intptr_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_intptr_t.h",
              "line": 32,
              "column": 33,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_intptr_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 27,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      },
      "parameters": [],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "SDL_EGLint *(void)": {
      "type": {
        "name": "SDL_EGLint *(void)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "SDL_EGLint *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "SDL_EGLint",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 181,
            "column": 13
          },
          "inner_type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "SDL_HitTestResult (SDL_Window *, const SDL_Point *, void *)": {
      "type": {
        "name": "SDL_HitTestResult (SDL_Window *, const SDL_Point *, void *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "SDL_HitTestResult",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_video.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
          "line": 2018,
          "column": 3
        },
        "inner_type": {
          "name": "SDL_HitTestResult",
          "kind": "enum",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "SDL_video.h",
            "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
            "line": 2006,
            "column": 9
          }
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "SDL_Window *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "struct SDL_Window",
              "kind": "opaqueType",
              "location": {
                "fileName": "SDL_video.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_video.h",
                "line": 108,
                "column": 16
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const SDL_Point *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "SDL_Point",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 4,
              "location": {
                "fileName": "SDL_rect.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                "line": 50,
                "column": 3
              },
              "inner_type": {
                "name": "struct SDL_Point",
                "kind": "struct",
                "size_of": 8,
                "align_of": 4,
                "location": {
                  "fileName": "SDL_rect.h",
                  "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_rect.h",
                  "line": 46,
                  "column": 16
                }
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "Uint32 (Uint32, void *)": {
      "type": {
        "name": "Uint32 (Uint32, void *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "Uint32",
        "kind": "typeAlias",
        "size_of": 4,
        "align_of": 4,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 174,
          "column": 18
        },
        "inner_type": {
          "name": "uint32_t",
          "kind": "typeAlias",
          "size_of": 4,
          "align_of": 4,
          "location": {
            "fileName": "_uint32_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
            "line": 31,
            "column": 22,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "Uint32",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_stdinc.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
              "line": 174,
              "column": 18
            },
            "inner_type": {
              "name": "uint32_t",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "_uint32_t.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                "line": 31,
                "column": 22,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned int",
                "kind": "primitive",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "Uint64 (void *)": {
      "type": {
        "name": "Uint64 (void *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "Uint64",
        "kind": "typeAlias",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "SDL_stdinc.h",
          "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
          "line": 187,
          "column": 18
        },
        "inner_type": {
          "name": "uint64_t",
          "kind": "typeAlias",
          "size_of": 8,
          "align_of": 8,
          "location": {
            "fileName": "_uint64_t.h",
            "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint64_t.h",
            "line": 31,
            "column": 28,
            "isSystem": true
          },
          "inner_type": {
            "name": "unsigned long long",
            "kind": "primitive",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "void (void *, const char *, const char *, const char *)": {
      "type": {
        "name": "void (void *, const char *, const char *, const char *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "void (void *, const char *const *, int)": {
      "type": {
        "name": "void (void *, const char *const *, int)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char *const *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char *const",
              "kind": "pointer",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              },
              "inner_type": {
                "name": "const char",
                "kind": "primitive",
                "size_of": 1,
                "align_of": 1,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "void (void *, int, SDL_LogPriority, const char *)": {
      "type": {
        "name": "void (void *, int, SDL_LogPriority, const char *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "SDL_LogPriority",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_log.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
              "line": 111,
              "column": 3
            },
            "inner_type": {
              "name": "SDL_LogPriority",
              "kind": "enum",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_log.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_log.h",
                "line": 102,
                "column": 9
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "void (void *, int)": {
      "type": {
        "name": "void (void *, int)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "int",
            "kind": "primitive",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "void (void *, SDL_PropertiesID, const char *)": {
      "type": {
        "name": "void (void *, SDL_PropertiesID, const char *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "SDL_PropertiesID",
            "kind": "typeAlias",
            "size_of": 4,
            "align_of": 4,
            "location": {
              "fileName": "SDL_properties.h",
              "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_properties.h",
              "line": 42,
              "column": 16
            },
            "inner_type": {
              "name": "Uint32",
              "kind": "typeAlias",
              "size_of": 4,
              "align_of": 4,
              "location": {
                "fileName": "SDL_stdinc.h",
                "filePath": "/Users/lstranks/Programming/SDL-cs/ext/SDL/include/SDL3/SDL_stdinc.h",
                "line": 174,
                "column": 18
              },
              "inner_type": {
                "name": "uint32_t",
                "kind": "typeAlias",
                "size_of": 4,
                "align_of": 4,
                "location": {
                  "fileName": "_uint32_t.h",
                  "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/_types/_uint32_t.h",
                  "line": 31,
                  "column": 22,
                  "isSystem": true
                },
                "inner_type": {
                  "name": "unsigned int",
                  "kind": "primitive",
                  "size_of": 4,
                  "align_of": 4,
                  "location": {
                    "fileName": "",
                    "filePath": "",
                    "isSystem": true
                  }
                }
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "const char *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "const char",
              "kind": "primitive",
              "size_of": 1,
              "align_of": 1,
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "void (void *, void *)": {
      "type": {
        "name": "void (void *, void *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "void (void *)": {
      "type": {
        "name": "void (void *)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "void (void)": {
      "type": {
        "name": "void (void)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "void",
        "kind": "primitive",
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "parameters": [],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "void *(size_t, size_t)": {
      "type": {
        "name": "void *(size_t, size_t)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "void *(size_t)": {
      "type": {
        "name": "void *(size_t)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    },
    "void *(void *, size_t)": {
      "type": {
        "name": "void *(void *, size_t)",
        "kind": "functionPointer",
        "size_of": 1,
        "align_of": 4,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        }
      },
      "return_type": {
        "name": "void *",
        "kind": "pointer",
        "size_of": 8,
        "align_of": 8,
        "location": {
          "fileName": "",
          "filePath": "",
          "isSystem": true
        },
        "inner_type": {
          "name": "void",
          "kind": "primitive",
          "location": {
            "fileName": "",
            "filePath": "",
            "isSystem": true
          }
        }
      },
      "parameters": [
        {
          "name": "",
          "type": {
            "name": "void *",
            "kind": "pointer",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "",
              "filePath": "",
              "isSystem": true
            },
            "inner_type": {
              "name": "void",
              "kind": "primitive",
              "location": {
                "fileName": "",
                "filePath": "",
                "isSystem": true
              }
            }
          }
        },
        {
          "name": "",
          "type": {
            "name": "size_t",
            "kind": "typeAlias",
            "size_of": 8,
            "align_of": 8,
            "location": {
              "fileName": "_size_t.h",
              "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/sys/_types/_size_t.h",
              "line": 31,
              "column": 32,
              "isSystem": true
            },
            "inner_type": {
              "name": "__darwin_size_t",
              "kind": "typeAlias",
              "size_of": 8,
              "align_of": 8,
              "location": {
                "fileName": "_types.h",
                "filePath": "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX13.3.sdk/usr/include/arm/_types.h",
                "line": 70,
                "column": 33,
                "isSystem": true
              },
              "inner_type": {
                "name": "unsigned long",
                "kind": "primitive",
                "size_of": 8,
                "align_of": 8,
                "location": {
                  "fileName": "",
                  "filePath": "",
                  "isSystem": true
                }
              }
            }
          }
        }
      ],
      "CallingConvention": "cdecl",
      "location": {
        "fileName": "",
        "filePath": "",
        "isSystem": true
      }
    }
  }
}